<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Bytescout.PDFExtractor</name>
  </assembly>
  <members>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.decoders.HuffmanDecoder.decodeInt(System.Int32[][])">
      <exception cref="T:System.IO.IOException">
      </exception>
    </member>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.examples.pdf.PDFSegment.writeToHeader(System.Int16[])">
      <exception cref="T:System.IO.IOException">
      </exception>
    </member>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.image.JBIG2Bitmap.readBitmap(System.Boolean,System.Int32,System.Boolean,System.Boolean,JBIG2_Image_Decoder.org.jpedal.jbig2.image.JBIG2Bitmap,System.Int16[],System.Int16[],System.Int32)">
      <exception cref="T:System.IO.IOException">
      </exception>
      <exception cref="T:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Exception">
      </exception>
    </member>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.image.JBIG2Bitmap.readGenericRefinementRegion(System.Int32,System.Boolean,JBIG2_Image_Decoder.org.jpedal.jbig2.image.JBIG2Bitmap,System.Int32,System.Int32,System.Int16[],System.Int16[])">
      <exception cref="T:System.IO.IOException">
      </exception>
      <exception cref="T:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Exception">
      </exception>
    </member>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.image.JBIG2Bitmap.readTextRegion(System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32[][],System.Int32,JBIG2_Image_Decoder.org.jpedal.jbig2.image.JBIG2Bitmap[],System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32[][],System.Int32[][],System.Int32[][],System.Int32[][],System.Int32[][],System.Int32[][],System.Int32[][],System.Int32[][],System.Int32,System.Int16[],System.Int16[],JBIG2_Image_Decoder.org.jpedal.jbig2.decoders.JBIG2StreamDecoder)">
      <exception cref="T:System.IO.IOException">
      </exception>
      <exception cref="T:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Exception">
      </exception>
    </member>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.image.JBIG2Bitmap.getBufferedImage">
      <summary>
            Should be considered Trash, if you want to get an image from the Data, PLEASE rewrite this!
            </summary>
    </member>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Decoder.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Decoder.setGlobalData(System.Byte[])">
      <summary>
             If the data stream is taken from a PDF, there may be some global data. Pass any global data in here.  Call this method before decodeJBIG2(...)
            </summary>
      <param name="data">global data</param>
      <exception cref="T:System.IO.IOException">
      </exception>
      <exception cref="T:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Exception">
      </exception>
    </member>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Decoder.decodeJBIG2(System.String)">
      <summary>
            Decodes a JBIG2 image from a String path
            </summary>
      <param name="file">Path to file to decode</param>
      <exception cref="T:System.IO.IOException">
      </exception>
      <exception cref="T:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Exception">
      </exception>
    </member>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Decoder.decodeJBIG2(System.IO.Stream)">
      <summary>
            Decodes a JBIG2 image from a Stream
            </summary>
      <param name="inputStream">InputStream</param>
      <exception cref="T:System.IO.IOException">
      </exception>
      <exception cref="T:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Exception">
      </exception>
    </member>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Decoder.decodeJBIG2(System.Byte[])">
      <summary>
            Decodes a JBIG2 image from a bytearray 
            </summary>
      <param name="data">the raw data stream</param>
      <exception cref="T:System.IO.IOException">
      </exception>
      <exception cref="T:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Exception">
      </exception>
    </member>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Decoder.getPageAsBufferedImage(System.Int32)">
      <summary>
            Creates a Bitmap from a page
            </summary>
      <param name="page">The pages number</param>
      <returns>
      </returns>
    </member>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Exception.#ctor">
      <summary>
            Constructs a JBIGException without a message
            </summary>
    </member>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.JBIG2Exception.#ctor(System.String)">
      <summary>
            Constructs a JBIGException with a message
            </summary>
      <param name="message">a message describing the exception</param>
    </member>
    <member name="T:JBIG2_Image_Decoder.org.jpedal.jbig2.util.Debugging">
      <summary>
            I added this Class for the C# version to help debugging.
            </summary>
    </member>
    <member name="M:JBIG2_Image_Decoder.org.jpedal.jbig2.util.Debugging.DictToString``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.String)">
      <summary>
            Converts a Dictionary to a string.
            </summary>
      <typeparam name="T">Key</typeparam>
      <typeparam name="V">Value</typeparam>
      <param name="items">Dictionary</param>
      <param name="format">A format to Convert to</param>
      <returns>String representing the Dictionary</returns>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.CleanFaxData">
      <summary>
            Regenerated line info.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.CLEANFAXDATA tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.CleanFaxData.CLEAN">
      <summary>
            No errors detected.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.CleanFaxData.REGENERATED">
      <summary>
            Receiver regenerated lines.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.CleanFaxData.UNCLEAN">
      <summary>
            Uncorrected errors exist.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.ColorResponseUnit">
      <summary>
            Color curve accuracy.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.COLORRESPONSEUNIT tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.ColorResponseUnit.CRU10S">
      <summary>
            Tenths of a unit.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.ColorResponseUnit.CRU100S">
      <summary>
            Hundredths of a unit.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.ColorResponseUnit.CRU1000S">
      <summary>
            Thousandths of a unit.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.ColorResponseUnit.CRU10000S">
      <summary>
            Ten-thousandths of a unit.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.ColorResponseUnit.CRU100000S">
      <summary>
            Hundred-thousandths.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.Compression">
      <summary>
            Compression scheme.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.COMPRESSION tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.NONE">
      <summary>
            Dump mode.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.CCITTRLE">
      <summary>
            CCITT modified Huffman RLE.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.CCITTFAX3">
      <summary>
            CCITT Group 3 fax encoding.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.CCITT_T4">
      <summary>
            CCITT T.4 (TIFF 6 name for CCITT Group 3 fax encoding).
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.CCITTFAX4">
      <summary>
            CCITT Group 4 fax encoding.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.CCITT_T6">
      <summary>
            CCITT T.6 (TIFF 6 name for CCITT Group 4 fax encoding).
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.LZW">
      <summary>
            Lempel-Ziv &amp; Welch.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.OJPEG">
      <summary>
            Original JPEG / Old-style JPEG (6.0).
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.JPEG">
      <summary>
            JPEG DCT compression. Introduced post TIFF rev 6.0.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.NEXT">
      <summary>
            NeXT 2-bit RLE.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.CCITTRLEW">
      <summary>
            CCITT RLE.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.PACKBITS">
      <summary>
            Macintosh RLE.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.THUNDERSCAN">
      <summary>
            ThunderScan RLE.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.IT8CTPAD">
      <summary>
            IT8 CT w/padding. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.IT8LW">
      <summary>
            IT8 Linework RLE. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.IT8MP">
      <summary>
            IT8 Monochrome picture. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.IT8BL">
      <summary>
            IT8 Binary line art. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.PIXARFILM">
      <summary>
            Pixar companded 10bit LZW. Reserved for Pixar.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.PIXARLOG">
      <summary>
            Pixar companded 11bit ZIP. Reserved for Pixar.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.DEFLATE">
      <summary>
            Deflate compression.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.ADOBE_DEFLATE">
      <summary>
            Deflate compression, as recognized by Adobe.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.DCS">
      <summary>
            Kodak DCS encoding.
            Reserved for Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>).
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.JBIG">
      <summary>
            ISO JBIG.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.SGILOG">
      <summary>
            SGI Log Luminance RLE.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.SGILOG24">
      <summary>
            SGI Log 24-bit packed.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Compression.JP2000">
      <summary>
            Leadtools JPEG2000.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.ExtraSample">
      <summary>
            Information about extra samples.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.EXTRASAMPLES tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.ExtraSample.UNSPECIFIED">
      <summary>
            Unspecified data.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.ExtraSample.ASSOCALPHA">
      <summary>
            Associated alpha data.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.ExtraSample.UNASSALPHA">
      <summary>
            Unassociated alpha data.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.FaxMode">
      <summary>
            Group 3/4 format control.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.FAXMODE tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FaxMode.CLASSIC">
      <summary>
            Default, include RTC.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FaxMode.NORTC">
      <summary>
            No RTC at end of data.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FaxMode.NOEOL">
      <summary>
            No EOL code at end of row.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FaxMode.BYTEALIGN">
      <summary>
            Byte align row.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FaxMode.WORDALIGN">
      <summary>
            Word align row.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FaxMode.CLASSF">
      <summary>
            TIFF Class F.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.FileType">
      <summary>
            Subfile data descriptor.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.SUBFILETYPE tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FileType.REDUCEDIMAGE">
      <summary>
            Reduced resolution version.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FileType.PAGE">
      <summary>
            One page of many.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FileType.MASK">
      <summary>
            Transparency mask.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.FillOrder">
      <summary>
            Data order within a byte.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.FILLORDER tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FillOrder.MSB2LSB">
      <summary>
            Most significant -&gt; least.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FillOrder.LSB2MSB">
      <summary>
            Least significant -&gt; most.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.GrayResponseUnit">
      <summary>
            Gray scale curve accuracy.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.GRAYRESPONSEUNIT tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.GrayResponseUnit.GRU10S">
      <summary>
            Tenths of a unit.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.GrayResponseUnit.GRU100S">
      <summary>
            Hundredths of a unit.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.GrayResponseUnit.GRU1000S">
      <summary>
            Thousandths of a unit.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.GrayResponseUnit.GRU10000S">
      <summary>
            Ten-thousandths of a unit.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.GrayResponseUnit.GRU100000S">
      <summary>
            Hundred-thousandths.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.Group3Opt">
      <summary>
            Options for CCITT Group 3/4 fax encoding.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.GROUP3OPTIONS / TiffTag.T4OPTIONS and
            TiffTag.GROUP4OPTIONS / TiffTag.T6OPTIONS tags.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Group3Opt.UNKNOWN">
      <summary>
            Unknown (uninitialized).
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Group3Opt.ENCODING2D">
      <summary>
            2-dimensional coding.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Group3Opt.UNCOMPRESSED">
      <summary>
            Data not compressed.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Group3Opt.FILLBITS">
      <summary>
            Fill to byte boundary.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.InkSet">
      <summary>
            Inks in separated image.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.INKSET tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.InkSet.CMYK">
      <summary>
            Cyan-magenta-yellow-black color.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.InkSet.MULTIINK">
      <summary>
            Multi-ink or hi-fi color.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.JpegColorMode">
      <summary>
            Auto RGB&lt;=&gt;YCbCr convert.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.JPEGCOLORMODE tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.JpegColorMode.RAW">
      <summary>
            No conversion (default).
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.JpegColorMode.RGB">
      <summary>
            Do auto conversion.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.JpegProc">
      <summary>
            JPEG processing algorithm.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.JPEGPROC tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.JpegProc.BASELINE">
      <summary>
            Baseline sequential.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.JpegProc.LOSSLESS">
      <summary>
            Huffman coded lossless.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.JpegTablesMode">
      <summary>
            Jpeg Tables Mode.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.JPEGTABLESMODE tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.JpegTablesMode.NONE">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.JpegTablesMode.QUANT">
      <summary>
            Include quantization tables.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.JpegTablesMode.HUFF">
      <summary>
            Include Huffman tables.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.OFileType">
      <summary>
            Kind of data in subfile.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.OSUBFILETYPE tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.OFileType.IMAGE">
      <summary>
            Full resolution image data.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.OFileType.REDUCEDIMAGE">
      <summary>
            Reduced size image data.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.OFileType.PAGE">
      <summary>
            One page of many.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.Orientation">
      <summary>
            Image orientation.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.ORIENTATION tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Orientation.TOPLEFT">
      <summary>
            Row 0 top, Column 0 lhs.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Orientation.TOPRIGHT">
      <summary>
            Row 0 top, Column 0 rhs.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Orientation.BOTRIGHT">
      <summary>
            Row 0 bottom, Column 0 rhs.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Orientation.BOTLEFT">
      <summary>
            Row 0 bottom, Column 0 lhs.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Orientation.LEFTTOP">
      <summary>
            Row 0 lhs, Column 0 top.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Orientation.RIGHTTOP">
      <summary>
            Row 0 rhs, Column 0 top.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Orientation.RIGHTBOT">
      <summary>
            Row 0 rhs, Column 0 bottom.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Orientation.LEFTBOT">
      <summary>
            Row 0 lhs, Column 0 bottom.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.Photometric">
      <summary>
            Photometric interpretation.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.PHOTOMETRIC tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Photometric.MINISWHITE">
      <summary>
            Min value is white.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Photometric.MINISBLACK">
      <summary>
            Min value is black.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Photometric.RGB">
      <summary>
            RGB color model.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Photometric.PALETTE">
      <summary>
            Color map indexed.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Photometric.MASK">
      <summary>
            [obsoleted by TIFF rev. 6.0] Holdout mask.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Photometric.SEPARATED">
      <summary>
            Color separations.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Photometric.YCBCR">
      <summary>
            CCIR 601.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Photometric.CIELAB">
      <summary>
            1976 CIE L*a*b*.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Photometric.ICCLAB">
      <summary>
            ICC L*a*b*. Introduced post TIFF rev 6.0 by Adobe TIFF Technote 4.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Photometric.ITULAB">
      <summary>
            ITU L*a*b*.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Photometric.LOGL">
      <summary>
            CIE Log2(L).
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Photometric.LOGLUV">
      <summary>
            CIE Log2(L) (u',v').
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.PlanarConfig">
      <summary>
            Storage organization.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.PLANARCONFIG tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.PlanarConfig.UNKNOWN">
      <summary>
            Unknown (uninitialized).
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.PlanarConfig.CONTIG">
      <summary>
            Single image plane.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.PlanarConfig.SEPARATE">
      <summary>
            Separate planes of data.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.Predictor">
      <summary>
            Prediction scheme w/ LZW.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.PREDICTOR tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Predictor.NONE">
      <summary>
            No prediction scheme used.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Predictor.HORIZONTAL">
      <summary>
            Horizontal differencing.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Predictor.FLOATINGPOINT">
      <summary>
            Floating point predictor.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.ResUnit">
      <summary>
            Units of resolutions.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.RESOLUTIONUNIT tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.ResUnit.NONE">
      <summary>
            No meaningful units.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.ResUnit.INCH">
      <summary>
            English.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.ResUnit.CENTIMETER">
      <summary>
            Metric.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.SampleFormat">
      <summary>
            Data sample format.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.SAMPLEFORMAT tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.SampleFormat.UINT">
      <summary>
            Unsigned integer data
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.SampleFormat.INT">
      <summary>
            Signed integer data
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.SampleFormat.IEEEFP">
      <summary>
            IEEE floating point data
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.SampleFormat.VOID">
      <summary>
            Untyped data
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.SampleFormat.COMPLEXINT">
      <summary>
            Complex signed int
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.SampleFormat.COMPLEXIEEEFP">
      <summary>
            Complex ieee floating
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.Threshold">
      <summary>
            Thresholding used on data.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.THRESHHOLDING tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Threshold.BILEVEL">
      <summary>
            B&amp;W art scan.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Threshold.HALFTONE">
      <summary>
            Dithered scan.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Threshold.ERRORDIFFUSE">
      <summary>
            Usually Floyd-Steinberg.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.TiffPrintFlags">
      <summary>
            Flags that can be passed to <see cref="O:BitMiracle.LibTiff.Classic.Tiff.PrintDirectory" />
            method to control printing of data structures that are potentially very large. 
            </summary>
      <remarks>More than one flag can be used. Bit-or these flags to enable printing
            multiple items.</remarks>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffPrintFlags.NONE">
      <summary>
            no extra info
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffPrintFlags.STRIPS">
      <summary>
            strips/tiles info
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffPrintFlags.CURVES">
      <summary>
            color/gray response curves
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffPrintFlags.COLORMAP">
      <summary>
            colormap
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffPrintFlags.JPEGQTABLES">
      <summary>
            JPEG Q matrices
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffPrintFlags.JPEGACTABLES">
      <summary>
            JPEG AC tables
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffPrintFlags.JPEGDCTABLES">
      <summary>
            JPEG DC tables
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.TiffTag">
      <summary>
            TIFF tag definitions.
            </summary>
      <remarks>
            Joris Van Damme maintains
            <a href="http://www.awaresystems.be/imaging/tiff/tifftags.html" target="_blank">
            TIFF Tag Reference</a>, good source of tag information. It's an overview of known TIFF
            Tags with properties, short description, and other useful information.
            </remarks>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IGNORE">
      <summary>
            Tag placeholder
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SUBFILETYPE">
      <summary>
            Subfile data descriptor.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.FileType" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.OSUBFILETYPE">
      <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Kind of data in subfile. For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.OFileType" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEWIDTH">
      <summary>
            Image width in pixels.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH">
      <summary>
            Image height in pixels.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BITSPERSAMPLE">
      <summary>
            Bits per channel (sample).
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COMPRESSION">
      <summary>
            Data compression technique.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Compression" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PHOTOMETRIC">
      <summary>
            Photometric interpretation.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Photometric" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.THRESHHOLDING">
      <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Thresholding used on data. For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Threshold" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CELLWIDTH">
      <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Dithering matrix width.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CELLLENGTH">
      <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Dithering matrix height.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FILLORDER">
      <summary>
            Data order within a byte.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.FillOrder" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DOCUMENTNAME">
      <summary>
            Name of document which holds for image.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEDESCRIPTION">
      <summary>
            Information about image.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MAKE">
      <summary>
            Scanner manufacturer name.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MODEL">
      <summary>
            Scanner model name/number.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPOFFSETS">
      <summary>
            Offsets to data strips.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ORIENTATION">
      <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Image orientation. For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Orientation" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SAMPLESPERPIXEL">
      <summary>
            Samples per pixel.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ROWSPERSTRIP">
      <summary>
            Rows per strip of data.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPBYTECOUNTS">
      <summary>
            Bytes counts for strips.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MINSAMPLEVALUE">
      <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Minimum sample value.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MAXSAMPLEVALUE">
      <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Maximum sample value.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.XRESOLUTION">
      <summary>
            Pixels/resolution in x.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YRESOLUTION">
      <summary>
            Pixels/resolution in y.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG">
      <summary>
            Storage organization.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PAGENAME">
      <summary>
            Page name image is from.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.XPOSITION">
      <summary>
            X page offset of image lhs.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YPOSITION">
      <summary>
            Y page offset of image lhs.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FREEOFFSETS">
      <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Byte offset to free block.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FREEBYTECOUNTS">
      <summary>
            [obsoleted by TIFF rev. 5.0]<br />
            Sizes of free blocks.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GRAYRESPONSEUNIT">
      <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Gray scale curve accuracy.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.GrayResponseUnit" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GRAYRESPONSECURVE">
      <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Gray scale response curve.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GROUP3OPTIONS">
      <summary>
            Options for CCITT Group 3 fax encoding. 32 flag bits.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Group3Opt" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.T4OPTIONS">
      <summary>
            TIFF 6.0 proper name alias for GROUP3OPTIONS.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GROUP4OPTIONS">
      <summary>
            Options for CCITT Group 4 fax encoding. 32 flag bits.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Group3Opt" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.T6OPTIONS">
      <summary>
            TIFF 6.0 proper name alias for GROUP4OPTIONS.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.RESOLUTIONUNIT">
      <summary>
            Units of resolutions.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.ResUnit" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PAGENUMBER">
      <summary>
            Page numbers of multi-page.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COLORRESPONSEUNIT">
      <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Color curve accuracy.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.ColorResponseUnit" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TRANSFERFUNCTION">
      <summary>
            Colorimetry info.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SOFTWARE">
      <summary>
            Name &amp; release.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DATETIME">
      <summary>
            Creation date and time.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ARTIST">
      <summary>
            Creator of image.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.HOSTCOMPUTER">
      <summary>
            Machine where created.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PREDICTOR">
      <summary>
            Prediction scheme w/ LZW.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.Predictor" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.WHITEPOINT">
      <summary>
            Image white point.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PRIMARYCHROMATICITIES">
      <summary>
            Primary chromaticities.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COLORMAP">
      <summary>
            RGB map for pallette image.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.HALFTONEHINTS">
      <summary>
            Highlight + shadow info.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILEWIDTH">
      <summary>
            Tile width in pixels.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILELENGTH">
      <summary>
            Tile height in pixels.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILEOFFSETS">
      <summary>
            Offsets to data tiles.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILEBYTECOUNTS">
      <summary>
            Byte counts for tiles.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BADFAXLINES">
      <summary>
            Lines with wrong pixel count.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CLEANFAXDATA">
      <summary>
            Regenerated line info.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.CleanFaxData" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CONSECUTIVEBADFAXLINES">
      <summary>
            Max consecutive bad lines.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SUBIFD">
      <summary>
            Subimage descriptors.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.INKSET">
      <summary>
            Inks in separated image.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.InkSet" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.INKNAMES">
      <summary>
            ASCII names of inks.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.NUMBEROFINKS">
      <summary>
            Number of inks.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DOTRANGE">
      <summary>
            0% and 100% dot codes.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TARGETPRINTER">
      <summary>
            Separation target.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXTRASAMPLES">
      <summary>
            Information about extra samples.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.ExtraSample" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SAMPLEFORMAT">
      <summary>
            Data sample format.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.SampleFormat" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SMINSAMPLEVALUE">
      <summary>
            Variable MinSampleValue.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SMAXSAMPLEVALUE">
      <summary>
            Variable MaxSampleValue.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CLIPPATH">
      <summary>
            ClipPath. Introduced post TIFF rev 6.0 by Adobe TIFF technote 2.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.XCLIPPATHUNITS">
      <summary>
            XClipPathUnits. Introduced post TIFF rev 6.0 by Adobe TIFF technote 2.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YCLIPPATHUNITS">
      <summary>
            YClipPathUnits. Introduced post TIFF rev 6.0 by Adobe TIFF technote 2.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.INDEXED">
      <summary>
            Indexed. Introduced post TIFF rev 6.0 by Adobe TIFF Technote 3.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGTABLES">
      <summary>
            JPEG table stream. Introduced post TIFF rev 6.0.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.OPIPROXY">
      <summary>
            OPI Proxy. Introduced post TIFF rev 6.0 by Adobe TIFF technote.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGPROC">
      <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            JPEG processing algorithm.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.JpegProc" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGIFOFFSET">
      <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Pointer to SOI marker.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGIFBYTECOUNT">
      <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            JFIF stream length
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGRESTARTINTERVAL">
      <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Restart interval length.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGLOSSLESSPREDICTORS">
      <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Lossless proc predictor.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGPOINTTRANSFORM">
      <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Lossless point transform.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGQTABLES">
      <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            Q matrice offsets.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGDCTABLES">
      <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            DCT table offsets.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGACTABLES">
      <summary>
            [obsoleted by Technical Note #2 which specifies a revised JPEG-in-TIFF scheme]<br />
            AC coefficient offsets.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YCBCRCOEFFICIENTS">
      <summary>
            RGB -&gt; YCbCr transform.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YCBCRSUBSAMPLING">
      <summary>
            YCbCr subsampling factors.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.YCBCRPOSITIONING">
      <summary>
            Subsample positioning.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.YCbCrPosition" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REFERENCEBLACKWHITE">
      <summary>
            Colorimetry info.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.XMLPACKET">
      <summary>
            XML packet. Introduced post TIFF rev 6.0 by Adobe XMP Specification, January 2004.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.OPIIMAGEID">
      <summary>
            OPI ImageID. Introduced post TIFF rev 6.0 by Adobe TIFF technote.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REFPTS">
      <summary>
            Image reference points. Private tag registered to Island Graphics.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REGIONTACKPOINT">
      <summary>
            Region-xform tack point. Private tag registered to Island Graphics.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REGIONWARPCORNERS">
      <summary>
            Warp quadrilateral. Private tag registered to Island Graphics.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REGIONAFFINE">
      <summary>
            Affine transformation matrix. Private tag registered to Island Graphics.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MATTEING">
      <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Use EXTRASAMPLE tag. Private tag registered to SGI.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DATATYPE">
      <summary>
            [obsoleted by TIFF rev. 6.0]<br />
            Use SAMPLEFORMAT tag. Private tag registered to SGI.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEDEPTH">
      <summary>
            Z depth of image. Private tag registered to SGI.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.TILEDEPTH">
      <summary>
            Z depth/data tile. Private tag registered to SGI.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_IMAGEFULLWIDTH">
      <summary>
            Full image size in X. This tag is set when an image has been cropped out of a larger
            image. It reflect width of the original uncropped image. The XPOSITION tag can be used
            to determine the position of the smaller image in the larger one.
            Private tag registered to Pixar.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_IMAGEFULLLENGTH">
      <summary>
            Full image size in Y. This tag is set when an image has been cropped out of a larger
            image. It reflect height of the original uncropped image. The YPOSITION can be used
            to determine the position of the smaller image in the larger one.
            Private tag registered to Pixar.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_TEXTUREFORMAT">
      <summary>
            Texture map format. Used to identify special image modes and data used by Pixar's
            texture formats. Private tag registered to Pixar.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_WRAPMODES">
      <summary>
            S&amp;T wrap modes. Used to identify special image modes and data used by Pixar's
            texture formats. Private tag registered to Pixar.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_FOVCOT">
      <summary>
            Cotan(fov) for env. maps. Used to identify special image modes and data used by
            Pixar's texture formats. Private tag registered to Pixar.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_MATRIX_WORLDTOSCREEN">
      <summary>
            Used to identify special image modes and data used by Pixar's texture formats.
            Private tag registered to Pixar.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXAR_MATRIX_WORLDTOCAMERA">
      <summary>
            Used to identify special image modes and data used by Pixar's texture formats.
            Private tag registered to Pixar.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.WRITERSERIALNUMBER">
      <summary>
            Device serial number. Private tag registered to Eastman Kodak.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COPYRIGHT">
      <summary>
            Copyright string. This tag is listed in the TIFF rev. 6.0 w/ unknown ownership.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.RICHTIFFIPTC">
      <summary>
            IPTC TAG from RichTIFF specifications.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8SITE">
      <summary>
            Site name. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8COLORSEQUENCE">
      <summary>
            Color seq. [RGB, CMYK, etc]. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8HEADER">
      <summary>
            DDES Header. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8RASTERPADDING">
      <summary>
            Raster scanline padding. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8BITSPERRUNLENGTH">
      <summary>
            The number of bits in short run. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8BITSPEREXTENDEDRUNLENGTH">
      <summary>
            The number of bits in long run. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8COLORTABLE">
      <summary>
            LW colortable. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8IMAGECOLORINDICATOR">
      <summary>
            BP/BL image color switch. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8BKGCOLORINDICATOR">
      <summary>
            BP/BL bg color switch. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8IMAGECOLORVALUE">
      <summary>
            BP/BL image color value. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8BKGCOLORVALUE">
      <summary>
            BP/BL bg color value. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8PIXELINTENSITYRANGE">
      <summary>
            MP pixel intensity value. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8TRANSPARENCYINDICATOR">
      <summary>
            HC transparency switch. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8COLORCHARACTERIZATION">
      <summary>
            Color characterization table. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8HCUSAGE">
      <summary>
            HC usage indicator. Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8TRAPINDICATOR">
      <summary>
            Trapping indicator (untrapped = 0, trapped = 1). Reserved for ANSI IT8 TIFF/IT.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.IT8CMYKEQUIVALENT">
      <summary>
            CMYK color equivalents.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FRAMECOUNT">
      <summary>
            Sequence Frame Count. Private tag registered to Texas Instruments.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PHOTOSHOP">
      <summary>
            Private tag registered to Adobe for PhotoShop.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIFIFD">
      <summary>
            Pointer to EXIF private directory. This tag is documented in EXIF specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ICCPROFILE">
      <summary>
            ICC profile data. ?? Private tag registered to Adobe. ??
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JBIGOPTIONS">
      <summary>
            JBIG options. Private tag registered to Pixel Magic.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.GPSIFD">
      <summary>
            Pointer to GPS private directory. This tag is documented in EXIF specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXRECVPARAMS">
      <summary>
            Encoded Class 2 ses. params. Private tag registered to SGI.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXSUBADDRESS">
      <summary>
            Received SubAddr string. Private tag registered to SGI.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXRECVTIME">
      <summary>
            Receive time (secs). Private tag registered to SGI.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXDCS">
      <summary>
            Encoded fax ses. params, Table 2/T.30. Private tag registered to SGI.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.STONITS">
      <summary>
            Sample value to Nits. Private tag registered to SGI.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FEDEX_EDR">
      <summary>
            Private tag registered to FedEx.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.INTEROPERABILITYIFD">
      <summary>
            Pointer to Interoperability private directory.
            This tag is documented in EXIF specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DNGVERSION">
      <summary>
            DNG version number. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DNGBACKWARDVERSION">
      <summary>
            DNG compatibility version. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.UNIQUECAMERAMODEL">
      <summary>
            Name for the camera model. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.LOCALIZEDCAMERAMODEL">
      <summary>
            Localized camera model name. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CFAPLANECOLOR">
      <summary>
            CFAPattern-&gt;LinearRaw space mapping. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CFALAYOUT">
      <summary>
            Spatial layout of the CFA. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.LINEARIZATIONTABLE">
      <summary>
            Lookup table description. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BLACKLEVELREPEATDIM">
      <summary>
            Repeat pattern size for the BlackLevel tag. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BLACKLEVEL">
      <summary>
            Zero light encoding level. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BLACKLEVELDELTAH">
      <summary>
            Zero light encoding level differences (columns). Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BLACKLEVELDELTAV">
      <summary>
            Zero light encoding level differences (rows). Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.WHITELEVEL">
      <summary>
            Fully saturated encoding level. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DEFAULTSCALE">
      <summary>
            Default scale factors. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DEFAULTCROPORIGIN">
      <summary>
            Origin of the final image area. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DEFAULTCROPSIZE">
      <summary>
            Size of the final image area. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COLORMATRIX1">
      <summary>
            XYZ-&gt;reference color space transformation matrix 1.
            Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.COLORMATRIX2">
      <summary>
            XYZ-&gt;reference color space transformation matrix 2.
            Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CAMERACALIBRATION1">
      <summary>
            Calibration matrix 1. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CAMERACALIBRATION2">
      <summary>
            Calibration matrix 2. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REDUCTIONMATRIX1">
      <summary>
            Dimensionality reduction matrix 1. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.REDUCTIONMATRIX2">
      <summary>
            Dimensionality reduction matrix 2. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ANALOGBALANCE">
      <summary>
            Gain applied the stored raw values. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ASSHOTNEUTRAL">
      <summary>
            Selected white balance in linear reference space.
            Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ASSHOTWHITEXY">
      <summary>
            Selected white balance in x-y chromaticity coordinates.
            Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BASELINEEXPOSURE">
      <summary>
            How much to move the zero point. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BASELINENOISE">
      <summary>
            Relative noise level. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BASELINESHARPNESS">
      <summary>
            Relative amount of sharpening. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BAYERGREENSPLIT">
      <summary>
            How closely the values of the green pixels in the blue/green rows 
            track the values of the green pixels in the red/green rows.
            Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.LINEARRESPONSELIMIT">
      <summary>
            Non-linear encoding range. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CAMERASERIALNUMBER">
      <summary>
            Camera's serial number. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.LENSINFO">
      <summary>
            Information about the lens.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CHROMABLURRADIUS">
      <summary>
            Chroma blur radius. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ANTIALIASSTRENGTH">
      <summary>
            Relative strength of the camera's anti-alias filter.
            Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SHADOWSCALE">
      <summary>
            Used by Adobe Camera Raw. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DNGPRIVATEDATA">
      <summary>
            Manufacturer's private data. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MAKERNOTESAFETY">
      <summary>
            Whether the EXIF MakerNote tag is safe to preserve along with the rest of the EXIF data.
            Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CALIBRATIONILLUMINANT1">
      <summary>
            Illuminant 1. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CALIBRATIONILLUMINANT2">
      <summary>
            Illuminant 2. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.BESTQUALITYSCALE">
      <summary>
            Best quality multiplier. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.RAWDATAUNIQUEID">
      <summary>
            Unique identifier for the raw image data. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ORIGINALRAWFILENAME">
      <summary>
            File name of the original raw file. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ORIGINALRAWFILEDATA">
      <summary>
            Contents of the original raw file. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ACTIVEAREA">
      <summary>
            Active (non-masked) pixels of the sensor. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.MASKEDAREAS">
      <summary>
            List of coordinates of fully masked pixels. Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ASSHOTICCPROFILE">
      <summary>
            Used to map cameras's color space into ICC profile space.
            Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ASSHOTPREPROFILEMATRIX">
      <summary>
            Used to map cameras's color space into ICC profile space.
            Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CURRENTICCPROFILE">
      <summary>
            Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.CURRENTPREPROFILEMATRIX">
      <summary>
            Introduced by Adobe DNG specification.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSHUESHIFTVALUES">
      <summary>
            Undefined tag used by Eastman Kodak, hue shift correction data.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXMODE">
      <summary>
            [pseudo tag. not written to file]<br />
            Group 3/4 format control.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.FaxMode" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGQUALITY">
      <summary>
            [pseudo tag. not written to file]<br />
            Compression quality level. Quality level is on the IJG 0-100 scale. Default value is 75.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGCOLORMODE">
      <summary>
            [pseudo tag. not written to file]<br />
            Auto RGB&lt;=&gt;YCbCr convert.
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.JpegColorMode" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.JPEGTABLESMODE">
      <summary>
            [pseudo tag. not written to file]<br />
            For the list of possible values, see <see cref="T:BitMiracle.LibTiff.Classic.JpegTablesMode" />.
            Default is <see cref="F:BitMiracle.LibTiff.Classic.JpegTablesMode.QUANT" /> | <see cref="F:BitMiracle.LibTiff.Classic.JpegTablesMode.HUFF" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.FAXFILLFUNC">
      <summary>
            [pseudo tag. not written to file]<br />
            G3/G4 fill function.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXARLOGDATAFMT">
      <summary>
            [pseudo tag. not written to file]<br />
            PixarLogCodec I/O data sz.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSIMAGERTYPE">
      <summary>
            [pseudo tag. not written to file]<br />
            Imager mode &amp; filter.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>).
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSINTERPMODE">
      <summary>
            [pseudo tag. not written to file]<br />
            Interpolation mode.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>).
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSBALANCEARRAY">
      <summary>
            [pseudo tag. not written to file]<br />
            Color balance values.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>). 
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSCORRECTMATRIX">
      <summary>
            [pseudo tag. not written to file]<br />
            Color correction values.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>). 
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSGAMMA">
      <summary>
            [pseudo tag. not written to file]<br />
            Gamma value.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>). 
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSTOESHOULDERPTS">
      <summary>
            [pseudo tag. not written to file]<br />
            Toe &amp; shoulder points.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>). 
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSCALIBRATIONFD">
      <summary>
            [pseudo tag. not written to file]<br />
            Calibration file description.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.ZIPQUALITY">
      <summary>
            [pseudo tag. not written to file]<br />
            Compression quality level.
            Quality level is on the ZLIB 1-9 scale. Default value is -1.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.PIXARLOGQUALITY">
      <summary>
            [pseudo tag. not written to file]<br />
            PixarLog uses same scale.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.DCSCLIPRECTANGLE">
      <summary>
            [pseudo tag. not written to file]<br />
            Area of image to acquire.
            Allocated to Oceana Matrix (<a href="mailto:dev@oceana.com">dev@oceana.com</a>).
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SGILOGDATAFMT">
      <summary>
            [pseudo tag. not written to file]<br />
            SGILog user data format.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.SGILOGENCODE">
      <summary>
            [pseudo tag. not written to file]<br />
            SGILog data encoding control.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSURETIME">
      <summary>
            Exposure time.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FNUMBER">
      <summary>
            F number.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSUREPROGRAM">
      <summary>
            Exposure program.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SPECTRALSENSITIVITY">
      <summary>
            Spectral sensitivity.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_ISOSPEEDRATINGS">
      <summary>
            ISO speed rating.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_OECF">
      <summary>
            Optoelectric conversion factor.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXIFVERSION">
      <summary>
            Exif version.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_DATETIMEORIGINAL">
      <summary>
            Date and time of original data generation.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_DATETIMEDIGITIZED">
      <summary>
            Date and time of digital data generation.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_COMPONENTSCONFIGURATION">
      <summary>
            Meaning of each component.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_COMPRESSEDBITSPERPIXEL">
      <summary>
            Image compression mode.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SHUTTERSPEEDVALUE">
      <summary>
            Shutter speed.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_APERTUREVALUE">
      <summary>
            Aperture.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_BRIGHTNESSVALUE">
      <summary>
            Brightness.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSUREBIASVALUE">
      <summary>
            Exposure bias.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_MAXAPERTUREVALUE">
      <summary>
            Maximum lens aperture.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBJECTDISTANCE">
      <summary>
            Subject distance.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_METERINGMODE">
      <summary>
            Metering mode.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_LIGHTSOURCE">
      <summary>
            Light source.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FLASH">
      <summary>
            Flash.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALLENGTH">
      <summary>
            Lens focal length.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBJECTAREA">
      <summary>
            Subject area.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_MAKERNOTE">
      <summary>
            Manufacturer notes.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_USERCOMMENT">
      <summary>
            User comments.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBSECTIME">
      <summary>
            DateTime subseconds.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBSECTIMEORIGINAL">
      <summary>
            DateTimeOriginal subseconds.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBSECTIMEDIGITIZED">
      <summary>
            DateTimeDigitized subseconds.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FLASHPIXVERSION">
      <summary>
            Supported Flashpix version.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_COLORSPACE">
      <summary>
            Color space information.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_PIXELXDIMENSION">
      <summary>
            Valid image width.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_PIXELYDIMENSION">
      <summary>
            Valid image height.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_RELATEDSOUNDFILE">
      <summary>
            Related audio file.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FLASHENERGY">
      <summary>
            Flash energy.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SPATIALFREQUENCYRESPONSE">
      <summary>
            Spatial frequency response.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALPLANEXRESOLUTION">
      <summary>
            Focal plane X resolution.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALPLANEYRESOLUTION">
      <summary>
            Focal plane Y resolution.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALPLANERESOLUTIONUNIT">
      <summary>
            Focal plane resolution unit.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBJECTLOCATION">
      <summary>
            Subject location.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSUREINDEX">
      <summary>
            Exposure index.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SENSINGMETHOD">
      <summary>
            Sensing method.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FILESOURCE">
      <summary>
            File source.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SCENETYPE">
      <summary>
            Scene type.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_CFAPATTERN">
      <summary>
            CFA pattern.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_CUSTOMRENDERED">
      <summary>
            Custom image processing.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_EXPOSUREMODE">
      <summary>
            Exposure mode.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_WHITEBALANCE">
      <summary>
            White balance.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_DIGITALZOOMRATIO">
      <summary>
            Digital zoom ratio.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_FOCALLENGTHIN35MMFILM">
      <summary>
            Focal length in 35 mm film.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SCENECAPTURETYPE">
      <summary>
            Scene capture type.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_GAINCONTROL">
      <summary>
            Gain control.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_CONTRAST">
      <summary>
            Contrast.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SATURATION">
      <summary>
            Saturation.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SHARPNESS">
      <summary>
            Sharpness.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_DEVICESETTINGDESCRIPTION">
      <summary>
            Device settings description.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_SUBJECTDISTANCERANGE">
      <summary>
            Subject distance range.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTag.EXIF_IMAGEUNIQUEID">
      <summary>
            Unique image ID.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.TiffType">
      <summary>
            Tag data type.
            </summary>
      <remarks>Note: RATIONALs are the ratio of two 32-bit integer values.</remarks>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.NOTYPE">
      <summary>
            Placeholder.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.ANY">
      <summary>
            For field descriptor searching.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.BYTE">
      <summary>
            8-bit unsigned integer.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.ASCII">
      <summary>
            8-bit bytes with last byte <c>null</c>.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.SHORT">
      <summary>
            16-bit unsigned integer.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.LONG">
      <summary>
            32-bit unsigned integer.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.RATIONAL">
      <summary>
            64-bit unsigned fraction.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.SBYTE">
      <summary>
            8-bit signed integer.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.UNDEFINED">
      <summary>
            8-bit untyped data.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.SSHORT">
      <summary>
            16-bit signed integer.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.SLONG">
      <summary>
            32-bit signed integer.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.SRATIONAL">
      <summary>
            64-bit signed fraction.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.FLOAT">
      <summary>
            32-bit IEEE floating point.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.DOUBLE">
      <summary>
            64-bit IEEE floating point.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffType.IFD">
      <summary>
            32-bit unsigned integer (offset)
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.YCbCrPosition">
      <summary>
            Subsample positioning.<br />
            Possible values for <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.YCBCRPOSITIONING tag.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.YCbCrPosition.CENTERED">
      <summary>
            As in PostScript Level 2
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.YCbCrPosition.COSITED">
      <summary>
            As in CCIR 601-1
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.FieldBit">
      <summary>
            Field bits (flags) for tags.
            </summary>
      <remarks>Field bits used to indicate fields that have been set in a directory, and to
            reference fields when manipulating a directory.</remarks>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FieldBit.Ignore">
      <summary>
            This value is used to signify tags that are to be processed
            but otherwise ignored.<br />
            This permits antiquated tags to be quietly read and discarded. Note that
            a bit <b>is</b> allocated for ignored tags; this is understood by the
            directory reading logic which uses this fact to avoid special-case handling.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FieldBit.Pseudo">
      <summary>
            This value is used to signify pseudo-tags.<br />
            Pseudo-tags don't normally need field bits since they are not
            written to an output file (by definition). The library also has
            express logic to always query a codec for a pseudo-tag so allocating
            a field bit for one is a waste. If codec wants to promote the notion
            of a pseudo-tag being <i>set</i> or <i>unset</i> then it can do using
            internal state flags without polluting the field bit space defined
            for real tags.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FieldBit.Custom">
      <summary>
            This value is used to signify custom tags.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FieldBit.Codec">
      <summary>
            This value is used as a base (starting) value for codec-private tags.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.FieldBit.Last">
      <summary>
            Last usable value for field bit. All tags values should be less than this value.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.FieldValue">
      <summary>
            Holds a value of a Tiff tag.
            </summary>
      <remarks>
        <para>Simply put, it is a wrapper around System.Object, that helps to deal with
            unboxing and conversion of types a bit easier.
            </para>
        <para>
            Please take a look at:
            http://blogs.msdn.com/ericlippert/archive/2009/03/19/representation-and-identity.aspx
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToByte">
      <summary>
            Retrieves value converted to byte.
            </summary>
      <returns>The value converted to byte.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToShort">
      <summary>
            Retrieves value converted to short.
            </summary>
      <returns>The value converted to short.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToUShort">
      <summary>
            Retrieves value converted to ushort.
            </summary>
      <returns>The value converted to ushort.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToInt">
      <summary>
            Retrieves value converted to int.
            </summary>
      <returns>The value converted to int.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToUInt">
      <summary>
            Retrieves value converted to uint.
            </summary>
      <returns>The value converted to uint.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToFloat">
      <summary>
            Retrieves value converted to float.
            </summary>
      <returns>The value converted to float.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToDouble">
      <summary>
            Retrieves value converted to double.
            </summary>
      <returns>The value converted to double.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToString">
      <summary>
            Retrieves value converted to string.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.        
            </returns>
      <remarks>If value is a byte array, then it gets converted to string using
            Latin1 encoding encoder.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.GetBytes">
      <summary>
            Retrieves value converted to byte array.
            </summary>
      <returns>Value converted to byte array.</returns>
      <remarks>
        <para>If value is byte array then it retrieved unaltered.</para>
        <para>If value is array of short, ushort, int, uint, float or double values then this
            array is converted to byte array</para>
        <para>
            If value is a string then it gets converted to byte array using Latin1 encoding
            encoder.</para>
        <para>
            If value is of any other type then <c>null</c> is returned.</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToByteArray">
      <summary>
            Retrieves value converted to array of bytes.
            </summary>
      <returns>Value converted to array of bytes.</returns>
      <remarks>
        <para>If value is array of bytes then it retrieved unaltered.</para>
        <para>If value is array of short, ushort, int or uint values then each element of
            field value gets converted to byte and added to resulting array.</para>
        <para>If value is string then it gets converted to byte[] using Latin1 encoding
            encoder.</para>
        <para>
            If value is of any other type then null is returned.</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToShortArray">
      <summary>
            Retrieves value converted to array of short values.
            </summary>
      <returns>Value converted to array of short values.</returns>
      <remarks>
        <para>If value is array of short values then it retrieved unaltered.</para>
        <para>If value is array of bytes then each pair of bytes is converted to short and
            added to resulting array. If value contains odd amount of bytes, then null is
            returned.</para>
        <para>
            If value is array of ushort, int or uint values then each element of field value gets
            converted to short and added to resulting array.</para>
        <para>
            If value is of any other type then null is returned.</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToUShortArray">
      <summary>
            Retrieves value converted to array of ushort values.
            </summary>
      <returns>Value converted to array of ushort values.</returns>
      <remarks>
        <para>If value is array of ushort values then it retrieved unaltered.</para>
        <para>If value is array of bytes then each pair of bytes is converted to ushort and
            added to resulting array. If value contains odd amount of bytes, then null is
            returned.</para>
        <para>
            If value is array of short, int or uint values then each element of field value gets
            converted to ushort and added to resulting array.</para>
        <para>
            If value is of any other type then null is returned.</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToIntArray">
      <summary>
            Retrieves value converted to array of int values.
            </summary>
      <returns>Value converted to array of int values.</returns>
      <remarks>
        <para>If value is array of int values then it retrieved unaltered.</para>
        <para>If value is array of bytes then each 4 bytes are converted to int and added to
            resulting array. If value contains amount of bytes that can't be divided by 4 without
            remainder, then null is returned.</para>
        <para>If value is array of short, ushort or uint values then each element of
            field value gets converted to int and added to resulting array.</para>
        <para>
            If value is of any other type then null is returned.</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToUIntArray">
      <summary>
            Retrieves value converted to array of uint values.
            </summary>
      <returns>Value converted to array of uint values.</returns>
      <remarks>
        <para>If value is array of uint values then it retrieved unaltered.</para>
        <para>If value is array of bytes then each 4 bytes are converted to uint and added to
            resulting array. If value contains amount of bytes that can't be divided by 4 without
            remainder, then null is returned.</para>
        <para>If value is array of short, ushort or int values then each element of
            field value gets converted to uint and added to resulting array.</para>
        <para>
            If value is of any other type then null is returned.</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToFloatArray">
      <summary>
            Retrieves value converted to array of float values.
            </summary>
      <returns>Value converted to array of float values.</returns>
      <remarks>
        <para>If value is array of float values then it retrieved unaltered.</para>
        <para>If value is array of bytes then each 4 bytes are converted to float and added to
            resulting array. If value contains amount of bytes that can't be divided by 4 without
            remainder, then null is returned.</para>
        <para>If value is array of double values then each element of field value gets
            converted to float and added to resulting array.</para>
        <para>
            If value is of any other type then null is returned.</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.FieldValue.ToDoubleArray">
      <summary>
            Retrieves value converted to array of double values.
            </summary>
      <returns>Value converted to array of double values.</returns>
      <remarks>
        <para>If value is array of double values then it retrieved unaltered.</para>
        <para>If value is array of bytes then each 8 bytes are converted to double and added to
            resulting array. If value contains amount of bytes that can't be divided by 8 without
            remainder, then null is returned.</para>
        <para>If value is array of float values then each element of field value gets
            converted to double and added to resulting array.</para>
        <para>
            If value is of any other type then null is returned.</para>
      </remarks>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.FieldValue.Value">
      <summary>
            Gets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.TiffCodec">
      <summary>
            Base class for all codecs within the library.
            </summary>
      <remarks>
        <para>
            A codec is a class that implements decoding, encoding, or decoding and encoding of a
            compression algorithm.
            </para>
        <para>
            The library provides a collection of builtin codecs. More codecs may be registered
            through calls to the library and/or the builtin implementations may be overridden.
            </para>
      </remarks>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffCodec.m_tif">
      <summary>
            An instance of <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffCodec.m_scheme">
      <summary>
            Compression scheme this codec impelements.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffCodec.m_name">
      <summary>
            Codec name.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.#ctor(BitMiracle.LibTiff.Classic.Tiff,BitMiracle.LibTiff.Classic.Compression,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.LibTiff.Classic.TiffCodec" /> class.
            </summary>
      <param name="tif">An instance of <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class.</param>
      <param name="scheme">The compression scheme for the codec.</param>
      <param name="name">The name of the codec.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.Init">
      <summary>
            Initializes this instance.
            </summary>
      <returns>
        <c>true</c> if initialized successfully</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.SetupDecode">
      <summary>
            Setups the decoder part of the codec.
            </summary>
      <returns>
        <c>true</c> if this codec successfully setup its decoder part and can decode data;
            otherwise, <c>false</c>.
            </returns>
      <remarks>
        <b>SetupDecode</b> is called once before
            <see cref="M:BitMiracle.LibTiff.Classic.TiffCodec.PreDecode(System.Int16)" />.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.PreDecode(System.Int16)">
      <summary>
            Prepares the decoder part of the codec for a decoding.
            </summary>
      <param name="plane">The zero-based sample plane index.</param>
      <returns>
        <c>true</c> if this codec successfully prepared its decoder part and ready
            to decode data; otherwise, <c>false</c>.</returns>
      <remarks>
        <b>PreDecode</b> is called after <see cref="M:BitMiracle.LibTiff.Classic.TiffCodec.SetupDecode" /> and before decoding.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.DecodeRow(System.Byte[],System.Int32,System.Int32,System.Int16)">
      <summary>
            Decodes one row of image data.
            </summary>
      <param name="buffer">The buffer to place decoded image data to.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at
            which to begin storing decoded bytes.</param>
      <param name="count">The number of decoded bytes that should be placed
            to <paramref name="buffer" />.</param>
      <param name="plane">The zero-based sample plane index.</param>
      <returns>
        <c>true</c> if image data was decoded successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.DecodeStrip(System.Byte[],System.Int32,System.Int32,System.Int16)">
      <summary>
            Decodes one strip of image data.
            </summary>
      <param name="buffer">The buffer to place decoded image data to.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at
            which to begin storing decoded bytes.</param>
      <param name="count">The number of decoded bytes that should be placed
            to <paramref name="buffer" />.</param>
      <param name="plane">The zero-based sample plane index.</param>
      <returns>
        <c>true</c> if image data was decoded successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.DecodeTile(System.Byte[],System.Int32,System.Int32,System.Int16)">
      <summary>
            Decodes one tile of image data.
            </summary>
      <param name="buffer">The buffer to place decoded image data to.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at
            which to begin storing decoded bytes.</param>
      <param name="count">The number of decoded bytes that should be placed
            to <paramref name="buffer" />.</param>
      <param name="plane">The zero-based sample plane index.</param>
      <returns>
        <c>true</c> if image data was decoded successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.SetupEncode">
      <summary>
            Setups the encoder part of the codec.
            </summary>
      <returns>
        <c>true</c> if this codec successfully setup its encoder part and can encode data;
            otherwise, <c>false</c>.
            </returns>
      <remarks>
        <b>SetupEncode</b> is called once before
            <see cref="M:BitMiracle.LibTiff.Classic.TiffCodec.PreEncode(System.Int16)" />.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.PreEncode(System.Int16)">
      <summary>
            Prepares the encoder part of the codec for a encoding.
            </summary>
      <param name="plane">The zero-based sample plane index.</param>
      <returns>
        <c>true</c> if this codec successfully prepared its encoder part and ready
            to encode data; otherwise, <c>false</c>.</returns>
      <remarks>
        <b>PreEncode</b> is called after <see cref="M:BitMiracle.LibTiff.Classic.TiffCodec.SetupEncode" /> and before encoding.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.PostEncode">
      <summary>
            Performs any actions after encoding required by the codec.
            </summary>
      <returns>
        <c>true</c> if all post-encode actions succeeded; otherwise, <c>false</c></returns>
      <remarks>
        <b>PostEncode</b> is called after encoding and can be used to release any external 
            resources needed during encoding.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.EncodeRow(System.Byte[],System.Int32,System.Int32,System.Int16)">
      <summary>
            Encodes one row of image data.
            </summary>
      <param name="buffer">The buffer with image data to be encoded.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at
            which to begin read image data.</param>
      <param name="count">The maximum number of encoded bytes that can be placed
            to <paramref name="buffer" />.</param>
      <param name="plane">The zero-based sample plane index.</param>
      <returns>
        <c>true</c> if image data was encoded successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.EncodeStrip(System.Byte[],System.Int32,System.Int32,System.Int16)">
      <summary>
            Encodes one strip of image data.
            </summary>
      <param name="buffer">The buffer with image data to be encoded.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at
            which to begin read image data.</param>
      <param name="count">The maximum number of encoded bytes that can be placed
            to <paramref name="buffer" />.</param>
      <param name="plane">The zero-based sample plane index.</param>
      <returns>
        <c>true</c> if image data was encoded successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.EncodeTile(System.Byte[],System.Int32,System.Int32,System.Int16)">
      <summary>
            Encodes one tile of image data.
            </summary>
      <param name="buffer">The buffer with image data to be encoded.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at
            which to begin read image data.</param>
      <param name="count">The maximum number of encoded bytes that can be placed
            to <paramref name="buffer" />.</param>
      <param name="plane">The zero-based sample plane index.</param>
      <returns>
        <c>true</c> if image data was encoded successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.Close">
      <summary>
            Flushes any internal data buffers and terminates current operation.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.Seek(System.Int32)">
      <summary>
            Seeks the specified row in the strip being processed.
            </summary>
      <param name="row">The row to seek.</param>
      <returns>
        <c>true</c> if specified row was successfully found; otherwise, <c>false</c></returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.Cleanup">
      <summary>
            Cleanups the state of the codec.
            </summary>
      <remarks>
        <b>Cleanup</b> is called when codec is no longer needed (won't be used) and can be
            used for example to restore tag methods that were substituted.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.DefStripSize(System.Int32)">
      <summary>
            Calculates and/or constrains a strip size.
            </summary>
      <param name="size">The proposed strip size (may be zero or negative).</param>
      <returns>A strip size to use.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffCodec.DefTileSize(System.Int32@,System.Int32@)">
      <summary>
            Calculate and/or constrains a tile size
            </summary>
      <param name="width">The proposed tile width upon the call / tile width to use after the call.</param>
      <param name="height">The proposed tile height upon the call / tile height to use after the call.</param>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffCodec.CanEncode">
      <summary>
            Gets a value indicating whether this codec can encode data.
            </summary>
      <value>
        <c>true</c> if this codec can encode data; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffCodec.CanDecode">
      <summary>
            Gets a value indicating whether this codec can decode data.
            </summary>
      <value>
        <c>true</c> if this codec can decode data; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.TiffTagMethods">
      <summary>
            Tiff tag methods.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTagMethods.DATATYPE_VOID">
      <summary>
            untyped data
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTagMethods.DATATYPE_INT">
      <summary>
            signed integer data
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTagMethods.DATATYPE_UINT">
      <summary>
            unsigned integer data
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffTagMethods.DATATYPE_IEEEFP">
      <summary>
            IEEE floating point data
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffTagMethods.SetField(BitMiracle.LibTiff.Classic.Tiff,BitMiracle.LibTiff.Classic.TiffTag,BitMiracle.LibTiff.Classic.FieldValue[])">
      <summary>
            Sets the value(s) of a tag in a TIFF file/stream open for writing.
            </summary>
      <param name="tif">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class.</param>
      <param name="tag">The tag.</param>
      <param name="value">The tag value(s).</param>
      <returns>
        <c>true</c> if tag value(s) were set successfully; otherwise, <c>false</c>.
            </returns>
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.SetField(BitMiracle.LibTiff.Classic.TiffTag,System.Object[])" />
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffTagMethods.GetField(BitMiracle.LibTiff.Classic.Tiff,BitMiracle.LibTiff.Classic.TiffTag)">
      <summary>
            Gets the value(s) of a tag in an open TIFF file.
            </summary>
      <param name="tif">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class.</param>
      <param name="tag">The tag.</param>
      <returns>The value(s) of a tag in an open TIFF file/stream as array of
            <see cref="T:BitMiracle.LibTiff.Classic.FieldValue" /> objects or <c>null</c> if there is no such tag set.</returns>
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.GetField(BitMiracle.LibTiff.Classic.TiffTag)" />
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffTagMethods.PrintDir(BitMiracle.LibTiff.Classic.Tiff,System.IO.Stream,BitMiracle.LibTiff.Classic.TiffPrintFlags)">
      <summary>
            Prints formatted description of the contents of the current directory to the
            specified stream using specified print (formatting) options.
            </summary>
      <param name="tif">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class.</param>
      <param name="stream">The stream to print to.</param>
      <param name="flags">The print (formatting) options.</param>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.Tiff">
      <summary>
            Tag Image File Format (TIFF)
            </summary>
      <remarks>
            Based on Rev 6.0 from
            <see href="http://partners.adobe.com/asn/developer/PDFS/TN/TIFF6.pdf" target="_blank" /></remarks>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.STRIPCHOP_DEFAULT">
      <summary>
            Support strip chopping (whether or not to convert single-strip 
            uncompressed images to mutiple strips of ~8Kb to reduce memory usage)
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.DEFAULT_EXTRASAMPLE_AS_ALPHA">
      <summary>
            Treat extra sample as alpha (default enabled). The RGBA interface 
            will treat a fourth sample with no EXTRASAMPLE_ value as being 
            ASSOCALPHA. Many packages produce RGBA files but don't mark the 
            alpha properly.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.CHECK_JPEG_YCBCR_SUBSAMPLING">
      <summary>
            Pick up YCbCr subsampling info from the JPEG data stream to support 
            files lacking the tag (default enabled).
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.NOSTRIP">
      <summary>
            undefined state
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.NOTILE">
      <summary>
            undefined state
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_extender">
      <summary>
            Client Tag extension support (from Niles Ritter).
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.setupBuiltInCodecs">
      <summary>
            Compression schemes statically built into the library.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.tiffFieldInfo">
      <summary>
            NB:   THIS ARRAY IS ASSUMED TO BE SORTED BY TAG.
                  If a tag can have both LONG and SHORT types then the LONG must
                  be placed before the SHORT for writing to work properly.
                  
            NOTE: The second field (field_readcount) and third field
                  (field_writecount) sometimes use the values
                  TiffFieldInfo.Variable (-1), TiffFieldInfo.Variable2 (-3)
                  and TiffFieldInfo.Spp (-2). These values should be used but
                  would throw off the formatting of the code, so please
                  interpret the -1, -2 and -3  values accordingly.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.checkDirOffset(System.UInt32)">
      <summary>
            Checks the directory offset against the list of already seen directory
            offsets.
            </summary>
      <remarks> This is a trick to prevent IFD looping. The one can
            create TIFF file with looped directory pointers. We will maintain a
            list of already seen directories and check every IFD offset against
            that list.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.chopUpSingleUncompressedStrip">
      <summary>
            Replace a single strip (tile) of uncompressed data with multiple
            strips (tiles), each approximately 8Kbytes.
            </summary>
      <remarks>This is useful for dealing with large images or for
            dealing with machines with a limited amount of memory.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.writeDirectory(System.Boolean)">
      <summary>
            Writes the contents of the current directory to the specified file.
            </summary>
      <remarks>This routine doesn't handle overwriting a directory with
            auxiliary storage that's been changed.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.linkDirectory">
      <summary>
            Link the current directory into the directory chain for the file.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_name">
      <summary>
            name of open file
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_mode">
      <summary>
            open mode (O_*)
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_diroff">
      <summary>
            file offset of current directory
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_dir">
      <summary>
            internal rep of current directory
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_row">
      <summary>
            current scanline
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_curstrip">
      <summary>
            current strip for read/write
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_curtile">
      <summary>
            current tile for read/write
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_tilesize">
      <summary>
            # of bytes in a tile
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_scanlinesize">
      <summary>
            # of bytes in a scanline
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_rawdata">
      <summary>
            raw data buffer
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_rawdatasize">
      <summary>
            # of bytes in raw data buffer
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_rawcp">
      <summary>
            current spot in raw buffer
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_rawcc">
      <summary>
            bytes unread from raw buffer
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_clientdata">
      <summary>
            callback parameter
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_postDecodeMethod">
      <summary>
            post decoding method type
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_tagmethods">
      <summary>
            tag get/set/print routines
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_nextdiroff">
      <summary>
            file offset of following directory
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_dirlist">
      <summary>
            list of offsets to already seen directories to prevent IFD looping
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_dirlistsize">
      <summary>
            number of entires in offset list
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_dirnumber">
      <summary>
            number of already seen directories
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_header">
      <summary>
            file's header block
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_typeshift">
      <summary>
            data type shift counts
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_typemask">
      <summary>
            data type masks
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_curdir">
      <summary>
            current directory (index)
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_curoff">
      <summary>
            current offset for read/write
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_dataoff">
      <summary>
            current offset for writing dir
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_nsubifd">
      <summary>
            remaining subifds to write
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_subifdoff">
      <summary>
            offset for patching SubIFD link
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_col">
      <summary>
            current column (offset by row too)
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_fieldinfo">
      <summary>
            sorted table of registered tags
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_nfields">
      <summary>
            # entries in registered tag table
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_foundfield">
      <summary>
            cached pointer to already found tag
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_clientinfo">
      <summary>
            extra client information.
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.Tiff.m_stream">
      <summary>
            stream used for read|write|etc.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteCustomDirectory(System.Int64@)">
      <summary>
            Writes custom directory. See ticket #51.
            </summary>
      <param name="pdiroff">Output directory offset.</param>
      <returns>
        <c>true</c> if succeeded; otherwise, <c>false</c></returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.postDecode(System.Byte[],System.Int32,System.Int32)">
      <summary>
            post decoding routine
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.startStrip(System.Int32)">
      <summary>
            Set state to appear as if a strip has just been read in.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.fillStrip(System.Int32)">
      <summary>
            Read the specified strip and setup for decoding.
            The data buffer is expanded, as necessary, to hold the strip's data.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.fillTile(System.Int32)">
      <summary>
            Read the specified tile and setup for decoding. 
            The data buffer is expanded, as necessary, to hold the tile's data.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.appendToStrip(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Appends the data to the specified strip.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetVersion">
      <summary>
            Gets the library version string.
            </summary>
      <returns>The library version string.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetR(System.Int32)">
      <summary>
            Gets the R component from ABGR value returned by 
            <see cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage">ReadRGBAImage</see>.
            </summary>
      <param name="abgr">The ABGR value.</param>
      <returns>The R component from ABGR value.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetG(System.Int32)">
      <summary>
            Gets the G component from ABGR value returned by 
            <see cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage">ReadRGBAImage</see>.
            </summary>
      <param name="abgr">The ABGR value.</param>
      <returns>The G component from ABGR value.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetB(System.Int32)">
      <summary>
            Gets the B component from ABGR value returned by 
            <see cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage">ReadRGBAImage</see>.
            </summary>
      <param name="abgr">The ABGR value.</param>
      <returns>The B component from ABGR value.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetA(System.Int32)">
      <summary>
            Gets the A component from ABGR value returned by 
            <see cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage">ReadRGBAImage</see>.
            </summary>
      <param name="abgr">The ABGR value.</param>
      <returns>The A component from ABGR value.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.FindCodec(BitMiracle.LibTiff.Classic.Compression)">
      <summary>
            Retrieves the codec registered for the specified compression scheme.
            </summary>
      <param name="scheme">The compression scheme.</param>
      <returns>The codec registered for the specified compression scheme or <c>null</c>
            if there is no codec registered for the given scheme.</returns>
      <remarks>
        <para>
            LibTiff.Net supports a variety of compression schemes implemented by software codecs.
            Each codec adheres to a modular interface that provides for the decoding and encoding
            of image data; as well as some other methods for initialization, setup, cleanup, and
            the control of default strip and tile sizes. Codecs are identified by the associated
            value of the <see cref="T:BitMiracle.LibTiff.Classic.TiffTag" />.COMPRESSION tag.
            </para>
        <para>
            Other compression schemes may be registered. Registered schemes can also override the
            built-in versions provided by the library.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.RegisterCodec(BitMiracle.LibTiff.Classic.TiffCodec)">
      <summary>
            Adds specified codec to a list of registered codec.
            </summary>
      <param name="codec">The codec to register.</param>
      <remarks>
            This method can be used to augment or override the set of codecs available to an
            application. If the <paramref name="codec" /> is for a scheme that already has a
            registered codec then it is overridden and any images with data encoded with this
            compression scheme will be decoded using the supplied codec.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.UnRegisterCodec(BitMiracle.LibTiff.Classic.TiffCodec)">
      <summary>
            Removes specified codec from a list of registered codecs.
            </summary>
      <param name="codec">The codec to remove from a list of registered codecs.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.IsCodecConfigured(BitMiracle.LibTiff.Classic.Compression)">
      <summary>
            Checks whether library has working codec for the specific compression scheme.
            </summary>
      <param name="scheme">The scheme to check.</param>
      <returns>
        <c>true</c> if the codec is configured and working; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetConfiguredCodecs">
      <summary>
            Retrieves an array of configured codecs, both built-in and registered by user.
            </summary>
      <returns>An array of configured codecs.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.Realloc(System.Byte[],System.Int32)">
      <summary>
            Allocates new byte array of specified size and copies data from the existing to
            the new array.
            </summary>
      <param name="array">The existing array.</param>
      <param name="size">The number of elements in new array.</param>
      <returns>
            The new byte array of specified size with data from the existing array.
            </returns>
      <overloads>Allocates new array of specified size and copies data from the existing to
            the new array.</overloads>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.Realloc(System.Int32[],System.Int32)">
      <summary>
            Allocates new integer array of specified size and copies data from the existing to
            the new array.
            </summary>
      <param name="array">The existing array.</param>
      <param name="size">The number of elements in new array.</param>
      <returns>
            The new integer array of specified size with data from the existing array.
            </returns>
      <remarks>Size of the array is in elements, not bytes.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.Compare(System.Int16[],System.Int16[],System.Int32)">
      <summary>
            Compares specified number of elements in two arrays.
            </summary>
      <param name="first">The first array to compare.</param>
      <param name="second">The second array to compare.</param>
      <param name="elementCount">The number of elements to compare.</param>
      <returns>
            The difference between compared elements or 0 if all elements are equal.
            </returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.Open(System.String,System.String)">
      <summary>
            Initializes new instance of <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class and opens a TIFF file for
            reading or writing.
            </summary>
      <param name="fileName">The name of the file to open.</param>
      <param name="mode">The open mode. Specifies if the file is to be opened for
            reading ("r"), writing ("w"), or appending ("a") and, optionally, whether to override
            certain default aspects of library operation (see remarks).</param>
      <returns>The new instance of <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class if specified file is
            successfully opened; otherwise, <c>null</c>.</returns>
      <remarks>
        <para>
          <see cref="M:BitMiracle.LibTiff.Classic.Tiff.Open(System.String,System.String)" /> opens a TIFF file whose name is <paramref name="fileName" />. When
            a file is opened for appending, existing data will not be touched; instead new data
            will be written as additional subfiles. If an existing file is opened for writing,
            all previous data is overwritten.
            </para>
        <para>
            If a file is opened for reading, the first TIFF directory in the file is automatically
            read (see <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetDirectory(System.Int16)" /> for reading directories other than the first). If
            a file is opened for writing or appending, a default directory is automatically
            created for writing subsequent data. This directory has all the default values
            specified in TIFF Revision 6.0: BitsPerSample = 1, ThreshHolding = Threshold.BILEVEL
            (bilevel art scan), FillOrder = MSB2LSB (most significant bit of each data byte is
            filled first), Orientation = TOPLEFT (the 0th row represents the visual top of the
            image, and the 0th column represents the visual left hand side), SamplesPerPixel = 1,
            RowsPerStrip = infinity, ResolutionUnit = INCH, and Compression = NONE. To alter
            these values, or to define values for additional fields, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetField(BitMiracle.LibTiff.Classic.TiffTag,System.Object[])" /> must
            be used.
            </para>
        <para>
            The <paramref name="mode" /> parameter can include the following flags in addition to
            the "r", "w", and "a" flags. Note however that option flags must follow the
            read-write-append specification.
            </para>
        <list type="table">
          <listheader>
            <term>Flag</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>l</term>
            <description>When creating a new file force information be written with Little-Endian
            byte order (but see below).</description>
          </item>
          <item>
            <term>b</term>
            <description>When creating a new file force information be written with Big-Endian
            byte order (but see below).</description>
          </item>
          <item>
            <term>L</term>
            <description>Force image data that is read or written to be treated with bits filled
            from Least Significant Bit (LSB) to Most Significant Bit (MSB). Note that this is the
            opposite to the way the library has worked from its inception.</description>
          </item>
          <item>
            <term>B</term>
            <description>Force image data that is read or written to be treated with bits filled
            from Most Significant Bit (MSB) to Least Significant Bit (LSB); this is the
            default.</description>
          </item>
          <item>
            <term>H</term>
            <description>Force image data that is read or written to be treated with bits filled
            in the same order as the native CPU.</description>
          </item>
          <item>
            <term>C</term>
            <description>Enable the use of "strip chopping" when reading images that are comprised
            of a single strip or tile of uncompressed data. Strip chopping is a mechanism by which
            the library will automatically convert the single-strip image to multiple strips, each
            of which has about 8 Kilobytes of data. This facility can be useful in reducing the
            amount of memory used to read an image because the library normally reads each strip
            in its entirety. Strip chopping does however alter the apparent contents of the image
            because when an image is divided into multiple strips it looks as though the
            underlying file contains multiple separate strips. The default behaviour is to enable 
            strip chopping.</description>
          </item>
          <item>
            <term>c</term>
            <description>Disable the use of strip chopping when reading images.</description>
          </item>
          <item>
            <term>h</term>
            <description>Read TIFF header only, do not load the first image directory. That could
            be useful in case of the broken first directory. We can open the file and proceed to
            the other directories.</description>
          </item>
        </list>
        <para>
            By default the library will create new files with the native byte-order of the CPU on
            which the application is run. This ensures optimal performance and is portable to any
            application that conforms to the TIFF specification. To force the library to use a
            specific byte-order when creating a new file the "b" and "l" option flags may be
            included in the <paramref name="mode" /> parameter; for example, "wb" or "wl".</para>
        <para>The use of the "l" and "b" flags is strongly discouraged. These flags are
            provided solely because numerous vendors do not correctly support TIFF; they only
            support one of the two byte orders. It is strongly recommended that you not use this
            feature except to deal with busted apps that write invalid TIFF.</para>
        <para>The "L", "B", and "H" flags are intended for applications that can optimize
            operations on data by using a particular bit order.  By default the library returns
            data in MSB2LSB bit order. Returning data in the bit order of the native CPU makes the
            most sense but also requires applications to check the value of the
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.FILLORDER" /> tag; something they probably do not do right now.</para>
        <para>The "c" option permits applications that only want to look at the tags, for
            example, to get the unadulterated TIFF tag information.</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ClientOpen(System.String,System.String,System.Object,BitMiracle.LibTiff.Classic.TiffStream)">
      <summary>
            Initializes new instance of <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class and opens a stream with TIFF data
            for reading or writing.
            </summary>
      <param name="name">The name for the new instance of <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class.</param>
      <param name="mode">The open mode. Specifies if the file is to be opened for
            reading ("r"), writing ("w"), or appending ("a") and, optionally, whether to override
            certain default aspects of library operation (see remarks for <see cref="M:BitMiracle.LibTiff.Classic.Tiff.Open(System.String,System.String)" />
            method for the list of the mode flags).</param>
      <param name="clientData">Some client data. This data is passed as parameter to every
            method of the <see cref="T:BitMiracle.LibTiff.Classic.TiffStream" /> object specified by the
            <paramref name="stream" /> parameter.</param>
      <param name="stream">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.TiffStream" /> class to use for
            reading, writing and seeking of TIFF data.</param>
      <returns>The new instance of <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class if stream is successfully
            opened; otherwise, <c>null</c>.</returns>
      <remarks>
        <para>
            This method can be used to read TIFF data from sources other than file. When custom
            stream class derived from <see cref="T:BitMiracle.LibTiff.Classic.TiffStream" /> is used it is possible to read (or
            write) TIFF data that reside in memory, database, etc.
            </para>
        <para>Please note, that <paramref name="name" /> is an arbitrary string used as
            ID for the created <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />. It's not required to be a file name or anything
            meaningful at all.</para>
        <para>
            Please read remarks for <see cref="M:BitMiracle.LibTiff.Classic.Tiff.Open(System.String,System.String)" /> method for the list of option flags that
            can be specified in <paramref name="mode" /> parameter.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.Close">
      <summary>
            Closes a previously opened TIFF file.
            </summary>
      <remarks>
            This method closes a file or stream that was previously opened with <see cref="M:BitMiracle.LibTiff.Classic.Tiff.Open(System.String,System.String)" />
            or <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ClientOpen(System.String,System.String,System.Object,BitMiracle.LibTiff.Classic.TiffStream)" />.
            Any buffered data are flushed to the file/stream,
            including the contents of the current directory (if modified); and all resources
            are reclaimed.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.Dispose">
      <summary>
            Frees and releases all resources allocated by this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetTagListCount">
      <summary>
            Gets the number of elements in the custom tag list.
            </summary>
      <returns>The number of elements in the custom tag list.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetTagListEntry(System.Int32)">
      <summary>
            Retrieves the custom tag with specified index.
            </summary>
      <param name="index">The zero-based index of a custom tag to retrieve.</param>
      <returns>The custom tag with specified index.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.MergeFieldInfo(BitMiracle.LibTiff.Classic.TiffFieldInfo[],System.Int32)">
      <summary>
            Merges given field information to existing one.
            </summary>
      <param name="info">The array of <see cref="T:BitMiracle.LibTiff.Classic.TiffFieldInfo" /> objects.</param>
      <param name="count">The number of items to use from the <paramref name="info" /> array.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.FindFieldInfo(BitMiracle.LibTiff.Classic.TiffTag,BitMiracle.LibTiff.Classic.TiffType)">
      <summary>
            Retrieves field information for the specified tag.
            </summary>
      <param name="tag">The tag to retrieve field information for.</param>
      <param name="type">The tiff data type to use us additional filter.</param>
      <returns>The field information for specified tag with specified type or <c>null</c> if
            the field information wasn't found.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.FindFieldInfoByName(System.String,BitMiracle.LibTiff.Classic.TiffType)">
      <summary>
            Retrieves field information for the tag with specified name.
            </summary>
      <param name="name">The name of the tag to retrieve field information for.</param>
      <param name="type">The tiff data type to use us additional filter.</param>
      <returns>The field information for specified tag with specified type or <c>null</c> if
            the field information wasn't found.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.FieldWithTag(BitMiracle.LibTiff.Classic.TiffTag)">
      <summary>
            Retrieves field information for the specified tag.
            </summary>
      <param name="tag">The tag to retrieve field information for.</param>
      <returns>The field information for specified tag or <c>null</c> if
            the field information wasn't found.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.FieldWithName(System.String)">
      <summary>
            Retrieves field information for the tag with specified name.
            </summary>
      <param name="name">The name of the tag to retrieve field information for.</param>
      <returns>The field information for specified tag or <c>null</c> if
            the field information wasn't found.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetTagMethods">
      <summary>
            Gets the currently used tag methods.
            </summary>
      <returns>The currently used tag methods.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SetTagMethods(BitMiracle.LibTiff.Classic.TiffTagMethods)">
      <summary>
            Sets the new tag methods to use.
            </summary>
      <param name="methods">Tag methods.</param>
      <returns>The previously used tag methods.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetClientInfo(System.String)">
      <summary>
            Gets the extra information with specified name associated with this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />.
            </summary>
      <param name="name">Name of the extra information to retrieve.</param>
      <returns>The extra information with specified name associated with
            this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> or <c>null</c> if extra information with specified
            name was not found.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SetClientInfo(System.Object,System.String)">
      <summary>
            Associates extra information with this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />.
            </summary>
      <param name="data">The information to associate with this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />.</param>
      <param name="name">The name (label) of the information.</param>
      <remarks>If there is already an extra information with the name specified by
            <paramref name="name" /> it will be replaced by the information specified by
            <paramref name="data" />.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.Flush">
      <summary>
            Flushes pending writes to an open TIFF file.
            </summary>
      <returns>
        <c>true</c> if succeeded; otherwise, <c>false</c></returns>
      <remarks>
        <see cref="M:BitMiracle.LibTiff.Classic.Tiff.Flush" /> causes any pending writes for the specified file
            (including writes for the current directory) to be done. In normal operation this call
            is never needed − the library automatically does any flushing required.
            </remarks>
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.FlushData" />
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.FlushData">
      <summary>
            Flushes any pending image data for the specified file to be written out.
            </summary>
      <returns>
        <c>true</c> if succeeded; otherwise, <c>false</c></returns>
      <remarks>
        <see cref="M:BitMiracle.LibTiff.Classic.Tiff.FlushData" /> flushes any pending image data for the specified file
            to be written out; directory-related data are not flushed. In normal operation this
            call is never needed − the library automatically does any flushing required.
            </remarks>
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.Flush" />
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetField(BitMiracle.LibTiff.Classic.TiffTag)">
      <summary>
            Gets the value(s) of a tag in an open TIFF file.
            </summary>
      <param name="tag">The tag.</param>
      <returns>The value(s) of a tag in an open TIFF file as array of
            <see cref="T:BitMiracle.LibTiff.Classic.FieldValue" /> objects or <c>null</c> if there is no such tag set.</returns>
      <remarks>
        <para>
          <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetField(BitMiracle.LibTiff.Classic.TiffTag)" /> returns the value(s) of a tag or pseudo-tag associated with the
            current directory of the opened TIFF file. The tag is identified by
            <paramref name="tag" />. The type and number of values returned is dependent on the
            tag being requested. You may want to consult
            <a href="54cbd23d-dc55-44b9-921f-3a06efc2f6ce.htm">"Well-known tags and their
            value(s) data types"</a> to become familiar with exact data types and calling
            conventions required for each tag supported by the library.
            </para>
        <para>
            A pseudo-tag is a parameter that is used to control the operation of the library but
            whose value is not read or written to the underlying file.
            </para>
      </remarks>
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.GetFieldDefaulted(BitMiracle.LibTiff.Classic.TiffTag)" />
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetFieldDefaulted(BitMiracle.LibTiff.Classic.TiffTag)">
      <summary>
            Gets the value(s) of a tag in an open TIFF file or default value(s) of a tag if a tag
            is not defined in the current directory and it has a default value(s).
            </summary>
      <param name="tag">The tag.</param>
      <returns>
            The value(s) of a tag in an open TIFF file as array of
            <see cref="T:BitMiracle.LibTiff.Classic.FieldValue" /> objects or <c>null</c> if there is no such tag set and
            tag has no default value.
            </returns>
      <remarks>
        <para>
          <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetFieldDefaulted(BitMiracle.LibTiff.Classic.TiffTag)" /> returns the value(s) of a tag or pseudo-tag associated
            with the current directory of the opened TIFF file or default value(s) of a tag if a
            tag is not defined in the current directory and it has a default value(s). The tag is
            identified by <paramref name="tag" />. The type and number of values returned is
            dependent on the tag being requested. You may want to consult
            <a href="54cbd23d-dc55-44b9-921f-3a06efc2f6ce.htm">"Well-known tags and their
            value(s) data types"</a> to become familiar with exact data types and calling
            conventions required for each tag supported by the library.
            </para>
        <para>
            A pseudo-tag is a parameter that is used to control the operation of the library but
            whose value is not read or written to the underlying file.
            </para>
      </remarks>
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.GetField(BitMiracle.LibTiff.Classic.TiffTag)" />
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadDirectory">
      <summary>
            Reads the contents of the next TIFF directory in an open TIFF file/stream and makes
            it the current directory.
            </summary>
      <returns>
        <c>true</c> if directory was successfully read; otherwise, <c>false</c> if an
            error was encountered, or if there are no more directories to be read.</returns>
      <remarks>
        <para>Directories are read sequentially.</para>
        <para>Applications only need to call <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadDirectory" /> to read multiple
            subfiles in a single TIFF file/stream - the first directory in a file/stream is
            automatically read when <see cref="M:BitMiracle.LibTiff.Classic.Tiff.Open(System.String,System.String)" /> or
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ClientOpen(System.String,System.String,System.Object,BitMiracle.LibTiff.Classic.TiffStream)" /> is called.
            </para>
        <para>
            The images that have a single uncompressed strip or tile of data are automatically
            treated as if they were made up of multiple strips or tiles of approximately 8
            kilobytes each. This operation is done only in-memory; it does not alter the contents
            of the file/stream. However, the construction of the "chopped strips" is visible to
            the application through the number of strips returned by <see cref="M:BitMiracle.LibTiff.Classic.Tiff.NumberOfStrips" />
            or the number of tiles returned by <see cref="M:BitMiracle.LibTiff.Classic.Tiff.NumberOfTiles" />.</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadCustomDirectory(System.Int64,BitMiracle.LibTiff.Classic.TiffFieldInfo[],System.Int32)">
      <summary>
            Reads a custom directory from the arbitrary offset within file/stream.
            </summary>
      <param name="offset">The directory offset.</param>
      <param name="info">The array of <see cref="T:BitMiracle.LibTiff.Classic.TiffFieldInfo" /> objects to merge to
            existing field information.</param>
      <param name="count">The number of items to use from
            the <paramref name="info" /> array.</param>
      <returns>
        <c>true</c> if a custom directory was read successfully;
            otherwise, <c>false</c></returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadEXIFDirectory(System.Int64)">
      <summary>
            Reads an EXIF directory from the given offset within file/stream.
            </summary>
      <param name="offset">The directory offset.</param>
      <returns>
        <c>true</c> if an EXIF directory was read successfully; 
            otherwise, <c>false</c></returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ScanlineSize">
      <summary>
            Calculates the size in bytes of a row of data as it would be returned in a call to
            <see cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadScanline" />, or as it would be
            expected in a call to <see cref="O:BitMiracle.LibTiff.Classic.Tiff.WriteScanline" />.
            </summary>
      <returns>The size in bytes of a row of data.</returns>
      <remarks>
        <b>ScanlineSize</b> calculates size for one sample plane only. Please use
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.RasterScanlineSize" /> if you want to get size in bytes of a complete
            decoded and packed raster scanline.</remarks>
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.RasterScanlineSize" />
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.RasterScanlineSize">
      <summary>
            Calculates the size in bytes of a complete decoded and packed raster scanline.
            </summary>
      <returns>The size in bytes of a complete decoded and packed raster scanline.</returns>
      <remarks>The value returned by <b>RasterScanlineSize</b> may be different from the
            value returned by <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ScanlineSize" /> if data is stored as separate
            planes (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.DefaultStripSize(System.Int32)">
      <summary>
            Computes the number of rows for a reasonable-sized strip according to the current
            settings of the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEWIDTH" />, <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.BITSPERSAMPLE" />
            and <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.SAMPLESPERPIXEL" /> tags and any compression-specific requirements.
            </summary>
      <param name="estimate">The esimated value (may be zero).</param>
      <returns>The number of rows for a reasonable-sized strip according to the current
            tag settings and compression-specific requirements.</returns>
      <remarks>If the <paramref name="estimate" /> parameter is non-zero, then it is taken
            as an estimate of the desired strip size and adjusted according to any
            compression-specific requirements. The value returned by <b>DefaultStripSize</b> is
            typically used to define the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.ROWSPERSTRIP" /> tag. If there is no
            any unusual requirements <b>DefaultStripSize</b> tries to create strips that have
            approximately 8 kilobytes of uncompressed data.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.StripSize">
      <summary>
            Computes the number of bytes in a row-aligned strip.
            </summary>
      <returns>The number of bytes in a row-aligned strip</returns>
      <remarks>
        <para>
          <b>StripSize</b> returns the equivalent size for a strip of data as it would be
            returned in a call to <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadEncodedStrip(System.Int32,System.Byte[],System.Int32,System.Int32)" /> or as it would be expected in a
            call to <see cref="O:BitMiracle.LibTiff.Classic.Tiff.WriteEncodedStrip" />.
            </para>
        <para>
            If the value of the field corresponding to <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.ROWSPERSTRIP" /> is
            larger than the recorded <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" />, then the strip size is
            truncated to reflect the actual space required to hold the strip.</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.VStripSize(System.Int32)">
      <summary>
            Computes the number of bytes in a row-aligned strip with specified number of rows.
            </summary>
      <param name="rowCount">The number of rows in a strip.</param>
      <returns>
            The number of bytes in a row-aligned strip with specified number of rows.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.RawStripSize(System.Int32)">
      <summary>
            Computes the number of bytes in a raw (i.e. not decoded) strip.
            </summary>
      <param name="strip">The zero-based index of a strip.</param>
      <returns>The number of bytes in a raw strip.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ComputeStrip(System.Int32,System.Int16)">
      <summary>
            Computes which strip contains the specified coordinates (row, plane).
            </summary>
      <param name="row">The row.</param>
      <param name="plane">The sample plane.</param>
      <returns>The number of the strip that contains the specified coordinates.</returns>
      <remarks>
            A valid strip number is always returned; out-of-range coordinate values are clamped to
            the bounds of the image. The <paramref name="row" /> parameter is always used in
            calculating a strip. The <paramref name="plane" /> parameter is used only if data are
            organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.NumberOfStrips">
      <summary>
            Retrives the number of strips in the image.
            </summary>
      <returns>The number of strips in the image.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.DefaultTileSize(System.Int32@,System.Int32@)">
      <summary>
            Computes the pixel width and height of a reasonable-sized tile suitable for setting
            up the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.TILEWIDTH" /> and <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.TILELENGTH" /> tags.
            </summary>
      <param name="width">The proposed tile width upon the call / tile width to use
            after the call.</param>
      <param name="height">The proposed tile height upon the call / tile height to use
            after the call.</param>
      <remarks>If the <paramref name="width" /> and <paramref name="height" /> values passed
            in are non-zero, then they are adjusted to reflect any compression-specific
            requirements. The returned width and height are constrained to be a multiple of
            16 pixels to conform with the TIFF specification.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.TileSize">
      <summary>
            Compute the number of bytes in a row-aligned tile.
            </summary>
      <returns>The number of bytes in a row-aligned tile.</returns>
      <remarks>
        <b>TileSize</b> returns the equivalent size for a tile of data as it would be
            returned in a call to <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadTile(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int16)" /> or as it would be expected in a
            call to <see cref="O:BitMiracle.LibTiff.Classic.Tiff.WriteTile" />.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.VTileSize(System.Int32)">
      <summary>
            Computes the number of bytes in a row-aligned tile with specified number of rows.
            </summary>
      <param name="rowCount">The number of rows in a tile.</param>
      <returns>
            The number of bytes in a row-aligned tile with specified number of rows.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.RawTileSize(System.Int32)">
      <summary>
            Computes the number of bytes in a raw (i.e. not decoded) tile.
            </summary>
      <param name="tile">The zero-based index of a tile.</param>
      <returns>The number of bytes in a raw tile.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.TileRowSize">
      <summary>
            Compute the number of bytes in each row of a tile.
            </summary>
      <returns>The number of bytes in each row of a tile.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ComputeTile(System.Int32,System.Int32,System.Int32,System.Int16)">
      <summary>
            Computes which tile contains the specified coordinates (x, y, z, plane).
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
      <param name="z">The z-coordinate.</param>
      <param name="plane">The sample plane.</param>
      <returns>The number of the tile that contains the specified coordinates.</returns>
      <remarks>
            A valid tile number is always returned; out-of-range coordinate values are
            clamped to the bounds of the image. The <paramref name="x" /> and <paramref name="y" />
            parameters are always used in calculating a tile. The <paramref name="z" /> parameter
            is used if the image is deeper than 1 slice (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEDEPTH" /> &gt; 1).
            The <paramref name="plane" /> parameter is used only if data are organized in separate
            planes (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.CheckTile(System.Int32,System.Int32,System.Int32,System.Int16)">
      <summary>
            Checks whether the specified (x, y, z, plane) coordinates are within the bounds of
            the image.
            </summary>
      <param name="x">The x-coordinate.</param>
      <param name="y">The y-coordinate.</param>
      <param name="z">The z-coordinate.</param>
      <param name="plane">The sample plane.</param>
      <returns>
        <c>true</c> if the specified coordinates are within the bounds of the image;
            otherwise, <c>false</c>.</returns>
      <remarks>The <paramref name="x" /> parameter is checked against the value of the
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEWIDTH" /> tag. The <paramref name="y" /> parameter is checked
            against the value of the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> tag. The <paramref name="z" />
            parameter is checked against the value of the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEDEPTH" /> tag
            (if defined). The <paramref name="plane" /> parameter is checked against the value of
            the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.SAMPLESPERPIXEL" /> tag if the data are organized in separate
            planes.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.NumberOfTiles">
      <summary>
            Retrives the number of tiles in the image.
            </summary>
      <returns>The number of tiles in the image.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.Clientdata">
      <summary>
            Returns the custom client data associated with this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />.
            </summary>
      <returns>The custom client data associated with this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SetClientdata(System.Object)">
      <summary>
            Asscociates a custom data with this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />.
            </summary>
      <param name="data">The data to associate.</param>
      <returns>The previously associated data.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetMode">
      <summary>
            Gets the mode with which the underlying file or stream was opened.
            </summary>
      <returns>The mode with which the underlying file or stream was opened.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SetMode(System.Int32)">
      <summary>
            Sets the new mode for the underlying file or stream.
            </summary>
      <param name="mode">The new mode for the underlying file or stream.</param>
      <returns>The previous mode with which the underlying file or stream was opened.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.IsTiled">
      <summary>
            Gets the value indicating whether the image data of this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> has a
            tiled organization.
            </summary>
      <returns>
        <c>true</c> if the image data of this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> has a tiled organization or
            <c>false</c> if the image data of this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> is organized in strips.
            </returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.IsByteSwapped">
      <summary>
            Gets the value indicating whether the image data was in a different byte-order than
            the host computer.
            </summary>
      <returns>
        <c>true</c> if the image data was in a different byte-order than the host
            computer or <c>false</c> if the TIFF file/stream and local host byte-orders are the
            same.</returns>
      <remarks>
        <para>
            Note that <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadTile(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int16)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadEncodedTile(System.Int32,System.Byte[],System.Int32,System.Int32)" />,
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadEncodedStrip(System.Int32,System.Byte[],System.Int32,System.Int32)" /> and
            <see cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadScanline" /> methods already
            normally perform byte swapping to local host order if needed.
            </para>
        <para>
            Also note that <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRawTile(System.Int32,System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRawStrip(System.Int32,System.Byte[],System.Int32,System.Int32)" /> do not
            perform byte swapping to local host order.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.IsUpSampled">
      <summary>
            Gets the value indicating whether the image data returned through the read interface
            methods is being up-sampled.
            </summary>
      <returns>
        <c>true</c> if the data is returned up-sampled; otherwise, <c>false</c>.
            </returns>
      <remarks>The value returned by this method can be useful to applications that want to
            calculate I/O buffer sizes to reflect this usage (though the usual strip and tile size
            routines already do this).</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.IsMSB2LSB">
      <summary>
            Gets the value indicating whether the image data is being returned in MSB-to-LSB
            bit order.
            </summary>
      <returns>
        <c>true</c> if the data is being returned in MSB-to-LSB bit order (i.e with bit 0 as
            the most significant bit); otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.IsBigEndian">
      <summary>
            Gets the value indicating whether given image data was written in big-endian order.
            </summary>
      <returns>
        <c>true</c> if given image data was written in big-endian order; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetStream">
      <summary>
            Gets the tiff stream.
            </summary>
      <returns>The tiff stream.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.CurrentRow">
      <summary>
            Gets the current row that is being read or written.
            </summary>
      <returns>The current row that is being read or written.</returns>
      <remarks>The current row is updated each time a read or write is done.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.CurrentDirectory">
      <summary>
            Gets the zero-based index of the current directory.
            </summary>
      <returns>The zero-based index of the current directory.</returns>
      <remarks>The zero-based index returned by this method is suitable for use with
            the <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetDirectory(System.Int16)" /> method.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.NumberOfDirectories">
      <summary>
            Gets the number of directories in a file.
            </summary>
      <returns>The number of directories in a file.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.CurrentDirOffset">
      <summary>
            Retrieves the file/stream offset of the current directory.
            </summary>
      <returns>The file/stream offset of the current directory.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.CurrentStrip">
      <summary>
            Gets the current strip that is being read or written.
            </summary>
      <returns>The current strip that is being read or written.</returns>
      <remarks>The current strip is updated each time a read or write is done.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.CurrentTile">
      <summary>
            Gets the current tile that is being read or written.
            </summary>
      <returns>The current tile that is being read or written.</returns>
      <remarks>The current tile is updated each time a read or write is done.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadBufferSetup(System.Byte[],System.Int32)">
      <summary>
            Sets up the data buffer used to read raw (encoded) data from a file.
            </summary>
      <param name="buffer">The data buffer.</param>
      <param name="size">The buffer size.</param>
      <remarks>
        <para>
            This method is provided for client-control of the I/O buffers used by the library.
            Applications need never use this method; it's provided only for "intelligent clients"
            that wish to optimize memory usage and/or eliminate potential copy operations that can
            occur when working with images that have data stored without compression.
            </para>
        <para>
            If the <paramref name="buffer" /> is <c>null</c>, then a buffer of appropriate size is
            allocated by the library. Otherwise, the caller must guarantee that the buffer is
            large enough to hold any individual strip of raw data.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteBufferSetup(System.Byte[],System.Int32)">
      <summary>
            Sets up the data buffer used to write raw (encoded) data to a file.
            </summary>
      <param name="buffer">The data buffer.</param>
      <param name="size">The buffer size.</param>
      <remarks>
        <para>
            This method is provided for client-control of the I/O buffers used by the library.
            Applications need never use this method; it's provided only for "intelligent clients"
            that wish to optimize memory usage and/or eliminate potential copy operations that can
            occur when working with images that have data stored without compression.
            </para>
        <para>
            If the <paramref name="size" /> is -1 then the buffer size is selected to hold a
            complete tile or strip, or at least 8 kilobytes, whichever is greater. If the
            <paramref name="buffer" /> is <c>null</c>, then a buffer of appropriate size is
            allocated by the library.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SetupStrips">
      <summary>
            Setups the strips.
            </summary>
      <returns>
        <c>true</c> if setup successfully; otherwise, <c>false</c></returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteCheck(System.Boolean,System.String)">
      <summary>
            Verifies that file/stream is writable and that the directory information is
            setup properly.
            </summary>
      <param name="tiles">If set to <c>true</c> then ability to write tiles will be verified;
            otherwise, ability to write strips will be verified.</param>
      <param name="method">The name of the calling method.</param>
      <returns>
        <c>true</c> if file/stream is writeable and the directory information is
            setup properly; otherwise, <c>false</c></returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.FreeDirectory">
      <summary>
            Releases storage associated with current directory.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.CreateDirectory">
      <summary>
            Creates a new directory within file/stream.
            </summary>
      <remarks>The newly created directory will not exist on the file/stream till
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.WriteDirectory" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.CheckpointDirectory" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.Flush" />
            or <see cref="M:BitMiracle.LibTiff.Classic.Tiff.Close" /> is called.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.LastDirectory">
      <summary>
            Returns an indication of whether the current directory is the last directory
            in the file.
            </summary>
      <returns>
        <c>true</c> if current directory is the last directory in the file;
            otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SetDirectory(System.Int16)">
      <summary>
            Sets the directory with specified number as the current directory.
            </summary>
      <param name="number">The zero-based number of the directory to set as the
            current directory.</param>
      <returns>
        <c>true</c> if the specified directory was set as current successfully;
            otherwise, <c>false</c></returns>
      <remarks>
        <b>SetDirectory</b> changes the current directory and reads its contents with
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadDirectory" />.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SetSubDirectory(System.Int64)">
      <summary>
            Sets the directory at specified file/stream offset as the current directory.
            </summary>
      <param name="offset">The offset from the beginnig of the file/stream to the directory
            to set as the current directory.</param>
      <returns>
        <c>true</c> if the directory at specified file offset was set as current
            successfully; otherwise, <c>false</c></returns>
      <remarks>
        <b>SetSubDirectory</b> acts like <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetDirectory(System.Int16)" />, except the
            directory is specified as a file offset instead of an index; this is required for
            accessing subdirectories linked through a SubIFD tag (e.g. thumbnail images).</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.UnlinkDirectory(System.Int16)">
      <summary>
            Unlinks the specified directory from the directory chain.
            </summary>
      <param name="number">The zero-based number of the directory to unlink.</param>
      <returns>
        <c>true</c> if directory was unlinked successfully; otherwise, <c>false</c>.</returns>
      <remarks>
        <b>UnlinkDirectory</b> does not removes directory bytes from the file/stream.
            It only makes them unused.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SetField(BitMiracle.LibTiff.Classic.TiffTag,System.Object[])">
      <summary>
            Sets the value(s) of a tag in a TIFF file/stream open for writing.
            </summary>
      <param name="tag">The tag.</param>
      <param name="value">The tag value(s).</param>
      <returns>
        <c>true</c> if tag value(s) were set successfully; otherwise, <c>false</c>.</returns>
      <remarks>
        <para>
          <b>SetField</b> sets the value of a tag or pseudo-tag in the current directory
            associated with the open TIFF file/stream. To set the value of a field the file/stream
            must have been previously opened for writing with <see cref="M:BitMiracle.LibTiff.Classic.Tiff.Open(System.String,System.String)" /> or
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ClientOpen(System.String,System.String,System.Object,BitMiracle.LibTiff.Classic.TiffStream)" />;
            pseudo-tags can be set whether the file was opened for
            reading or writing. The tag is identified by <paramref name="tag" />.
            The type and number of values in <paramref name="value" /> is dependent on the tag
            being set. You may want to consult
            <a href="54cbd23d-dc55-44b9-921f-3a06efc2f6ce.htm">"Well-known tags and their
            value(s) data types"</a> to become familiar with exact data types and calling
            conventions required for each tag supported by the library.
            </para>
        <para>
            A pseudo-tag is a parameter that is used to control the operation of the library but
            whose value is not read or written to the underlying file.
            </para>
        <para>
            The field will be written to the file when/if the directory structure is updated.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteDirectory">
      <summary>
            Writes the contents of the current directory to the file and setup to create a new
            subfile (page) in the same file.
            </summary>
      <returns>
        <c>true</c> if the current directory was written successfully;
            otherwise, <c>false</c></returns>
      <remarks>Applications only need to call <b>WriteDirectory</b> when writing multiple
            subfiles (pages) to a single TIFF file. <b>WriteDirectory</b> is automatically called
            by <see cref="M:BitMiracle.LibTiff.Classic.Tiff.Close" /> and <see cref="M:BitMiracle.LibTiff.Classic.Tiff.Flush" /> to write a modified directory if the
            file is open for writing.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.CheckpointDirectory">
      <summary>
            Writes the current state of the TIFF directory into the file to make what is currently
            in the file/stream readable.
            </summary>
      <returns>
        <c>true</c> if the current directory was rewritten successfully;
            otherwise, <c>false</c></returns>
      <remarks>Unlike <see cref="M:BitMiracle.LibTiff.Classic.Tiff.WriteDirectory" />, <b>CheckpointDirectory</b> does not free
            up the directory data structures in memory, so they can be updated (as strips/tiles
            are written) and written again. Reading such a partial file you will at worst get a
            TIFF read error for the first strip/tile encountered that is incomplete, but you will
            at least get all the valid data in the file before that. When the file is complete,
            just use <see cref="M:BitMiracle.LibTiff.Classic.Tiff.WriteDirectory" /> as usual to finish it off cleanly.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.RewriteDirectory">
      <summary>
            Rewrites the contents of the current directory to the file and setup to create a new
            subfile (page) in the same file.
            </summary>
      <returns>
        <c>true</c> if the current directory was rewritten successfully;
            otherwise, <c>false</c></returns>
      <remarks>The <b>RewriteDirectory</b> operates similarly to <see cref="M:BitMiracle.LibTiff.Classic.Tiff.WriteDirectory" />,
            but can be called with directories previously read or written that already have an
            established location in the file. It will rewrite the directory, but instead of place
            it at it's old location (as <see cref="M:BitMiracle.LibTiff.Classic.Tiff.WriteDirectory" /> would) it will place them at
            the end of the file, correcting the pointer from the preceeding directory or file
            header to point to it's new location. This is particularly important in cases where
            the size of the directory and pointed to data has grown, so it won’t fit in the space
            available at the old location. Note that this will result in the loss of the 
            previously used directory space.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.PrintDirectory(System.IO.Stream)">
      <summary>
            Prints formatted description of the contents of the current directory to the
            specified stream.
            </summary>
      <overloads>
            Prints formatted description of the contents of the current directory to the
            specified stream possibly using specified print options.
            </overloads>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.PrintDirectory(System.IO.Stream,BitMiracle.LibTiff.Classic.TiffPrintFlags)">
      <summary>
            Prints formatted description of the contents of the current directory to the
            specified stream using specified print (formatting) options.
            </summary>
      <param name="stream">The stream.</param>
      <param name="flags">The print (formatting) options.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadScanline(System.Byte[],System.Int32)">
      <summary>
            Reads and decodes a scanline of data from an open TIFF file/stream.
            </summary>
      <overloads>
            Reads and decodes a scanline of data from an open TIFF file/stream.
            </overloads>
      <param name="buffer">The buffer to place read and decoded image data to.</param>
      <param name="row">The zero-based index of scanline (row) to read.</param>
      <returns>
        <c>true</c> if image data were read and decoded successfully; otherwise, <c>false</c></returns>
      <remarks>
        <para>
          <b>ReadScanline</b> reads the data for the specified <paramref name="row" /> into the
            user supplied data buffer <paramref name="buffer" />. The data are returned
            decompressed and, in the native byte- and bit-ordering, but are otherwise packed
            (see further below). The <paramref name="buffer" /> must be large enough to hold an
            entire scanline of data. Applications should call the <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ScanlineSize" />
            to find out the size (in bytes) of a scanline buffer. Applications should use
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadScanline(System.Byte[],System.Int32,System.Int16)" /> or
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadScanline(System.Byte[],System.Int32,System.Int32,System.Int16)" /> and specify correct sample plane if
            image data are organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            </para>
        <para>
            The library attempts to hide bit- and byte-ordering differences between the image and
            the native machine by converting data to the native machine order. Bit reversal is
            done if the value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.FILLORDER" /> tag is opposite to the native
            machine bit order. 16- and 32-bit samples are automatically byte-swapped if the file
            was written with a byte order opposite to the native machine byte order.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadScanline(System.Byte[],System.Int32,System.Int16)">
      <summary>
            Reads and decodes a scanline of data from an open TIFF file/stream.
            </summary>
      <param name="buffer">The buffer to place read and decoded image data to.</param>
      <param name="row">The zero-based index of scanline (row) to read.</param>
      <param name="plane">The zero-based index of the sample plane.</param>
      <returns>
        <c>true</c> if image data were read and decoded successfully; otherwise, <c>false</c></returns>
      <remarks>
        <para>
          <b>ReadScanline</b> reads the data for the specified <paramref name="row" /> and
            specified sample plane <paramref name="plane" /> into the user supplied data buffer
            <paramref name="buffer" />. The data are returned decompressed and, in the native
            byte- and bit-ordering, but are otherwise packed (see further below). The
            <paramref name="buffer" /> must be large enough to hold an entire scanline of data.
            Applications should call the <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ScanlineSize" /> to find out the size (in
            bytes) of a scanline buffer. Applications may use
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadScanline(System.Byte[],System.Int32)" /> or specify 0 for <paramref name="plane" />
            parameter if image data is contiguous (i.e not organized in separate planes, 
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.CONTIG).
            </para>
        <para>
            The library attempts to hide bit- and byte-ordering differences between the image and
            the native machine by converting data to the native machine order. Bit reversal is
            done if the value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.FILLORDER" /> tag is opposite to the native
            machine bit order. 16- and 32-bit samples are automatically byte-swapped if the file
            was written with a byte order opposite to the native machine byte order.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadScanline(System.Byte[],System.Int32,System.Int32,System.Int16)">
      <summary>
            Reads and decodes a scanline of data from an open TIFF file/stream.
            </summary>
      <param name="buffer">The buffer to place read and decoded image data to.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which
            to begin storing read and decoded bytes.</param>
      <param name="row">The zero-based index of scanline (row) to read.</param>
      <param name="plane">The zero-based index of the sample plane.</param>
      <returns>
        <c>true</c> if image data were read and decoded successfully; otherwise, <c>false</c></returns>
      <remarks>
        <para>
          <b>ReadScanline</b> reads the data for the specified <paramref name="row" /> and
            specified sample plane <paramref name="plane" /> into the user supplied data buffer
            <paramref name="buffer" />. The data are returned decompressed and, in the native
            byte- and bit-ordering, but are otherwise packed (see further below). The
            <paramref name="buffer" /> must be large enough to hold an entire scanline of data.
            Applications should call the <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ScanlineSize" /> to find out the size (in
            bytes) of a scanline buffer. Applications may use
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadScanline(System.Byte[],System.Int32)" /> or specify 0 for <paramref name="plane" />
            parameter if image data is contiguous (i.e not organized in separate planes,
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.CONTIG).
            </para>
        <para>
            The library attempts to hide bit- and byte-ordering differences between the image and
            the native machine by converting data to the native machine order. Bit reversal is
            done if the value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.FILLORDER" /> tag is opposite to the native
            machine bit order. 16- and 32-bit samples are automatically byte-swapped if the file
            was written with a byte order opposite to the native machine byte order.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteScanline(System.Byte[],System.Int32)">
      <summary>
            Encodes and writes a scanline of data to an open TIFF file/stream.
            </summary>
      <overloads>Encodes and writes a scanline of data to an open TIFF file/stream.</overloads>
      <param name="buffer">The buffer with image data to be encoded and written.</param>
      <param name="row">The zero-based index of scanline (row) to place encoded data at.</param>
      <returns>
        <c>true</c> if image data were encoded and written successfully; otherwise, <c>false</c></returns>
      <remarks>
        <para>
          <b>WriteScanline</b> encodes and writes to a file at the specified
            <paramref name="row" />. Applications should use
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.WriteScanline(System.Byte[],System.Int32,System.Int16)" /> or
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.WriteScanline(System.Byte[],System.Int32,System.Int32,System.Int16)" /> and specify correct sample plane
            parameter if image data in a file/stream is organized in separate planes (i.e
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            </para>
        <para>
            The data are assumed to be uncompressed and in the native bit- and byte-order of the
            host machine. The data written to the file is compressed according to the compression
            scheme of the current TIFF directory (see further below). If the current scanline is
            past the end of the current subfile, the value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" />
            tag is automatically increased to include the scanline (except for
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE, where the
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> tag cannot be changed once the first data are
            written). If the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> is increased, the values of
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPOFFSETS" /> and <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPBYTECOUNTS" /> tags are
            similarly enlarged to reflect data written past the previous end of image.
            </para>
        <para>
            The library writes encoded data using the native machine byte order. Correctly
            implemented TIFF readers are expected to do any necessary byte-swapping to correctly
            process image data with value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.BITSPERSAMPLE" /> tag greater
            than 8. The library attempts to hide bit-ordering differences between the image and
            the native machine by converting data from the native machine order.
            </para>
        <para>
            Once data are written to a file/stream for the current directory, the values of
            certain tags may not be altered; see
            <a href="54cbd23d-dc55-44b9-921f-3a06efc2f6ce.htm">"Well-known tags and their
            value(s) data types"</a> for more information.
            </para>
        <para>
            It is not possible to write scanlines to a file/stream that uses a tiled organization.
            The <see cref="M:BitMiracle.LibTiff.Classic.Tiff.IsTiled" /> can be used to determine if the file/stream is organized as
            tiles or strips.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteScanline(System.Byte[],System.Int32,System.Int16)">
      <summary>
            Encodes and writes a scanline of data to an open TIFF file/stream.
            </summary>
      <param name="buffer">The buffer with image data to be encoded and written.</param>
      <param name="row">The zero-based index of scanline (row) to place encoded data at.</param>
      <param name="plane">The zero-based index of the sample plane.</param>
      <returns>
        <c>true</c> if image data were encoded and written successfully; otherwise, <c>false</c></returns>
      <remarks>
        <para>
          <b>WriteScanline</b> encodes and writes to a file at the specified
            <paramref name="row" /> and specified sample plane <paramref name="plane" />.
            Applications may use <see cref="M:BitMiracle.LibTiff.Classic.Tiff.WriteScanline(System.Byte[],System.Int32)" /> or specify 0 for
            <paramref name="plane" /> parameter if image data in a file/stream is contiguous (i.e
            not organized in separate planes,
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.CONTIG).
            </para>
        <para>
            The data are assumed to be uncompressed and in the native bit- and byte-order of the
            host machine. The data written to the file is compressed according to the compression
            scheme of the current TIFF directory (see further below). If the current scanline is
            past the end of the current subfile, the value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" />
            tag is automatically increased to include the scanline (except for
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE, where the
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> tag cannot be changed once the first data are
            written). If the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> is increased, the values of
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPOFFSETS" /> and <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPBYTECOUNTS" /> tags are
            similarly enlarged to reflect data written past the previous end of image.
            </para>
        <para>
            The library writes encoded data using the native machine byte order. Correctly
            implemented TIFF readers are expected to do any necessary byte-swapping to correctly
            process image data with value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.BITSPERSAMPLE" /> tag greater
            than 8. The library attempts to hide bit-ordering differences between the image and
            the native machine by converting data from the native machine order.
            </para>
        <para>
            Once data are written to a file/stream for the current directory, the values of
            certain tags may not be altered; see
            <a href="54cbd23d-dc55-44b9-921f-3a06efc2f6ce.htm">"Well-known tags and their
            value(s) data types"</a> for more information.
            </para>
        <para>
            It is not possible to write scanlines to a file/stream that uses a tiled organization.
            The <see cref="M:BitMiracle.LibTiff.Classic.Tiff.IsTiled" /> can be used to determine if the file/stream is organized as
            tiles or strips.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteScanline(System.Byte[],System.Int32,System.Int32,System.Int16)">
      <summary>
            Encodes and writes a scanline of data to an open TIFF file/stream.
            </summary>
      <param name="buffer">The buffer with image data to be encoded and written.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which
            to begin reading bytes.</param>
      <param name="row">The zero-based index of scanline (row) to place encoded data at.</param>
      <param name="plane">The zero-based index of the sample plane.</param>
      <returns>
        <c>true</c> if image data were encoded and written successfully; otherwise, <c>false</c></returns>
      <remarks>
        <para>
          <b>WriteScanline</b> encodes and writes to a file at the specified
            <paramref name="row" /> and specified sample plane <paramref name="plane" />.
            Applications may use <see cref="M:BitMiracle.LibTiff.Classic.Tiff.WriteScanline(System.Byte[],System.Int32)" /> or specify 0 for
            <paramref name="plane" /> parameter if image data in a file/stream is contiguous (i.e
            not organized in separate planes,
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.CONTIG).
            </para>
        <para>
            The data are assumed to be uncompressed and in the native bit- and byte-order of the
            host machine. The data written to the file is compressed according to the compression
            scheme of the current TIFF directory (see further below). If the current scanline is
            past the end of the current subfile, the value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" />
            tag is automatically increased to include the scanline (except for
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.CONTIG, where the
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> tag cannot be changed once the first data are
            written). If the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> is increased, the values of
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPOFFSETS" /> and <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPBYTECOUNTS" /> tags are
            similarly enlarged to reflect data written past the previous end of image.
            </para>
        <para>
            The library writes encoded data using the native machine byte order. Correctly
            implemented TIFF readers are expected to do any necessary byte-swapping to correctly
            process image data with value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.BITSPERSAMPLE" /> tag greater
            than 8. The library attempts to hide bit-ordering differences between the image and
            the native machine by converting data from the native machine order.
            </para>
        <para>
            Once data are written to a file/stream for the current directory, the values of
            certain tags may not be altered; see 
            <a href="54cbd23d-dc55-44b9-921f-3a06efc2f6ce.htm">"Well-known tags and their
            value(s) data types"</a> for more information.
            </para>
        <para>
            It is not possible to write scanlines to a file/stream that uses a tiled organization.
            The <see cref="M:BitMiracle.LibTiff.Classic.Tiff.IsTiled" /> can be used to determine if the file/stream is organized as
            tiles or strips.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage(System.Int32,System.Int32,System.Int32[])">
      <summary>
            Reads the image and decodes it into RGBA format raster.
            </summary>
      <overloads>
            Reads the image and decodes it into RGBA format raster.
            </overloads>
      <param name="width">The raster width.</param>
      <param name="height">The raster height.</param>
      <param name="raster">The raster (the buffer to place decoded image data to).</param>
      <returns>
        <c>true</c> if the image was successfully read and converted; otherwise,
            <c>false</c> is returned if an error was encountered.</returns>
      <remarks>
        <para>
          <b>ReadRGBAImage</b> reads a strip- or tile-based image into memory, storing the
            result in the user supplied RGBA <paramref name="raster" />. The raster is assumed to
            be an array of <paramref name="width" /> times <paramref name="height" /> 32-bit entries,
            where <paramref name="width" /> must be less than or equal to the width of the image
            (<paramref name="height" /> may be any non-zero size). If the raster dimensions are
            smaller than the image, the image data is cropped to the raster bounds. If the raster
            height is greater than that of the image, then the image data are placed in the lower
            part of the raster. Note that the raster is assumed to be organized such that the
            pixel at location (x, y) is <paramref name="raster" />[y * width + x]; with the raster
            origin in the lower-left hand corner. Please use
            <see cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImageOriented" /> if you
            want to specify another raster origin.
            </para>
        <para>
            Raster pixels are 8-bit packed red, green, blue, alpha samples. The
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetR(System.Int32)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetG(System.Int32)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetB(System.Int32)" />, and
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetA(System.Int32)" /> should be used to access individual samples. Images without
            Associated Alpha matting information have a constant Alpha of 1.0 (255).
            </para>
        <para>
          <b>ReadRGBAImage</b> converts non-8-bit images by scaling sample values. Palette,
            grayscale, bilevel, CMYK, and YCbCr images are converted to RGB transparently. Raster
            pixels are returned uncorrected by any colorimetry information present in the directory.
            </para>
        <para>
            Samples must be either 1, 2, 4, 8, or 16 bits. Colorimetric samples/pixel must be
            either 1, 3, or 4 (i.e. SamplesPerPixel minus ExtraSamples).
            </para>
        <para>
            Palette image colormaps that appear to be incorrectly written as 8-bit values are
            automatically scaled to 16-bits.
            </para>
        <para>
          <b>ReadRGBAImage</b> is just a wrapper around the more general
            <see cref="T:BitMiracle.LibTiff.Classic.TiffRgbaImage" /> facilities.
            </para>
        <para>
            All error messages are directed to the current error handler.
            </para>
      </remarks>
      <seealso cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImageOriented" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAStrip(System.Int32,System.Int32[])" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBATile(System.Int32,System.Int32,System.Int32[])" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.RGBAImageOK(System.String@)" />
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage(System.Int32,System.Int32,System.Int32[],System.Boolean)">
      <summary>
            Reads the image and decodes it into RGBA format raster.
            </summary>
      <param name="width">The raster width.</param>
      <param name="height">The raster height.</param>
      <param name="raster">The raster (the buffer to place decoded image data to).</param>
      <param name="stopOnError">if set to <c>true</c> then an error will terminate the
            operation; otherwise method will continue processing data until all the possible data
            in the image have been requested.</param>
      <returns>
        <c>true</c> if the image was successfully read and converted; otherwise, <c>false</c>
            is returned if an error was encountered and stopOnError is <c>false</c>.
            </returns>
      <remarks>
        <para>
          <b>ReadRGBAImage</b> reads a strip- or tile-based image into memory, storing the
            result in the user supplied RGBA <paramref name="raster" />. The raster is assumed to
            be an array of <paramref name="width" /> times <paramref name="height" /> 32-bit entries,
            where <paramref name="width" /> must be less than or equal to the width of the image
            (<paramref name="height" /> may be any non-zero size). If the raster dimensions are
            smaller than the image, the image data is cropped to the raster bounds. If the raster
            height is greater than that of the image, then the image data are placed in the lower
            part of the raster. Note that the raster is assumed to be organized such that the
            pixel at location (x, y) is <paramref name="raster" />[y * width + x]; with the raster
            origin in the lower-left hand corner. Please use
            <see cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImageOriented" /> if you
            want to specify another raster origin.
            </para>
        <para>
            Raster pixels are 8-bit packed red, green, blue, alpha samples. The
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetR(System.Int32)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetG(System.Int32)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetB(System.Int32)" />, and
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetA(System.Int32)" /> should be used to access individual samples. Images without
            Associated Alpha matting information have a constant Alpha of 1.0 (255).
            </para>
        <para>
          <b>ReadRGBAImage</b> converts non-8-bit images by scaling sample values. Palette,
            grayscale, bilevel, CMYK, and YCbCr images are converted to RGB transparently. Raster
            pixels are returned uncorrected by any colorimetry information present in the directory.
            </para>
        <para>
            Samples must be either 1, 2, 4, 8, or 16 bits. Colorimetric samples/pixel must be
            either 1, 3, or 4 (i.e. SamplesPerPixel minus ExtraSamples).
            </para>
        <para>
            Palette image colormaps that appear to be incorrectly written as 8-bit values are
            automatically scaled to 16-bits.
            </para>
        <para>
          <b>ReadRGBAImage</b> is just a wrapper around the more general
            <see cref="T:BitMiracle.LibTiff.Classic.TiffRgbaImage" /> facilities.
            </para>
        <para>
            All error messages are directed to the current error handler.
            </para>
      </remarks>
      <seealso cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImageOriented" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAStrip(System.Int32,System.Int32[])" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBATile(System.Int32,System.Int32,System.Int32[])" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.RGBAImageOK(System.String@)" />
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImageOriented(System.Int32,System.Int32,System.Int32[],BitMiracle.LibTiff.Classic.Orientation)">
      <summary>
            Reads the image and decodes it into RGBA format raster using specified raster origin.
            </summary>
      <overloads>
            Reads the image and decodes it into RGBA format raster using specified raster origin.
            </overloads>
      <param name="width">The raster width.</param>
      <param name="height">The raster height.</param>
      <param name="raster">The raster (the buffer to place decoded image data to).</param>
      <param name="orientation">The raster origin position.</param>
      <returns>
        <c>true</c> if the image was successfully read and converted; otherwise, <c>false</c>
            is returned if an error was encountered.
            </returns>
      <remarks>
        <para>
          <b>ReadRGBAImageOriented</b> reads a strip- or tile-based image into memory, storing the
            result in the user supplied RGBA <paramref name="raster" />. The raster is assumed to
            be an array of <paramref name="width" /> times <paramref name="height" /> 32-bit entries,
            where <paramref name="width" /> must be less than or equal to the width of the image
            (<paramref name="height" /> may be any non-zero size). If the raster dimensions are
            smaller than the image, the image data is cropped to the raster bounds. If the raster
            height is greater than that of the image, then the image data placement depends on
            <paramref name="orientation" />. Note that the raster is assumed to be organized such
            that the pixel at location (x, y) is <paramref name="raster" />[y * width + x]; with
            the raster origin specified by <paramref name="orientation" /> parameter.
            </para>
        <para>
            When <b>ReadRGBAImageOriented</b> is used with <see cref="T:BitMiracle.LibTiff.Classic.Orientation" />.BOTLEFT for
            the <paramref name="orientation" /> the produced result is the same as retuned by
            <see cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage" />.
            </para>
        <para>
            Raster pixels are 8-bit packed red, green, blue, alpha samples. The
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetR(System.Int32)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetG(System.Int32)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetB(System.Int32)" />, and
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetA(System.Int32)" /> should be used to access individual samples. Images without
            Associated Alpha matting information have a constant Alpha of 1.0 (255).
            </para>
        <para>
          <b>ReadRGBAImageOriented</b> converts non-8-bit images by scaling sample values.
            Palette, grayscale, bilevel, CMYK, and YCbCr images are converted to RGB transparently.
            Raster pixels are returned uncorrected by any colorimetry information present in
            the directory.
            </para>
        <para>
            Samples must be either 1, 2, 4, 8, or 16 bits. Colorimetric samples/pixel must be
            either 1, 3, or 4 (i.e. SamplesPerPixel minus ExtraSamples).
            </para>
        <para>
            Palette image colormaps that appear to be incorrectly written as 8-bit values are
            automatically scaled to 16-bits.
            </para>
        <para>
          <b>ReadRGBAImageOriented</b> is just a wrapper around the more general
            <see cref="T:BitMiracle.LibTiff.Classic.TiffRgbaImage" /> facilities.
            </para>
        <para>
            All error messages are directed to the current error handler.
            </para>
      </remarks>
      <seealso cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAStrip(System.Int32,System.Int32[])" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBATile(System.Int32,System.Int32,System.Int32[])" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.RGBAImageOK(System.String@)" />
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImageOriented(System.Int32,System.Int32,System.Int32[],BitMiracle.LibTiff.Classic.Orientation,System.Boolean)">
      <summary>
            Reads the image and decodes it into RGBA format raster using specified raster origin.
            </summary>
      <param name="width">The raster width.</param>
      <param name="height">The raster height.</param>
      <param name="raster">The raster (the buffer to place decoded image data to).</param>
      <param name="orientation">The raster origin position.</param>
      <param name="stopOnError">if set to <c>true</c> then an error will terminate the
            operation; otherwise method will continue processing data until all the possible data
            in the image have been requested.</param>
      <returns>
        <c>true</c> if the image was successfully read and converted; otherwise, <c>false</c>
            is returned if an error was encountered and stopOnError is <c>false</c>.
            </returns>
      <remarks>
        <para>
          <b>ReadRGBAImageOriented</b> reads a strip- or tile-based image into memory, storing the
            result in the user supplied RGBA <paramref name="raster" />. The raster is assumed to
            be an array of <paramref name="width" /> times <paramref name="height" /> 32-bit entries,
            where <paramref name="width" /> must be less than or equal to the width of the image
            (<paramref name="height" /> may be any non-zero size). If the raster dimensions are
            smaller than the image, the image data is cropped to the raster bounds. If the raster
            height is greater than that of the image, then the image data placement depends on
            <paramref name="orientation" />. Note that the raster is assumed to be organized such
            that the pixel at location (x, y) is <paramref name="raster" />[y * width + x]; with
            the raster origin specified by <paramref name="orientation" /> parameter.
            </para>
        <para>
            When <b>ReadRGBAImageOriented</b> is used with <see cref="T:BitMiracle.LibTiff.Classic.Orientation" />.BOTLEFT for
            the <paramref name="orientation" /> the produced result is the same as retuned by
            <see cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage" />.
            </para>
        <para>
            Raster pixels are 8-bit packed red, green, blue, alpha samples. The
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetR(System.Int32)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetG(System.Int32)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetB(System.Int32)" />, and
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetA(System.Int32)" /> should be used to access individual samples. Images without
            Associated Alpha matting information have a constant Alpha of 1.0 (255).
            </para>
        <para>
          <b>ReadRGBAImageOriented</b> converts non-8-bit images by scaling sample values.
            Palette, grayscale, bilevel, CMYK, and YCbCr images are converted to RGB transparently.
            Raster pixels are returned uncorrected by any colorimetry information present in
            the directory.
            </para>
        <para>
            Samples must be either 1, 2, 4, 8, or 16 bits. Colorimetric samples/pixel must be
            either 1, 3, or 4 (i.e. SamplesPerPixel minus ExtraSamples).
            </para>
        <para>
            Palette image colormaps that appear to be incorrectly written as 8-bit values are
            automatically scaled to 16-bits.
            </para>
        <para>
          <b>ReadRGBAImageOriented</b> is just a wrapper around the more general
            <see cref="T:BitMiracle.LibTiff.Classic.TiffRgbaImage" /> facilities.
            </para>
        <para>
            All error messages are directed to the current error handler.
            </para>
      </remarks>
      <seealso cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImageOriented" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAStrip(System.Int32,System.Int32[])" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBATile(System.Int32,System.Int32,System.Int32[])" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.RGBAImageOK(System.String@)" />
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAStrip(System.Int32,System.Int32[])">
      <summary>
            Reads a whole strip of a strip-based image, decodes it and converts it to RGBA format.
            </summary>
      <param name="row">The row.</param>
      <param name="raster">The RGBA raster.</param>
      <returns>
        <c>true</c> if the strip was successfully read and converted; otherwise,
            <c>false</c></returns>
      <remarks>
        <para>
          <b>ReadRGBAStrip</b> reads a single strip of a strip-based image into memory, storing
            the result in the user supplied RGBA <paramref name="raster" />. If specified strip is
            the last strip, then it will only contain the portion of the strip that is actually
            within the image space. The raster is assumed to be an array of width times
            rowsperstrip 32-bit entries, where width is the width of the image
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEWIDTH" />) and rowsperstrip is the maximum lines in a strip
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.ROWSPERSTRIP" />).
            </para>
        <para>
            The <paramref name="row" /> value should be the row of the first row in the strip
            (strip * rowsperstrip, zero based).
            </para>
        <para>
            Note that the raster is assumed to be organized such that the pixel at location (x, y)
            is <paramref name="raster" />[y * width + x]; with the raster origin in the lower-left
            hand corner of the strip. That is bottom to top organization. When reading a partial
            last strip in the file the last line of the image will begin at the beginning of
            the buffer.
            </para>
        <para>
            Raster pixels are 8-bit packed red, green, blue, alpha samples. The
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetR(System.Int32)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetG(System.Int32)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetB(System.Int32)" />, and
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetA(System.Int32)" /> should be used to access individual samples. Images without
            Associated Alpha matting information have a constant Alpha of 1.0 (255).
            </para>
        <para>
            See <see cref="T:BitMiracle.LibTiff.Classic.TiffRgbaImage" /> for more details on how various image types are
            converted to RGBA values.
            </para>
        <para>
            Samples must be either 1, 2, 4, 8, or 16 bits. Colorimetric samples/pixel must be
            either 1, 3, or 4 (i.e. SamplesPerPixel minus ExtraSamples).
            </para>
        <para>
            Palette image colormaps that appear to be incorrectly written as 8-bit values are
            automatically scaled to 16-bits.
            </para>
        <para>
          <b>ReadRGBAStrip</b>'s main advantage over the similar
            <see cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage" /> function is that for
            large images a single buffer capable of holding the whole image doesn't need to be
            allocated, only enough for one strip. The <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBATile(System.Int32,System.Int32,System.Int32[])" /> function does a
            similar operation for tiled images.
            </para>
        <para>
          <b>ReadRGBAStrip</b> is just a wrapper around the more general
            <see cref="T:BitMiracle.LibTiff.Classic.TiffRgbaImage" /> facilities.
            </para>
        <para>
            All error messages are directed to the current error handler.
            </para>
      </remarks>
      <seealso cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage" />
      <seealso cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImageOriented" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBATile(System.Int32,System.Int32,System.Int32[])" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.RGBAImageOK(System.String@)" />
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBATile(System.Int32,System.Int32,System.Int32[])">
      <summary>
            Reads a whole tile of a tile-based image, decodes it and converts it to RGBA format.
            </summary>
      <param name="col">The column.</param>
      <param name="row">The row.</param>
      <param name="raster">The RGBA raster.</param>
      <returns>
        <c>true</c> if the strip was successfully read and converted; otherwise,
            <c>false</c></returns>
      <remarks>
        <para>
          <b>ReadRGBATile</b> reads a single tile of a tile-based image into memory,
            storing the result in the user supplied RGBA <paramref name="raster" />. The raster is
            assumed to be an array of width times length 32-bit entries, where width is the width
            of the tile (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.TILEWIDTH" />) and length is the height of a tile
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.TILELENGTH" />).
            </para>
        <para>
            The <paramref name="col" /> and <paramref name="row" /> values are the offsets from the
            top left corner of the image to the top left corner of the tile to be read. They must
            be an exact multiple of the tile width and length.
            </para>
        <para>
            Note that the raster is assumed to be organized such that the pixel at location (x, y)
            is <paramref name="raster" />[y * width + x]; with the raster origin in the lower-left
            hand corner of the tile. That is bottom to top organization. Edge tiles which partly
            fall off the image will be filled out with appropriate zeroed areas.
            </para>
        <para>
            Raster pixels are 8-bit packed red, green, blue, alpha samples. The
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetR(System.Int32)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetG(System.Int32)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetB(System.Int32)" />, and
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetA(System.Int32)" /> should be used to access individual samples. Images without
            Associated Alpha matting information have a constant Alpha of 1.0 (255).
            </para>
        <para>
            See <see cref="T:BitMiracle.LibTiff.Classic.TiffRgbaImage" /> for more details on how various image types are
            converted to RGBA values.
            </para>
        <para>
            Samples must be either 1, 2, 4, 8, or 16 bits. Colorimetric samples/pixel must be
            either 1, 3, or 4 (i.e. SamplesPerPixel minus ExtraSamples).
            </para>
        <para>
            Palette image colormaps that appear to be incorrectly written as 8-bit values are
            automatically scaled to 16-bits.
            </para>
        <para>
          <b>ReadRGBATile</b>'s main advantage over the similar
            <see cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage" /> function is that for
            large images a single buffer capable of holding the whole image doesn't need to be
            allocated, only enough for one tile. The <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAStrip(System.Int32,System.Int32[])" /> function does a
            similar operation for stripped images.
            </para>
        <para>
          <b>ReadRGBATile</b> is just a wrapper around the more general
            <see cref="T:BitMiracle.LibTiff.Classic.TiffRgbaImage" /> facilities.
            </para>
        <para>
            All error messages are directed to the current error handler.
            </para>
      </remarks>
      <seealso cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage" />
      <seealso cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImageOriented" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAStrip(System.Int32,System.Int32[])" />
      <seealso cref="M:BitMiracle.LibTiff.Classic.Tiff.RGBAImageOK(System.String@)" />
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.RGBAImageOK(System.String@)">
      <summary>
            Check the image to see if it can be converted to RGBA format.
            </summary>
      <param name="errorMsg">The error message (if any) gets placed here.</param>
      <returns>
        <c>true</c> if the image can be converted to RGBA format; otherwise,
            <c>false</c> is returned and <paramref name="errorMsg" /> contains the reason why it
            is being rejected.</returns>
      <remarks>
        <para>
            To convert the image to RGBA format please use
            <see cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImage" />,
            <see cref="O:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAImageOriented" />,
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBAStrip(System.Int32,System.Int32[])" /> or <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ReadRGBATile(System.Int32,System.Int32,System.Int32[])" /></para>
        <para>
            Convertible images should follow this rules: samples must be either 1, 2, 4, 8, or
            16 bits; colorimetric samples/pixel must be either 1, 3, or 4 (i.e. SamplesPerPixel
            minus ExtraSamples).</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.FileName">
      <summary>
            Gets the name of the file or ID string for this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />.
            </summary>
      <returns>The name of the file or ID string for this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />.</returns>
      <remarks>If this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> was created using <see cref="M:BitMiracle.LibTiff.Classic.Tiff.Open(System.String,System.String)" /> method then
            value of fileName parameter of <see cref="M:BitMiracle.LibTiff.Classic.Tiff.Open(System.String,System.String)" /> method is returned. If this
            <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> was created using
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ClientOpen(System.String,System.String,System.Object,BitMiracle.LibTiff.Classic.TiffStream)" />
            then value of name parameter of
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ClientOpen(System.String,System.String,System.Object,BitMiracle.LibTiff.Classic.TiffStream)" />
            method is returned.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SetFileName(System.String)">
      <summary>
            Sets the new ID string for this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />.
            </summary>
      <param name="name">The ID string for this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />.</param>
      <returns>The previous file name or ID string for this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />.</returns>
      <remarks>Please note, that <paramref name="name" /> is an arbitrary string used as
            ID for this <see cref="T:BitMiracle.LibTiff.Classic.Tiff" />. It's not required to be a file name or anything
            meaningful at all.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.Error(BitMiracle.LibTiff.Classic.Tiff,System.String,System.String,System.Object[])">
      <summary>
            Invokes the library-wide error handling methods to (normally) write an error message
            to the <see cref="P:System.Console.Error" />.
            </summary>
      <param name="tif">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class. Can be <c>null</c>.</param>
      <param name="method">The method where an error is detected.</param>
      <param name="format">A composite format string (see Remarks).</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <remarks>
        <para>
            The <paramref name="format" /> is a composite format string that uses the same format as
            <see cref="O:System.String.Format" /> method. The <paramref name="method" /> parameter, if
            not <c>null</c>, is printed before the message; it typically is used to identify the
            method in which an error is detected.
            </para>
        <para>Applications that desire to capture control in the event of an error should use
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetErrorHandler(BitMiracle.LibTiff.Classic.TiffErrorHandler)" /> to override the default error and warning handler.
            </para>
      </remarks>
      <overloads>
            Invokes the library-wide error handling methods to (normally) write an error message
            to the <see cref="P:System.Console.Error" />.
            </overloads>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.Error(System.String,System.String,System.Object[])">
      <summary>
            Invokes the library-wide error handling methods to (normally) write an error message
            to the <see cref="P:System.Console.Error" />.
            </summary>
      <param name="method">The method where an error is detected.</param>
      <param name="format">A composite format string (see Remarks).</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <remarks>
        <para>
            The <paramref name="format" /> is a composite format string that uses the same format as
            <see cref="O:System.String.Format" /> method. The <paramref name="method" /> parameter, if
            not <c>null</c>, is printed before the message; it typically is used to identify the
            method in which an error is detected.
            </para>
        <para>Applications that desire to capture control in the event of an error should use
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetErrorHandler(BitMiracle.LibTiff.Classic.TiffErrorHandler)" /> to override the default error and warning handler.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ErrorExt(BitMiracle.LibTiff.Classic.Tiff,System.Object,System.String,System.String,System.Object[])">
      <summary>
            Invokes the library-wide error handling methods to (normally) write an error message
            to the <see cref="P:System.Console.Error" />.
            </summary>
      <param name="tif">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class. Can be <c>null</c>.</param>
      <param name="clientData">The client data to be passed to error handler.</param>
      <param name="method">The method where an error is detected.</param>
      <param name="format">A composite format string (see Remarks).</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <remarks>
        <para>
            The <paramref name="format" /> is a composite format string that uses the same format as
            <see cref="O:System.String.Format" /> method. The <paramref name="method" /> parameter, if
            not <c>null</c>, is printed before the message; it typically is used to identify the
            method in which an error is detected.
            </para>
        <para>
            The <paramref name="clientData" /> parameter can be anything you want. It will be passed
            unchanged to the error handler. Default error handler does not use it. Only custom
            error handlers may make use of it.
            </para>
        <para>Applications that desire to capture control in the event of an error should use
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetErrorHandler(BitMiracle.LibTiff.Classic.TiffErrorHandler)" /> to override the default error and warning handler.
            </para>
      </remarks>
      <overloads>
            Invokes the library-wide error handling methods to (normally) write an error message
            to the <see cref="P:System.Console.Error" /> and passes client data to the error handler.
            </overloads>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ErrorExt(System.Object,System.String,System.String,System.Object[])">
      <summary>
            Invokes the library-wide error handling methods to (normally) write an error message
            to the <see cref="P:System.Console.Error" />.
            </summary>
      <param name="clientData">The client data to be passed to error handler.</param>
      <param name="method">The method where an error is detected.</param>
      <param name="format">A composite format string (see Remarks).</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <remarks>
        <para>
            The <paramref name="format" /> is a composite format string that uses the same format as
            <see cref="O:System.String.Format" /> method. The <paramref name="method" /> parameter, if
            not <c>null</c>, is printed before the message; it typically is used to identify the
            method in which an error is detected.
            </para>
        <para>
            The <paramref name="clientData" /> parameter can be anything you want. It will be passed
            unchanged to the error handler. Default error handler does not use it. Only custom
            error handlers may make use of it.
            </para>
        <para>Applications that desire to capture control in the event of an error should use
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetErrorHandler(BitMiracle.LibTiff.Classic.TiffErrorHandler)" /> to override the default error and warning handler.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.Warning(BitMiracle.LibTiff.Classic.Tiff,System.String,System.String,System.Object[])">
      <summary>
            Invokes the library-wide warning handling methods to (normally) write a warning message
            to the <see cref="P:System.Console.Error" />.
            </summary>
      <param name="tif">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class. Can be <c>null</c>.</param>
      <param name="method">The method in which a warning is detected.</param>
      <param name="format">A composite format string (see Remarks).</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <remarks>
        <para>
            The <paramref name="format" /> is a composite format string that uses the same format as
            <see cref="O:System.String.Format" /> method. The <paramref name="method" /> parameter,
            if not <c>null</c>, is printed before the message; it typically is used to identify the
            method in which a warning is detected.
            </para>
        <para>Applications that desire to capture control in the event of a warning should use
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetErrorHandler(BitMiracle.LibTiff.Classic.TiffErrorHandler)" /> to override the default error and warning handler.
            </para>
      </remarks>
      <overloads>
            Invokes the library-wide warning handling methods to (normally) write a warning message
            to the <see cref="P:System.Console.Error" />.
            </overloads>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.Warning(System.String,System.String,System.Object[])">
      <summary>
            Invokes the library-wide warning handling methods to (normally) write a warning message
            to the <see cref="P:System.Console.Error" />.
            </summary>
      <param name="method">The method in which a warning is detected.</param>
      <param name="format">A composite format string (see Remarks).</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <remarks>
        <para>
            The <paramref name="format" /> is a composite format string that uses the same format as
            <see cref="O:System.String.Format" /> method. The <paramref name="method" /> parameter,
            if not <c>null</c>, is printed before the message; it typically is used to identify the
            method in which a warning is detected.
            </para>
        <para>Applications that desire to capture control in the event of a warning should use
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetErrorHandler(BitMiracle.LibTiff.Classic.TiffErrorHandler)" /> to override the default error and warning handler.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WarningExt(BitMiracle.LibTiff.Classic.Tiff,System.Object,System.String,System.String,System.Object[])">
      <summary>
            Invokes the library-wide warning handling methods to (normally) write a warning message
            to the <see cref="P:System.Console.Error" /> and passes client data to the warning handler.
            </summary>
      <param name="tif">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class. Can be <c>null</c>.</param>
      <param name="clientData">The client data to be passed to warning handler.</param>
      <param name="method">The method in which a warning is detected.</param>
      <param name="format">A composite format string (see Remarks).</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <remarks>
        <para>
            The <paramref name="format" /> is a composite format string that uses the same format as
            <see cref="O:System.String.Format" /> method. The <paramref name="method" /> parameter, if
            not <c>null</c>, is printed before the message; it typically is used to identify the
            method in which a warning is detected.
            </para>
        <para>
            The <paramref name="clientData" /> parameter can be anything you want. It will be passed
            unchanged to the warning handler. Default warning handler does not use it. Only custom
            warning handlers may make use of it.
            </para>
        <para>Applications that desire to capture control in the event of a warning should use
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetErrorHandler(BitMiracle.LibTiff.Classic.TiffErrorHandler)" /> to override the default error and warning handler.
            </para>
      </remarks>
      <overloads>
            Invokes the library-wide warning handling methods to (normally) write a warning message
            to the <see cref="P:System.Console.Error" /> and passes client data to the warning handler.
            </overloads>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WarningExt(System.Object,System.String,System.String,System.Object[])">
      <summary>
            Invokes the library-wide warning handling methods to (normally) write a warning message
            to the <see cref="P:System.Console.Error" /> and passes client data to the warning handler.
            </summary>
      <param name="clientData">The client data to be passed to warning handler.</param>
      <param name="method">The method in which a warning is detected.</param>
      <param name="format">A composite format string (see Remarks).</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <remarks>
        <para>
            The <paramref name="format" /> is a composite format string that uses the same format as
            <see cref="O:System.String.Format" /> method. The <paramref name="method" /> parameter, if
            not <c>null</c>, is printed before the message; it typically is used to identify the
            method in which a warning is detected.
            </para>
        <para>
            The <paramref name="clientData" /> parameter can be anything you want. It will be passed
            unchanged to the warning handler. Default warning handler does not use it. Only custom
            warning handlers may make use of it.
            </para>
        <para>Applications that desire to capture control in the event of a warning should use
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetErrorHandler(BitMiracle.LibTiff.Classic.TiffErrorHandler)" /> to override the default error and warning handler.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SetErrorHandler(BitMiracle.LibTiff.Classic.TiffErrorHandler)">
      <summary>
            Sets an instance of the <see cref="T:BitMiracle.LibTiff.Classic.TiffErrorHandler" /> class as custom library-wide
            error and warning handler.
            </summary>
      <param name="errorHandler">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.TiffErrorHandler" /> class
            to set as custom library-wide error and warning handler.</param>
      <returns>
            Previous error handler or <c>null</c> if there was no error handler set.
            </returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SetTagExtender(BitMiracle.LibTiff.Classic.Tiff.TiffExtendProc)">
      <summary>
            Sets the tag extender method.
            </summary>
      <param name="extender">The tag extender method.</param>
      <returns>Previous tag extender method.</returns>
      <remarks>
            Extender method is called upon creation of each instance of <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> object.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadTile(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int16)">
      <summary>
            Reads and decodes a tile of data from an open TIFF file/stream.
            </summary>
      <param name="buffer">The buffer to place read and decoded image data to.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which
            to begin storing read and decoded bytes.</param>
      <param name="x">The x-coordinate of the pixel within a tile to be read and decoded.</param>
      <param name="y">The y-coordinate of the pixel within a tile to be read and decoded.</param>
      <param name="z">The z-coordinate of the pixel within a tile to be read and decoded.</param>
      <param name="plane">The zero-based index of the sample plane.</param>
      <returns>The number of bytes in the decoded tile or <c>-1</c> if an error occurred.</returns>
      <remarks>
        <para>
            The tile to read and decode is selected by the (x, y, z, plane) coordinates (i.e.
            <b>ReadTile</b> returns the data for the tile containing the specified coordinates.
            The data placed in <paramref name="buffer" /> are returned decompressed and, typically,
            in the native byte- and bit-ordering, but are otherwise packed (see further below).
            The buffer must be large enough to hold an entire tile of data. Applications should
            call the <see cref="M:BitMiracle.LibTiff.Classic.Tiff.TileSize" /> to find out the size (in bytes) of a tile buffer.
            The <paramref name="x" /> and <paramref name="y" /> parameters are always used by
            <b>ReadTile</b>. The <paramref name="z" /> parameter is used if the image is deeper
            than 1 slice (a value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEDEPTH" /> &gt; 1). In other cases the
            value of <paramref name="z" /> is ignored. The <paramref name="plane" /> parameter is
            used only if data are organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE). In other
            cases the value of <paramref name="plane" /> is ignored.
            </para>
        <para>
            The library attempts to hide bit- and byte-ordering differences between the image and
            the native machine by converting data to the native machine order. Bit reversal is
            done if the value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.FILLORDER" /> tag is opposite to the native
            machine bit order. 16- and 32-bit samples are automatically byte-swapped if the file
            was written with a byte order opposite to the native machine byte order.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadEncodedTile(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a tile of data from an open TIFF file/stream, decompresses it and places
            specified amount of decompressed bytes into the user supplied buffer.
            </summary>
      <param name="tile">The zero-based index of the tile to read.</param>
      <param name="buffer">The buffer to place decompressed tile bytes to.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin storing
            decompressed tile bytes.</param>
      <param name="count">The maximum number of decompressed tile bytes to be stored
            to buffer.</param>
      <returns>The actual number of bytes of data that were placed in buffer or -1 if an
            error was encountered.</returns>
      <remarks>
        <para>
            The value of <paramref name="tile" /> is a "raw tile number". That is, the caller
            must take into account whether or not the data are organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ComputeTile(System.Int32,System.Int32,System.Int32,System.Int16)" /> automatically does this when converting an (x, y, z, plane)
            coordinate quadruple to a tile number.</para>
        <para>To read a full tile of data the data buffer should typically be at least as
            large as the number returned by <see cref="M:BitMiracle.LibTiff.Classic.Tiff.TileSize" />. If the -1 passed in
            <paramref name="count" /> parameter, the whole tile will be read. You should be sure
            you have enough space allocated for the buffer.</para>
        <para>The library attempts to hide bit- and byte-ordering differences between the
            image and the native machine by converting data to the native machine order. Bit
            reversal is done if the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.FILLORDER" /> tag is opposite to the native
            machine bit order. 16- and 32-bit samples are automatically byte-swapped if the file
            was written with a byte order opposite to the native machine byte order.</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadRawTile(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads the undecoded contents of a tile of data from an open TIFF file/stream and places
            specified amount of read bytes into the user supplied buffer.
            </summary>
      <param name="tile">The zero-based index of the tile to read.</param>
      <param name="buffer">The buffer to place read tile bytes to.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin storing
            read tile bytes.</param>
      <param name="count">The maximum number of read tile bytes to be stored to buffer.</param>
      <returns>The actual number of bytes of data that were placed in buffer or -1 if an
            error was encountered.</returns>
      <remarks>
        <para>
            The value of <paramref name="tile" /> is a "raw tile number". That is, the caller
            must take into account whether or not the data are organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ComputeTile(System.Int32,System.Int32,System.Int32,System.Int16)" /> automatically does this when converting an (x, y, z, plane)
            coordinate quadruple to a tile number.</para>
        <para>To read a full tile of data the data buffer should typically be at least as
            large as the number returned by <see cref="M:BitMiracle.LibTiff.Classic.Tiff.RawTileSize(System.Int32)" />. If the -1 passed in
            <paramref name="count" /> parameter, the whole tile will be read. You should be sure
            you have enough space allocated for the buffer.</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteTile(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int16)">
      <summary>
            Encodes and writes a tile of data to an open TIFF file/stream.
            </summary>
      <overloads>Encodes and writes a tile of data to an open TIFF file/stream.</overloads>
      <param name="buffer">The buffer with image data to be encoded and written.</param>
      <param name="x">The x-coordinate of the pixel within a tile to be encoded and written.</param>
      <param name="y">The y-coordinate of the pixel within a tile to be encoded and written.</param>
      <param name="z">The z-coordinate of the pixel within a tile to be encoded and written.</param>
      <param name="plane">The zero-based index of the sample plane.</param>
      <returns>
            The number of encoded and written bytes or <c>-1</c> if an error occurred.
            </returns>
      <remarks>
        <para>
            The tile to place encoded data is selected by the (x, y, z, plane) coordinates (i.e.
            <b>WriteTile</b> writes data to the tile containing the specified coordinates.
            <b>WriteTile</b> (potentially) encodes the data <paramref name="buffer" /> and writes
            it to open file/stream. The buffer must contain an entire tile of data. Applications
            should call the <see cref="M:BitMiracle.LibTiff.Classic.Tiff.TileSize" /> to find out the size (in bytes) of a tile buffer.
            The <paramref name="x" /> and <paramref name="y" /> parameters are always used by
            <b>WriteTile</b>. The <paramref name="z" /> parameter is used if the image is deeper
            than 1 slice (a value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEDEPTH" /> &gt; 1). In other cases the
            value of <paramref name="z" /> is ignored. The <paramref name="plane" /> parameter is
            used only if data are organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE). In other
            cases the value of <paramref name="plane" /> is ignored.
            </para>
        <para>
            A correct value for the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> tag must be setup before
            writing; <b>WriteTile</b> does not support automatically growing the image on
            each write (as <see cref="O:BitMiracle.LibTiff.Classic.Tiff.WriteScanline" /> does).
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteTile(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int16)">
      <summary>
            Encodes and writes a tile of data to an open TIFF file/stream.
            </summary>
      <param name="buffer">The buffer with image data to be encoded and written.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which
            to begin reading bytes to be encoded and written.</param>
      <param name="x">The x-coordinate of the pixel within a tile to be encoded and written.</param>
      <param name="y">The y-coordinate of the pixel within a tile to be encoded and written.</param>
      <param name="z">The z-coordinate of the pixel within a tile to be encoded and written.</param>
      <param name="plane">The zero-based index of the sample plane.</param>
      <returns>The number of encoded and written bytes or <c>-1</c> if an error occurred.</returns>
      <remarks>
        <para>
            The tile to place encoded data is selected by the (x, y, z, plane) coordinates (i.e.
            <b>WriteTile</b> writes data to the tile containing the specified coordinates.
            <b>WriteTile</b> (potentially) encodes the data <paramref name="buffer" /> and writes
            it to open file/stream. The buffer must contain an entire tile of data. Applications
            should call the <see cref="M:BitMiracle.LibTiff.Classic.Tiff.TileSize" /> to find out the size (in bytes) of a tile buffer.
            The <paramref name="x" /> and <paramref name="y" /> parameters are always used by
            <b>WriteTile</b>. The <paramref name="z" /> parameter is used if the image is deeper
            than 1 slice (a value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGEDEPTH" /> &gt; 1). In other cases the
            value of <paramref name="z" /> is ignored. The <paramref name="plane" /> parameter is
            used only if data are organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE). In other
            cases the value of <paramref name="plane" /> is ignored.
            </para>
        <para>
            A correct value for the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> tag must be setup before
            writing; <b>WriteTile</b> does not support automatically growing the image on
            each write (as <see cref="O:BitMiracle.LibTiff.Classic.Tiff.WriteScanline" /> does).
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadEncodedStrip(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a strip of data from an open TIFF file/stream, decompresses it and places
            specified amount of decompressed bytes into the user supplied buffer.
            </summary>
      <param name="strip">The zero-based index of the strip to read.</param>
      <param name="buffer">The buffer to place decompressed strip bytes to.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin storing
            decompressed strip bytes.</param>
      <param name="count">The maximum number of decompressed strip bytes to be stored
            to buffer.</param>
      <returns>The actual number of bytes of data that were placed in buffer or -1 if an
            error was encountered.</returns>
      <remarks>
        <para>
            The value of <paramref name="strip" /> is a "raw strip number". That is, the caller
            must take into account whether or not the data are organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ComputeStrip(System.Int32,System.Int16)" /> automatically does this when converting an (row, plane) to a
            strip index.</para>
        <para>To read a full strip of data the data buffer should typically be at least
            as large as the number returned by <see cref="M:BitMiracle.LibTiff.Classic.Tiff.StripSize" />. If the -1 passed in
            <paramref name="count" /> parameter, the whole strip will be read. You should be sure
            you have enough space allocated for the buffer.</para>
        <para>The library attempts to hide bit- and byte-ordering differences between the
            image and the native machine by converting data to the native machine order. Bit
            reversal is done if the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.FILLORDER" /> tag is opposite to the native
            machine bit order. 16- and 32-bit samples are automatically byte-swapped if the file
            was written with a byte order opposite to the native machine byte order.</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReadRawStrip(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads the undecoded contents of a strip of data from an open TIFF file/stream and
            places specified amount of read bytes into the user supplied buffer.
            </summary>
      <param name="strip">The zero-based index of the strip to read.</param>
      <param name="buffer">The buffer to place read bytes to.</param>
      <param name="offset">The zero-based byte offset in buffer at which to begin storing
            read bytes.</param>
      <param name="count">The maximum number of read bytes to be stored to buffer.</param>
      <returns>The actual number of bytes of data that were placed in buffer or -1 if an
            error was encountered.</returns>
      <remarks>
        <para>
            The value of <paramref name="strip" /> is a "raw strip number". That is, the caller
            must take into account whether or not the data are organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ComputeStrip(System.Int32,System.Int16)" /> automatically does this when converting an (row, plane) to a
            strip index.</para>
        <para>To read a full strip of data the data buffer should typically be at least
            as large as the number returned by <see cref="M:BitMiracle.LibTiff.Classic.Tiff.RawStripSize(System.Int32)" />. If the -1 passed in
            <paramref name="count" /> parameter, the whole strip will be read. You should be sure
            you have enough space allocated for the buffer.</para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteEncodedStrip(System.Int32,System.Byte[],System.Int32)">
      <summary>
            Encodes and writes a strip of data to an open TIFF file/stream.
            </summary>
      <param name="strip">The zero-based index of the strip to write.</param>
      <param name="buffer">The buffer with image data to be encoded and written.</param>
      <param name="count">The maximum number of strip bytes to be read from
            <paramref name="buffer" />.</param>
      <returns>
            The number of encoded and written bytes or <c>-1</c> if an error occurred.
            </returns>
      <overloads>Encodes and writes a strip of data to an open TIFF file/stream.</overloads>
      <remarks>
        <para>
          <b>WriteEncodedStrip</b> encodes <paramref name="count" /> bytes of raw data from
            <paramref name="buffer" /> and append the result to the specified strip; replacing any
            previously written data. Note that the value of <paramref name="strip" /> is a "raw
            strip number". That is, the caller must take into account whether or not the data are
            organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ComputeStrip(System.Int32,System.Int16)" /> automatically does this when converting an (row, plane) to
            a strip index.
            </para>
        <para>
            If there is no space for the strip, the value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" />
            tag is automatically increased to include the strip (except for
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE, where the
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> tag cannot be changed once the first data are
            written). If the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> is increased, the values of
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPOFFSETS" /> and <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPBYTECOUNTS" /> tags are
            similarly enlarged to reflect data written past the previous end of image.
            </para>
        <para>
            The library writes encoded data using the native machine byte order. Correctly
            implemented TIFF readers are expected to do any necessary byte-swapping to correctly
            process image data with value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.BITSPERSAMPLE" /> tag greater
            than 8.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteEncodedStrip(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Encodes and writes a strip of data to an open TIFF file/stream.
            </summary>
      <param name="strip">The zero-based index of the strip to write.</param>
      <param name="buffer">The buffer with image data to be encoded and written.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which
            to begin reading bytes to be encoded and written.</param>
      <param name="count">The maximum number of strip bytes to be read from
            <paramref name="buffer" />.</param>
      <returns>The number of encoded and written bytes or <c>-1</c> if an error occurred.</returns>
      <remarks>
        <para>
          <b>WriteEncodedStrip</b> encodes <paramref name="count" /> bytes of raw data from
            <paramref name="buffer" /> and append the result to the specified strip; replacing any
            previously written data. Note that the value of <paramref name="strip" /> is a "raw
            strip number". That is, the caller must take into account whether or not the data are
            organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ComputeStrip(System.Int32,System.Int16)" /> automatically does this when converting an (row, plane) to
            a strip index.
            </para>
        <para>
            If there is no space for the strip, the value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" />
            tag is automatically increased to include the strip (except for
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE, where the
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> tag cannot be changed once the first data are
            written). If the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> is increased, the values of
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPOFFSETS" /> and <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPBYTECOUNTS" /> tags are
            similarly enlarged to reflect data written past the previous end of image.
            </para>
        <para>
            The library writes encoded data using the native machine byte order. Correctly
            implemented TIFF readers are expected to do any necessary byte-swapping to correctly
            process image data with value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.BITSPERSAMPLE" /> tag greater
            than 8.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteRawStrip(System.Int32,System.Byte[],System.Int32)">
      <summary>
            Writes a strip of raw data to an open TIFF file/stream.
            </summary>
      <overloads>Writes a strip of raw data to an open TIFF file/stream.</overloads>
      <param name="strip">The zero-based index of the strip to write.</param>
      <param name="buffer">The buffer with raw image data to be written.</param>
      <param name="count">The maximum number of strip bytes to be read from
            <paramref name="buffer" />.</param>
      <returns>
            The number of written bytes or <c>-1</c> if an error occurred.
            </returns>
      <remarks>
        <para>
          <b>WriteRawStrip</b> appends <paramref name="count" /> bytes of raw data from
            <paramref name="buffer" /> to the specified strip; replacing any
            previously written data. Note that the value of <paramref name="strip" /> is a "raw
            strip number". That is, the caller must take into account whether or not the data are
            organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ComputeStrip(System.Int32,System.Int16)" /> automatically does this when converting an (row, plane) to
            a strip index.
            </para>
        <para>
            If there is no space for the strip, the value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" />
            tag is automatically increased to include the strip (except for
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE, where the
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> tag cannot be changed once the first data are
            written). If the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> is increased, the values of
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPOFFSETS" /> and <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPBYTECOUNTS" /> tags are
            similarly enlarged to reflect data written past the previous end of image.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteRawStrip(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a strip of raw data to an open TIFF file/stream.
            </summary>
      <param name="strip">The zero-based index of the strip to write.</param>
      <param name="buffer">The buffer with raw image data to be written.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which
            to begin reading bytes to be written.</param>
      <param name="count">The maximum number of strip bytes to be read from
            <paramref name="buffer" />.</param>
      <returns>The number of written bytes or <c>-1</c> if an error occurred.</returns>
      <remarks>
        <para>
          <b>WriteRawStrip</b> appends <paramref name="count" /> bytes of raw data from
            <paramref name="buffer" /> to the specified strip; replacing any
            previously written data. Note that the value of <paramref name="strip" /> is a "raw
            strip number". That is, the caller must take into account whether or not the data are
            organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ComputeStrip(System.Int32,System.Int16)" /> automatically does this when converting an (row, plane) to
            a strip index.
            </para>
        <para>
            If there is no space for the strip, the value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" />
            tag is automatically increased to include the strip (except for
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE, where the
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> tag cannot be changed once the first data are
            written). If the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> is increased, the values of
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPOFFSETS" /> and <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.STRIPBYTECOUNTS" /> tags are
            similarly enlarged to reflect data written past the previous end of image.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteEncodedTile(System.Int32,System.Byte[],System.Int32)">
      <summary>
            Encodes and writes a tile of data to an open TIFF file/stream.
            </summary>
      <overloads>Encodes and writes a tile of data to an open TIFF file/stream.</overloads>
      <param name="tile">The zero-based index of the tile to write.</param>
      <param name="buffer">The buffer with image data to be encoded and written.</param>
      <param name="count">The maximum number of tile bytes to be read from
            <paramref name="buffer" />.</param>
      <returns>
            The number of encoded and written bytes or <c>-1</c> if an error occurred.
            </returns>
      <remarks>
        <para>
          <b>WriteEncodedTile</b> encodes <paramref name="count" /> bytes of raw data from
            <paramref name="buffer" /> and append the result to the end of the specified tile. Note
            that the value of <paramref name="tile" /> is a "raw tile number". That is, the caller
            must take into account whether or not the data are organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ComputeTile(System.Int32,System.Int32,System.Int32,System.Int16)" /> automatically does this when converting an (x, y, z, plane)
            coordinate quadruple to a tile number.
            </para>
        <para>
            There must be space for the data. The function clamps individual writes to a tile to
            the tile size, but does not (and can not) check that multiple writes to the same tile
            were performed.
            </para>
        <para>
            A correct value for the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> tag must be setup before
            writing; <b>WriteEncodedTile</b> does not support automatically growing the image on
            each write (as <see cref="O:BitMiracle.LibTiff.Classic.Tiff.WriteScanline" /> does).
            </para>
        <para>
            The library writes encoded data using the native machine byte order. Correctly
            implemented TIFF readers are expected to do any necessary byte-swapping to correctly
            process image data with value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.BITSPERSAMPLE" /> tag greater
            than 8.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteEncodedTile(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Encodes and writes a tile of data to an open TIFF file/stream.
            </summary>
      <param name="tile">The zero-based index of the tile to write.</param>
      <param name="buffer">The buffer with image data to be encoded and written.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which
            to begin reading bytes to be encoded and written.</param>
      <param name="count">The maximum number of tile bytes to be read from
            <paramref name="buffer" />.</param>
      <returns>The number of encoded and written bytes or <c>-1</c> if an error occurred.</returns>
      <remarks>
        <para>
          <b>WriteEncodedTile</b> encodes <paramref name="count" /> bytes of raw data from
            <paramref name="buffer" /> and append the result to the end of the specified tile. Note
            that the value of <paramref name="tile" /> is a "raw tile number". That is, the caller
            must take into account whether or not the data are organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ComputeTile(System.Int32,System.Int32,System.Int32,System.Int16)" /> automatically does this when converting an (x, y, z, plane)
            coordinate quadruple to a tile number.
            </para>
        <para>
            There must be space for the data. The function clamps individual writes to a tile to
            the tile size, but does not (and can not) check that multiple writes to the same tile
            were performed.
            </para>
        <para>
            A correct value for the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> tag must be setup before
            writing; <b>WriteEncodedTile</b> does not support automatically growing the image on
            each write (as <see cref="O:BitMiracle.LibTiff.Classic.Tiff.WriteScanline" /> does).
            </para>
        <para>
            The library writes encoded data using the native machine byte order. Correctly
            implemented TIFF readers are expected to do any necessary byte-swapping to correctly
            process image data with value of <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.BITSPERSAMPLE" /> tag greater
            than 8.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteRawTile(System.Int32,System.Byte[],System.Int32)">
      <summary>
            Writes a tile of raw data to an open TIFF file/stream.
            </summary>
      <overloads>Writes a tile of raw data to an open TIFF file/stream.</overloads>
      <param name="tile">The zero-based index of the tile to write.</param>
      <param name="buffer">The buffer with raw image data to be written.</param>
      <param name="count">The maximum number of tile bytes to be read from
            <paramref name="buffer" />.</param>
      <returns>
            The number of written bytes or <c>-1</c> if an error occurred.
            </returns>
      <remarks>
        <para>
          <b>WriteRawTile</b> appends <paramref name="count" /> bytes of raw data to the end of
            the specified tile. Note that the value of <paramref name="tile" /> is a "raw tile
            number". That is, the caller must take into account whether or not the data are
            organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ComputeTile(System.Int32,System.Int32,System.Int32,System.Int16)" /> automatically does this when converting an (x, y, z, plane)
            coordinate quadruple to a tile number.
            </para>
        <para>
            There must be space for the data. The function clamps individual writes to a tile to
            the tile size, but does not (and can not) check that multiple writes to the same tile
            were performed.
            </para>
        <para>
            A correct value for the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> tag must be setup before
            writing; <b>WriteRawTile</b> does not support automatically growing the image on
            each write (as <see cref="O:BitMiracle.LibTiff.Classic.Tiff.WriteScanline" /> does).
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.WriteRawTile(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a tile of raw data to an open TIFF file/stream.
            </summary>
      <param name="tile">The zero-based index of the tile to write.</param>
      <param name="buffer">The buffer with raw image data to be written.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which
            to begin reading bytes to be written.</param>
      <param name="count">The maximum number of tile bytes to be read from
            <paramref name="buffer" />.</param>
      <returns>The number of written bytes or <c>-1</c> if an error occurred.</returns>
      <remarks>
        <para>
          <b>WriteRawTile</b> appends <paramref name="count" /> bytes of raw data to the end of
            the specified tile. Note that the value of <paramref name="tile" /> is a "raw tile
            number". That is, the caller must take into account whether or not the data are
            organized in separate planes
            (<see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE).
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.ComputeTile(System.Int32,System.Int32,System.Int32,System.Int16)" /> automatically does this when converting an (x, y, z, plane)
            coordinate quadruple to a tile number.
            </para>
        <para>
            There must be space for the data. The function clamps individual writes to a tile to
            the tile size, but does not (and can not) check that multiple writes to the same tile
            were performed.
            </para>
        <para>
            A correct value for the <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.IMAGELENGTH" /> tag must be setup before
            writing; <b>WriteRawTile</b> does not support automatically growing the image on
            each write (as <see cref="O:BitMiracle.LibTiff.Classic.Tiff.WriteScanline" /> does).
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SetWriteOffset(System.Int64)">
      <summary>
            Sets the current write offset.
            </summary>
      <param name="offset">The write offset.</param>
      <remarks>This should only be used to set the offset to a known previous location
            (very carefully), or to 0 so that the next write gets appended to the end of the file.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.DataWidth(BitMiracle.LibTiff.Classic.TiffType)">
      <summary>
            Gets the number of bytes occupied by the item of given type.
            </summary>
      <param name="type">The type.</param>
      <returns>The number of bytes occupied by the <paramref name="type" /> or 0 if unknown
            data type is supplied.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SwabShort(System.Int16@)">
      <summary>
            Swaps the bytes in a single 16-bit item.
            </summary>
      <param name="value">The value to swap bytes in.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SwabLong(System.Int32@)">
      <summary>
            Swaps the bytes in a single 32-bit item.
            </summary>
      <param name="value">The value to swap bytes in.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SwabDouble(System.Double@)">
      <summary>
            Swaps the bytes in a single double-precision floating-point number.
            </summary>
      <param name="value">The value to swap bytes in.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SwabArrayOfShort(System.Int16[],System.Int32)">
      <summary>
            Swaps the bytes in specified number of values in the array of 16-bit items.
            </summary>
      <overloads>
            Swaps the bytes in specified number of values in the array of 16-bit items.
            </overloads>
      <param name="array">The array to swap bytes in.</param>
      <param name="count">The number of items to swap bytes in.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SwabArrayOfShort(System.Int16[],System.Int32,System.Int32)">
      <summary>
            Swaps the bytes in specified number of values in the array of 16-bit items starting at
            specified offset.
            </summary>
      <param name="array">The array to swap bytes in.</param>
      <param name="offset">The zero-based offset in <paramref name="array" /> at
            which to begin swapping bytes.</param>
      <param name="count">The number of items to swap bytes in.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SwabArrayOfTriples(System.Byte[],System.Int32)">
      <summary>
            Swaps the bytes in specified number of values in the array of triples (24-bit items).
            </summary>
      <overloads>
            Swaps the bytes in specified number of values in the array of triples (24-bit items).
            </overloads>
      <param name="array">The array to swap bytes in.</param>
      <param name="count">The number of items to swap bytes in.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SwabArrayOfTriples(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Swaps the bytes in specified number of values in the array of triples (24-bit items)
            starting at specified offset.
            </summary>
      <param name="array">The array to swap bytes in.</param>
      <param name="offset">The zero-based offset in <paramref name="array" /> at
            which to begin swapping bytes.</param>
      <param name="count">The number of items to swap bytes in.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SwabArrayOfLong(System.Int32[],System.Int32)">
      <summary>
            Swaps the bytes in specified number of values in the array of 32-bit items.
            </summary>
      <overloads>
            Swaps the bytes in specified number of values in the array of 32-bit items.
            </overloads>
      <param name="array">The array to swap bytes in.</param>
      <param name="count">The number of items to swap bytes in.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SwabArrayOfLong(System.Int32[],System.Int32,System.Int32)">
      <summary>
            Swaps the bytes in specified number of values in the array of 32-bit items
            starting at specified offset.
            </summary>
      <param name="array">The array to swap bytes in.</param>
      <param name="offset">The zero-based offset in <paramref name="array" /> at
            which to begin swapping bytes.</param>
      <param name="count">The number of items to swap bytes in.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SwabArrayOfDouble(System.Double[],System.Int32)">
      <summary>
            Swaps the bytes in specified number of values in the array of double-precision
            floating-point numbers.
            </summary>
      <overloads>
            Swaps the bytes in specified number of values in the array of double-precision
            floating-point numbers.
            </overloads>
      <param name="array">The array to swap bytes in.</param>
      <param name="count">The number of items to swap bytes in.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.SwabArrayOfDouble(System.Double[],System.Int32,System.Int32)">
      <summary>
            Swaps the bytes in specified number of values in the array of double-precision
            floating-point numbers starting at specified offset.
            </summary>
      <param name="array">The array to swap bytes in.</param>
      <param name="offset">The zero-based offset in <paramref name="array" /> at
            which to begin swapping bytes.</param>
      <param name="count">The number of items to swap bytes in.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReverseBits(System.Byte[],System.Int32)">
      <summary>
            Replaces specified number of bytes in <paramref name="buffer" /> with the
            equivalent bit-reversed bytes.
            </summary>
      <overloads>
            Replaces specified number of bytes in <paramref name="buffer" /> with the
            equivalent bit-reversed bytes.
            </overloads>
      <param name="buffer">The buffer to replace bytes in.</param>
      <param name="count">The number of bytes to process.</param>
      <remarks>
            This operation is performed with a lookup table, which can be retrieved using the
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetBitRevTable(System.Boolean)" /> method.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ReverseBits(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Replaces specified number of bytes in <paramref name="buffer" /> with the
            equivalent bit-reversed bytes starting at specified offset.
            </summary>
      <param name="buffer">The buffer to replace bytes in.</param>
      <param name="offset">The zero-based offset in <paramref name="buffer" /> at
            which to begin processing bytes.</param>
      <param name="count">The number of bytes to process.</param>
      <remarks>
            This operation is performed with a lookup table, which can be retrieved using the
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetBitRevTable(System.Boolean)" /> method.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.GetBitRevTable(System.Boolean)">
      <summary>
            Retrieves a bit reversal table.
            </summary>
      <param name="reversed">if set to <c>true</c> then bit reversal table will be
            retrieved; otherwise, the table that do not reverse bit values will be retrieved.</param>
      <returns>The bit reversal table.</returns>
      <remarks>If <paramref name="reversed" /> is <c>false</c> then the table that do not
            reverse bit values will be retrieved. It is a lookup table that can be used as an
            identity function; i.e. NoBitRevTable[n] == n.</remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ByteArrayToInts(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Converts a byte buffer into array of 32-bit values.
            </summary>
      <param name="buffer">The byte buffer.</param>
      <param name="offset">The zero-based offset in <paramref name="buffer" /> at
            which to begin converting bytes.</param>
      <param name="count">The number of bytes to convert.</param>
      <returns>The array of 32-bit values.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.IntsToByteArray(System.Int32[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Converts array of 32-bit values into array of bytes.
            </summary>
      <param name="source">The array of 32-bit values.</param>
      <param name="srcOffset">The zero-based offset in <paramref name="source" /> at
            which to begin converting bytes.</param>
      <param name="srcCount">The number of 32-bit values to convert.</param>
      <param name="bytes">The byte array to store converted values at.</param>
      <param name="offset">The zero-based offset in <paramref name="bytes" /> at
            which to begin storing converted values.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ByteArrayToShorts(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Converts a byte buffer into array of 16-bit values.
            </summary>
      <param name="buffer">The byte buffer.</param>
      <param name="offset">The zero-based offset in <paramref name="buffer" /> at
            which to begin converting bytes.</param>
      <param name="count">The number of bytes to convert.</param>
      <returns>The array of 16-bit values.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.Tiff.ShortsToByteArray(System.Int16[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>
            Converts array of 16-bit values into array of bytes.
            </summary>
      <param name="source">The array of 16-bit values.</param>
      <param name="srcOffset">The zero-based offset in <paramref name="source" /> at
            which to begin converting bytes.</param>
      <param name="srcCount">The number of 16-bit values to convert.</param>
      <param name="bytes">The byte array to store converted values at.</param>
      <param name="offset">The zero-based offset in <paramref name="bytes" /> at
            which to begin storing converted values.</param>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.Tiff.AssemblyVersion">
      <summary>
            Gets the version of the library's assembly.
            </summary>
      <value>The version of the library's assembly.</value>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.Tiff.TiffExtendProc">
      <summary>
            Delegate for LibTiff.Net extender method
            </summary>
      <param name="tif">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class.</param>
      <remarks>
        <para>Extender method is usually used for registering custom tags.</para>
        <para>To setup extender method that will be called upon creation of
            each instance of <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> object please use <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetTagExtender(BitMiracle.LibTiff.Classic.Tiff.TiffExtendProc)" />
            method.</para>
      </remarks>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.Tiff.FaxFillFunc">
      <summary>
            Delegate for a method used to image decoded spans.        
            </summary>
      <param name="buffer">The buffer to place decoded image data to.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at
            which to begin storing decoded bytes.</param>
      <param name="runs">The array of black and white run lengths (white then black).</param>
      <param name="thisRunOffset">The zero-based offset in <paramref name="runs" /> array at
            which current row's run begins.</param>
      <param name="nextRunOffset">The zero-based offset in <paramref name="runs" /> array at
            which next row's run begins.</param>
      <param name="width">The width in pixels of the row.</param>
      <remarks>
        <para>
            To override the default method used to image decoded spans please set
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.FAXFILLFUNC" /> tag with an instance of this delegate.</para>
        <para>
            Fill methods can assume the <paramref name="runs" /> array has room for at least
            <paramref name="width" /> runs and can overwrite data in the <paramref name="runs" />
            array as needed (e.g. to append zero runs to bring the count up to a nice multiple).
            </para>
      </remarks>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.jpeg_error_mgr">
      <summary>
            Contains simple error-reporting and trace-message routines.
            </summary>
      <remarks>This class is used by both the compression and decompression code.</remarks>
      <seealso href="41dc1a3b-0dea-4594-87d2-c213ab1049e1.htm" target="_self">Error handling</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.LibJpeg.Classic.jpeg_error_mgr" /> class.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.error_exit">
      <summary>
            Receives control for a fatal error.
            </summary>
      <remarks>This method calls <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.output_message">output_message</see> 
            and then throws an exception.</remarks>
      <seealso href="41dc1a3b-0dea-4594-87d2-c213ab1049e1.htm" target="_self">Error handling</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.emit_message(System.Int32)">
      <summary>
            Conditionally emit a trace or warning message.
            </summary>
      <param name="msg_level">The message severity level.<br />
            Values are:<br />
            -1: recoverable corrupt-data warning, may want to abort.<br />
            0: important advisory messages (always display to user).<br />
            1: first level of tracing detail.<br />
            2, 3, ...: successively more detailed tracing messages.
            </param>
      <remarks>The main reason for overriding this method would be to abort on warnings.
            This method calls <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.output_message">output_message</see> for message showing.<br />
            
            An application might override this method if it wanted to abort on 
            warnings or change the policy about which messages to display.
            </remarks>
      <seealso href="41dc1a3b-0dea-4594-87d2-c213ab1049e1.htm" target="_self">Error handling</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.output_message">
      <summary>
            Actual output of any JPEG message.
            </summary>
      <remarks>Override this to send messages somewhere other than Console. 
            Note that this method does not know how to generate a message, only where to send it.
            For extending a generation of messages see <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.format_message">format_message</see>.
            </remarks>
      <seealso href="41dc1a3b-0dea-4594-87d2-c213ab1049e1.htm" target="_self">Error handling</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.format_message">
      <summary>
            Constructs a readable error message string.
            </summary>
      <remarks>This method is called by <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.output_message">output_message</see>.
            Few applications should need to override this method. One possible reason for doing so is to 
            implement dynamic switching of error message language.</remarks>
      <returns>The formatted message</returns>
      <seealso href="41dc1a3b-0dea-4594-87d2-c213ab1049e1.htm" target="_self">Error handling</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.reset_error_mgr">
      <summary>
            Resets error manager to initial state.
            </summary>
      <remarks>This is called during compression startup to reset trace/error
            processing to default state. An application might possibly want to
            override this method if it has additional error processing state.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.GetMessageText(System.Int32)">
      <summary>
            Gets the actual message texts.
            </summary>
      <param name="code">The message code. See <see cref="T:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE" /> for details.</param>
      <returns>The message text associated with <c>code</c>.</returns>
      <remarks>It may be useful for an application to add its own message texts that are handled 
            by the same mechanism. You can override <c>GetMessageText</c> for this purpose. If you number 
            the addon messages beginning at 1000 or so, you won't have to worry about conflicts 
            with the library's built-in messages.
            </remarks>
      <seealso cref="T:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE" />
      <seealso href="41dc1a3b-0dea-4594-87d2-c213ab1049e1.htm" target="_self">Error handling</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.Trace_level">
      <summary>
            Gets or sets the maximum message level that will be displayed.
            </summary>
      <value>Values are:
            -1: recoverable corrupt-data warning, may want to abort.<br />
            0: important advisory messages (always display to user).<br />
            1: first level of tracing detail.<br />
            2, 3, ...: successively more detailed tracing messages.
            </value>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.emit_message(System.Int32)" />
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.Num_warnings">
      <summary>
            Gets the number of corrupt-data warnings.
            </summary>
      <value>The num_warnings.</value>
      <remarks>For recoverable corrupt-data errors, we emit a warning message, but keep going 
            unless <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.emit_message(System.Int32)">emit_message</see> chooses to abort. 
            <c>emit_message</c> should count warnings in <c>Num_warnings</c>. The surrounding application 
            can check for bad data by seeing if <c>Num_warnings</c> is nonzero at the end of processing.</remarks>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.jpeg_destination_mgr">
      <summary>
            Data destination object for compression.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_destination_mgr.init_destination">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_destination_mgr.empty_output_buffer">
      <summary>
            Empties output buffer.
            </summary>
      <returns>
        <c>true</c> if operation succeed; otherwise, <c>false</c></returns>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_destination_mgr.term_destination">
      <summary>
            Term_destinations this instance.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_destination_mgr.emit_byte(System.Int32)">
      <summary>
            Emits a byte.
            </summary>
      <param name="val">The byte value.</param>
      <returns>
        <c>true</c> if operation succeed; otherwise, <c>false</c></returns>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_destination_mgr.initInternalBuffer(System.Byte[],System.Int32)">
      <summary>
            Initializes the internal buffer.
            </summary>
      <param name="buffer">The buffer.</param>
      <param name="offset">The offset.</param>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_destination_mgr.freeInBuffer">
      <summary>
            Gets the number of free bytes in buffer.
            </summary>
      <value>The number of free bytes in buffer.</value>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.jpeg_source_mgr">
      <summary>
            Data source object for decompression.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_source_mgr.init_source">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_source_mgr.fill_input_buffer">
      <summary>
            Fills input buffer
            </summary>
      <returns>
        <c>true</c> if operation succeed; otherwise, <c>false</c></returns>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_source_mgr.initInternalBuffer(System.Byte[],System.Int32)">
      <summary>
            Initializes the internal buffer.
            </summary>
      <param name="buffer">The buffer.</param>
      <param name="size">The size.</param>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_source_mgr.skip_input_data(System.Int32)">
      <summary>
            Skip data - used to skip over a potentially large amount of
            uninteresting data (such as an APPn marker).
            </summary>
      <param name="num_bytes">The number of bytes to skip.</param>
      <remarks>Writers of suspendable-input applications must note that skip_input_data
            is not granted the right to give a suspension return.  If the skip extends
            beyond the data currently in the buffer, the buffer can be marked empty so
            that the next read will cause a fill_input_buffer call that can suspend.
            Arranging for additional bytes to be discarded before reloading the input
            buffer is the application writer's problem.</remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_source_mgr.resync_to_restart(BitMiracle.LibJpeg.Classic.jpeg_decompress_struct,System.Int32)">
      <summary>
            This is the default resync_to_restart method for data source 
            managers to use if they don't have any better approach.
            </summary>
      <param name="cinfo">An instance of <see cref="T:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct" /></param>
      <param name="desired">The desired</param>
      <returns>
        <c>false</c> if suspension is required.</returns>
      <remarks>That method assumes that no backtracking is possible. 
            Some data source managers may be able to back up, or may have 
            additional knowledge about the data which permits a more 
            intelligent recovery strategy; such managers would
            presumably supply their own resync method.<br /><br />
            
            read_restart_marker calls resync_to_restart if it finds a marker other than
            the restart marker it was expecting.  (This code is *not* used unless
            a nonzero restart interval has been declared.)  cinfo.unread_marker is
            the marker code actually found (might be anything, except 0 or FF).
            The desired restart marker number (0..7) is passed as a parameter.<br /><br />
            
            This routine is supposed to apply whatever error recovery strategy seems
            appropriate in order to position the input stream to the next data segment.
            Note that cinfo.unread_marker is treated as a marker appearing before
            the current data-source input point; usually it should be reset to zero
            before returning.<br /><br />
            
            This implementation is substantially constrained by wanting to treat the
            input as a data stream; this means we can't back up.  Therefore, we have
            only the following actions to work with:<br />
            1. Simply discard the marker and let the entropy decoder resume at next
            byte of file.<br />
            2. Read forward until we find another marker, discarding intervening
            data.  (In theory we could look ahead within the current bufferload,
            without having to discard data if we don't find the desired marker.
            This idea is not implemented here, in part because it makes behavior
            dependent on buffer size and chance buffer-boundary positions.)<br />
            3. Leave the marker unread (by failing to zero cinfo.unread_marker).
            This will cause the entropy decoder to process an empty data segment,
            inserting dummy zeroes, and then we will reprocess the marker.<br />
            
            #2 is appropriate if we think the desired marker lies ahead, while #3 is
            appropriate if the found marker is a future restart marker (indicating
            that we have missed the desired restart marker, probably because it got
            corrupted).<br />
            We apply #2 or #3 if the found marker is a restart marker no more than
            two counts behind or ahead of the expected one.  We also apply #2 if the
            found marker is not a legal JPEG marker code (it's certainly bogus data).
            If the found marker is a restart marker more than 2 counts away, we do #1
            (too much risk that the marker is erroneous; with luck we will be able to
            resync at some future point).<br />
            For any valid non-restart JPEG marker, we apply #3.  This keeps us from
            overrunning the end of a scan.  An implementation limited to single-scan
            files might find it better to apply #2 for markers other than EOI, since
            any other marker would have to be bogus data in that case.</remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_source_mgr.term_source">
      <summary>
            Terminate source - called by jpeg_finish_decompress
            after all data has been read.  Often a no-op.
            </summary>
      <remarks>NB: <b>not</b> called by jpeg_abort or jpeg_destroy; surrounding
            application must deal with any cleanup that should happen even
            for error exit.</remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_source_mgr.GetTwoBytes(System.Int32@)">
      <summary>
            Reads two bytes interpreted as an unsigned 16-bit integer.
            </summary>
      <param name="V">The result.</param>
      <returns>
        <c>true</c> if operation succeed; otherwise, <c>false</c></returns>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_source_mgr.GetByte(System.Int32@)">
      <summary>
            Read a byte into variable V.
            If must suspend, take the specified action (typically "return false").
            </summary>
      <param name="V">The result.</param>
      <returns>
        <c>true</c> if operation succeed; otherwise, <c>false</c></returns>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_source_mgr.GetBytes(System.Byte[],System.Int32)">
      <summary>
            Gets the bytes.
            </summary>
      <param name="dest">The destination.</param>
      <param name="amount">The amount.</param>
      <returns>The number of available bytes.</returns>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_source_mgr.MakeByteAvailable">
      <summary>
            Functions for fetching data from the data source module.
            </summary>
      <returns>
        <c>true</c> if operation succeed; otherwise, <c>false</c></returns>
      <remarks>At all times, cinfo.src.next_input_byte and .bytes_in_buffer reflect
            the current restart point; we update them only when we have reached a
            suitable place to restart if a suspension occurs.</remarks>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.DensityUnit">
      <summary>
            The unit of density.
            </summary>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Density_unit" />
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Density_unit" />
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.DensityUnit.Unknown">
      <summary>
            Unknown density
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.DensityUnit.DotsInch">
      <summary>
            Dots/inch
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.DensityUnit.DotsCm">
      <summary>
            Dots/cm
            </summary>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.JBLOCK">
      <summary>
            One block of coefficients.
            </summary>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.JBLOCK.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The index of required element.</param>
      <value>The required element.</value>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.JHUFF_TBL">
      <summary>
            Huffman coding table.
            </summary>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.JHUFF_TBL.Sent_table">
      <summary>
            Gets or sets a value indicating whether the table has been output to file.
            </summary>
      <value>It's initialized <c>false</c> when the table is created, and set 
            <c>true</c> when it's been output to the file. You could suppress output 
            of a table by setting this to <c>true</c>.
            </value>
      <remarks>This property is used only during compression.</remarks>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_suppress_tables(System.Boolean)" />
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.JpegConstants">
      <summary>
            Defines some JPEG constants.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.DCTSIZE">
      <summary>
            The basic DCT block is 8x8 samples
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.DCTSIZE2">
      <summary>
            DCTSIZE squared; the number of elements in a block. 
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.NUM_QUANT_TBLS">
      <summary>
            Quantization tables are numbered 0..3 
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.NUM_HUFF_TBLS">
      <summary>
            Huffman tables are numbered 0..3
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.MAX_COMPS_IN_SCAN">
      <summary>
            JPEG limit on the number of components in one scan.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.C_MAX_BLOCKS_IN_MCU">
      <summary>
            Compressor's limit on blocks per MCU.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.D_MAX_BLOCKS_IN_MCU">
      <summary>
            Decompressor's limit on blocks per MCU.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.MAX_SAMP_FACTOR">
      <summary>
            JPEG limit on sampling factors.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.MAX_COMPONENTS">
      <summary>
            Maximum number of color channels allowed in JPEG image.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.BITS_IN_JSAMPLE">
      <summary>
            The size of sample.
            </summary>
      <remarks>Are either:
            8 - for 8-bit sample values (the usual setting)<br />
            12 - for 12-bit sample values (not supported by this version)<br />
            Only 8 and 12 are legal data precisions for lossy JPEG according to the JPEG standard.
            Althought original IJG code claims it supports 12 bit images, our code does not support 
            anything except 8-bit images.</remarks>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.JPEG_MAX_DIMENSION">
      <summary>
            A tad under 64K to prevent overflows. 
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.MAXJSAMPLE">
      <summary>
            The maximum sample value.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.CENTERJSAMPLE">
      <summary>
            The medium sample value.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.RGB_RED">
      <summary>
            Offset of Red in an RGB scanline element. 
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.RGB_GREEN">
      <summary>
            Offset of Green in an RGB scanline element. 
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.RGB_BLUE">
      <summary>
            Offset of Blue in an RGB scanline element. 
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.RGB_PIXELSIZE">
      <summary>
            Bytes per RGB scanline element.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.HUFF_LOOKAHEAD">
      <summary>
            The number of bits of lookahead.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.JDCT_DEFAULT">
      <summary>
            DCT method used by default.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JpegConstants.JDCT_FASTEST">
      <summary>
            Fastest DCT method.
            </summary>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.jpeg_common_struct">
      <summary>Base class for both JPEG compressor and decompresor.</summary>
      <remarks>
            Routines that are to be used by both halves of the library are declared
            to receive an instance of this class. There are no actual instances of 
            <see cref="T:BitMiracle.LibJpeg.Classic.jpeg_common_struct" />, only of <see cref="T:BitMiracle.LibJpeg.Classic.jpeg_compress_struct" /> 
            and <see cref="T:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct" /></remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.#ctor">
      <summary>
            Base constructor.
            </summary>
      <seealso cref="T:BitMiracle.LibJpeg.Classic.jpeg_compress_struct" />
      <seealso cref="T:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct" />
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.#ctor(BitMiracle.LibJpeg.Classic.jpeg_error_mgr)">
      <summary>
            Base constructor.
            </summary>
      <param name="errorManager">The error manager.</param>
      <seealso cref="T:BitMiracle.LibJpeg.Classic.jpeg_compress_struct" />
      <seealso cref="T:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct" />
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.CreateSamplesArray(System.Int32,System.Int32)">
      <summary>
            Creates the array of samples.
            </summary>
      <param name="samplesPerRow">The number of samples in row.</param>
      <param name="numberOfRows">The number of rows.</param>
      <returns>The array of samples.</returns>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.CreateBlocksArray(System.Int32,System.Int32)">
      <summary>
            Creates the array of blocks.
            </summary>
      <param name="blocksPerRow">The number of blocks in row.</param>
      <param name="numberOfRows">The number of rows.</param>
      <returns>The array of blocks.</returns>
      <seealso cref="T:BitMiracle.LibJpeg.Classic.JBLOCK" />
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.AllocJpegSamples(System.Int32,System.Int32)">
      <summary>
            Creates 2-D sample array.
            </summary>
      <param name="samplesPerRow">The number of samples per row.</param>
      <param name="numberOfRows">The number of rows.</param>
      <returns>The array of samples.</returns>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.jpeg_abort">
      <summary>
            Abort processing of a JPEG compression or decompression operation,
            but don't destroy the object itself.
            
            Closing a data source or destination, if necessary, is the 
            application's responsibility.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.jpeg_destroy">
      <summary>
            Destruction of a JPEG object. 
            
            Closing a data source or destination, if necessary, is the 
            application's responsibility.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.ERREXIT(BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE)">
      <summary>
            Used for fatal errors (print message and exit).
            </summary>
      <param name="code">The message code.</param>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.ERREXIT(BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE,System.Object[])">
      <summary>
            Used for fatal errors (print message and exit).
            </summary>
      <param name="code">The message code.</param>
      <param name="args">The parameters of message.</param>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.ERREXIT(System.Int32,System.Object[])">
      <summary>
            Used for fatal errors (print message and exit).
            </summary>
      <param name="code">The message code.</param>
      <param name="args">The parameters of message.</param>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.WARNMS(BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE)">
      <summary>
            Used for non-fatal errors (we can keep going, but the data is probably corrupt).
            </summary>
      <param name="code">The message code.</param>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.WARNMS(BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE,System.Object[])">
      <summary>
            Used for non-fatal errors (we can keep going, but the data is probably corrupt).
            </summary>
      <param name="code">The message code.</param>
      <param name="args">The parameters of message.</param>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.WARNMS(System.Int32,System.Object[])">
      <summary>
            Used for non-fatal errors (we can keep going, but the data is probably corrupt).
            </summary>
      <param name="code">The message code.</param>
      <param name="args">The parameters of message.</param>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.TRACEMS(System.Int32,BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE)">
      <summary>
            Shows informational and debugging messages.
            </summary>
      <param name="lvl">See <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.emit_message(System.Int32)" /> for description.</param>
      <param name="code">The message code.</param>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.emit_message(System.Int32)" />
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.TRACEMS(System.Int32,BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE,System.Object[])">
      <summary>
            Shows informational and debugging messages.
            </summary>
      <param name="lvl">See <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.emit_message(System.Int32)" /> for description.</param>
      <param name="code">The message code.</param>
      <param name="args">The parameters of message.</param>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.emit_message(System.Int32)" />
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.TRACEMS(System.Int32,System.Int32,System.Object[])">
      <summary>
            Shows informational and debugging messages.
            </summary>
      <param name="lvl">See <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.emit_message(System.Int32)" /> for description.</param>
      <param name="code">The message code.</param>
      <param name="args">The parameters of message.</param>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_error_mgr.emit_message(System.Int32)" />
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_common_struct.IsDecompressor">
      <summary>
            Gets a value indicating whether this instance is Jpeg decompressor.
            </summary>
      <value>
        <c>true</c> if this is Jpeg decompressor; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_common_struct.Progress">
      <summary>
            Progress monitor.
            </summary>
      <value>The progress manager.</value>
      <remarks>Default value: <c>null</c>.</remarks>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_common_struct.Err">
      <summary>
            Error handler module.
            </summary>
      <value>The error manager.</value>
      <seealso href="41dc1a3b-0dea-4594-87d2-c213ab1049e1.htm" target="_self">Error handling</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_common_struct.Version">
      <summary>
            Gets the version of LibJpeg.
            </summary>
      <value>The version of LibJpeg.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_common_struct.Copyright">
      <summary>
            Gets the LibJpeg's copyright.
            </summary>
      <value>The copyright.</value>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.jpeg_component_info">
      <summary>
            Basic info about one component (color channel).
            </summary>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_component_info.Component_id">
      <summary>
            Identifier for this component (0..255)
            </summary>
      <value>The component ID.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_component_info.Component_index">
      <summary>
            Its index in SOF or <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Comp_info" />.
            </summary>
      <value>The component index.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_component_info.H_samp_factor">
      <summary>
            Horizontal sampling factor (1..4)
            </summary>
      <value>The horizontal sampling factor.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_component_info.V_samp_factor">
      <summary>
            Vertical sampling factor (1..4)
            </summary>
      <value>The vertical sampling factor.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_component_info.Quant_tbl_no">
      <summary>
            Quantization table selector (0..3)
            </summary>
      <value>The quantization table selector.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_component_info.Dc_tbl_no">
      <summary>
            DC entropy table selector (0..3)
            </summary>
      <value>The DC entropy table selector.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_component_info.Ac_tbl_no">
      <summary>
            AC entropy table selector (0..3)
            </summary>
      <value>The AC entropy table selector.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_component_info.Width_in_blocks">
      <summary>
            Gets or sets the width in blocks.
            </summary>
      <value>The width in blocks.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_component_info.Downsampled_width">
      <summary>
            Gets the downsampled width.
            </summary>
      <value>The downsampled width.</value>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.jpeg_compress_struct">
      <summary>
            JPEG compression routine.
            </summary>
      <seealso cref="T:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct" />
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.LibJpeg.Classic.jpeg_compress_struct" /> class.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.#ctor(BitMiracle.LibJpeg.Classic.jpeg_error_mgr)">
      <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.LibJpeg.Classic.jpeg_compress_struct" /> class.
            </summary>
      <param name="errorManager">The error manager.</param>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_abort_compress">
      <summary>
            Abort processing of a JPEG compression operation.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_suppress_tables(System.Boolean)">
      <summary>
            Forcibly suppress or un-suppress all quantization and Huffman tables.
            </summary>
      <remarks>Marks all currently defined tables as already written (if suppress)
            or not written (if !suppress). This will control whether they get 
            emitted by a subsequent <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_start_compress(System.Boolean)" /> call.<br />
            
            This routine is exported for use by applications that want to produce
            abbreviated JPEG datastreams.</remarks>
      <param name="suppress">if set to <c>true</c> then suppress tables; 
            otherwise unsuppress.</param>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_finish_compress">
      <summary>
            Finishes JPEG compression.
            </summary>
      <remarks>If a multipass operating mode was selected, this may do a great 
            deal of work including most of the actual output.</remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_marker(System.Int32,System.Byte[])">
      <summary>
            Write a special marker.
            </summary>
      <remarks>This is only recommended for writing COM or APPn markers. 
            Must be called after <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_start_compress(System.Boolean)" /> and before first call to 
            <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_scanlines(System.Byte[][],System.Int32)" /> or <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_raw_data(System.Byte[][][],System.Int32)" />.
            </remarks>
      <param name="marker">Specify the marker type parameter as <see cref="T:BitMiracle.LibJpeg.Classic.JPEG_MARKER" />.COM for COM or 
            <see cref="T:BitMiracle.LibJpeg.Classic.JPEG_MARKER" />.APP0 + n for APPn. (Actually, jpeg_write_marker will let you write any marker type, 
            but we don't recommend writing any other kinds of marker)</param>
      <param name="data">The data associated with the marker.</param>
      <seealso href="81c88818-a5d7-4550-9ce5-024a768f7b1e.htm" target="_self">Special markers</seealso>
      <seealso cref="T:BitMiracle.LibJpeg.Classic.JPEG_MARKER" />
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_m_header(System.Int32,System.Int32)">
      <summary>
            Writes special marker's header.
            </summary>
      <param name="marker">Special marker.</param>
      <param name="datalen">Length of data associated with the marker.</param>
      <remarks>After calling this method you need to call <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_m_byte(System.Byte)" />
            exactly the number of times given in the length parameter.<br />
            This method lets you empty the output buffer partway through a marker, which might be important when 
            using a suspending data destination module. In any case, if you are using a suspending destination, 
            you should flush its buffer after inserting any special markers.</remarks>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_m_byte(System.Byte)" />
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_marker(System.Int32,System.Byte[])" />
      <seealso href="81c88818-a5d7-4550-9ce5-024a768f7b1e.htm" target="_self">Special markers</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_m_byte(System.Byte)">
      <summary>
            Writes a byte of special marker's data.
            </summary>
      <param name="val">The byte of data.</param>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_m_header(System.Int32,System.Int32)" />
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_tables">
      <summary>
            Alternate compression function: just write an abbreviated table file.
            </summary>
      <remarks>Before calling this, all parameters and a data destination must be set up.<br />
            
            To produce a pair of files containing abbreviated tables and abbreviated
            image data, one would proceed as follows:<br /><c>Initialize JPEG object<br />
            Set JPEG parameters<br />
            Set destination to table file<br /><see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_tables">jpeg_write_tables();</see><br />
            Set destination to image file<br /><see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_start_compress(System.Boolean)">jpeg_start_compress(false);</see><br />
            Write data...<br /><see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_finish_compress">jpeg_finish_compress();</see><br /></c><br />
            
            jpeg_write_tables has the side effect of marking all tables written
            (same as <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_suppress_tables(System.Boolean)">jpeg_suppress_tables(true)</see>).
            Thus a subsequent <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_start_compress(System.Boolean)">jpeg_start_compress</see> 
            will not re-emit the tables unless it is passed <c>write_all_tables=true</c>.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_stdio_dest(System.IO.Stream)">
      <summary>
            Sets output stream.
            </summary>
      <param name="outfile">The output stream.</param>
      <remarks>The caller must have already opened the stream, and is responsible
            for closing it after finishing compression.</remarks>
      <seealso href="07136fd7-d482-48de-b88c-1a4b9658c69e.htm" target="_self">Compression details</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_defaults">
      <summary>
            Jpeg_set_defaultses this instance.
            </summary>
      <remarks>Uses only the input image's color space (property <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.In_color_space" />, 
            which must already be set in <see cref="T:BitMiracle.LibJpeg.Classic.jpeg_compress_struct" />). Many applications will only need 
            to use this routine and perhaps <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_quality(System.Int32,System.Boolean)" />.
            </remarks>
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_colorspace(BitMiracle.LibJpeg.Classic.J_COLOR_SPACE)">
      <summary>
            Set the JPEG colorspace (property <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Jpeg_color_space" />,
            and choose colorspace-dependent parameters appropriately.
            </summary>
      <param name="colorspace">The required colorspace.</param>
      <remarks>See <see href="c90654b9-f3f4-4319-80d1-979c73d84e76.htm" target="_self">Special color spaces</see>, 
            below, before using this. A large number of parameters, including all per-component parameters, 
            are set by this routine; if you want to twiddle individual parameters you should call 
            <c>jpeg_set_colorspace</c> before rather than after.</remarks>
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
      <seealso href="c90654b9-f3f4-4319-80d1-979c73d84e76.htm" target="_self">Special color spaces</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_default_colorspace">
      <summary>
            Select an appropriate JPEG colorspace based on <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.In_color_space" />,
            and calls <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_colorspace(BitMiracle.LibJpeg.Classic.J_COLOR_SPACE)" /></summary>
      <remarks>This is actually a subroutine of <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_defaults" />. 
            It's broken out in case you want to change just the colorspace-dependent JPEG parameters.</remarks>
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_quality(System.Int32,System.Boolean)">
      <summary>
            Constructs JPEG quantization tables appropriate for the indicated quality setting.
            </summary>
      <param name="quality">The quality value is expressed on the 0..100 scale recommended by IJG.</param>
      <param name="force_baseline">If <c>true</c>, then the quantization table entries are constrained 
            to the range 1..255 for full JPEG baseline compatibility. In the current implementation, 
            this only makes a difference for quality settings below 25, and it effectively prevents 
            very small/low quality files from being generated. The IJG decoder is capable of reading 
            the non-baseline files generated at low quality settings when <c>force_baseline</c> is <c>false</c>,
            but other decoders may not be.</param>
      <remarks>Note that the exact mapping from quality values to tables may change in future IJG releases 
            as more is learned about DCT quantization.</remarks>
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_linear_quality(System.Int32,System.Boolean)">
      <summary>
            Same as <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_quality(System.Int32,System.Boolean)" /> except that the generated tables are the 
            sample tables given in the JPEG specification section K.1, multiplied by 
            the specified scale factor.
            </summary>
      <param name="scale_factor">The scale_factor.</param>
      <param name="force_baseline">If <c>true</c>, then the quantization table entries are 
            constrained to the range 1..255 for full JPEG baseline compatibility. In the current 
            implementation, this only makes a difference for quality settings below 25, and it 
            effectively prevents very small/low quality files from being generated. The IJG decoder 
            is capable of reading the non-baseline files generated at low quality settings when 
            <c>force_baseline</c> is <c>false</c>, but other decoders may not be.</param>
      <remarks>Note that larger scale factors give lower quality. This entry point is 
            useful for conforming to the Adobe PostScript DCT conventions, but we do not 
            recommend linear scaling as a user-visible quality scale otherwise.
            </remarks>
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_add_quant_table(System.Int32,System.Int32[],System.Int32,System.Boolean)">
      <summary>
            Allows an arbitrary quantization table to be created.
            </summary>
      <param name="which_tbl">Indicates which table slot to fill.</param>
      <param name="basic_table">An array of 64 unsigned integers given in normal array order.
            These values are multiplied by <c>scale_factor/100</c> and then clamped to the range 1..65535 
            (or to 1..255 if <c>force_baseline</c> is <c>true</c>).<br />
            The basic table should be given in JPEG zigzag order.
            </param>
      <param name="scale_factor">Multiplier for values in <c>basic_table</c>.</param>
      <param name="force_baseline">Defines range of values in <c>basic_table</c>. 
            If <c>true</c> - 1..255, otherwise - 1..65535.</param>
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_quality_scaling(System.Int32)">
      <summary>
            Converts a value on the IJG-recommended quality scale to a linear scaling percentage.
            </summary>
      <param name="quality">The IJG-recommended quality scale. Should be 0 (terrible) to 100 (very good).</param>
      <returns>The linear scaling percentage.</returns>
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_simple_progression">
      <summary>
            Generates a default scan script for writing a progressive-JPEG file.
            </summary>
      <remarks>This is the recommended method of creating a progressive file, unless you want 
            to make a custom scan sequence. You must ensure that the JPEG color space is 
            set correctly before calling this routine.</remarks>
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_start_compress(System.Boolean)">
      <summary>
            Starts JPEG compression.
            </summary>
      <param name="write_all_tables">Write or not write all quantization and Huffman tables.</param>
      <remarks>Before calling this, all parameters and a data destination must be set up.</remarks>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_suppress_tables(System.Boolean)" />
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_tables" />
      <seealso href="07136fd7-d482-48de-b88c-1a4b9658c69e.htm" target="_self">Compression details</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_scanlines(System.Byte[][],System.Int32)">
      <summary>
            Write some scanlines of data to the JPEG compressor.
            </summary>
      <param name="scanlines">The array of scanlines.</param>
      <param name="num_lines">The number of scanlines for writing.</param>
      <returns>The return value will be the number of lines actually written.<br />
            This should be less than the supplied <c>num_lines</c> only in case that 
            the data destination module has requested suspension of the compressor, 
            or if more than image_height scanlines are passed in.
            </returns>
      <remarks>We warn about excess calls to <c>jpeg_write_scanlines()</c> since this likely 
            signals an application programmer error. However, excess scanlines passed in the last 
            valid call are "silently" ignored, so that the application need not adjust <c>num_lines</c>
            for end-of-image when using a multiple-scanline buffer.</remarks>
      <seealso href="07136fd7-d482-48de-b88c-1a4b9658c69e.htm" target="_self">Compression details</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_raw_data(System.Byte[][][],System.Int32)">
      <summary>
            Alternate entry point to write raw data.
            </summary>
      <param name="data">The raw data.</param>
      <param name="num_lines">The number of scanlines for writing.</param>
      <returns>The number of lines actually written.</returns>
      <remarks>Processes exactly one iMCU row per call, unless suspended.
            Replaces <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_scanlines(System.Byte[][],System.Int32)" /> when writing raw downsampled data.</remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_coefficients(BitMiracle.LibJpeg.Classic.jvirt_array{BitMiracle.LibJpeg.Classic.JBLOCK}[])">
      <summary>
            Compression initialization for writing raw-coefficient data. Useful for lossless transcoding.
            </summary>
      <param name="coef_arrays">The virtual arrays need not be filled or even realized at the time 
            <c>jpeg_write_coefficients</c> is called; indeed, the virtual arrays typically will be realized 
            during this routine and filled afterwards.
            </param>
      <remarks>Before calling this, all parameters and a data destination must be set up.
            Call <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_finish_compress" /> to actually write the data.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.initialize">
      <summary>
            Initialization of a JPEG compression object
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jinit_compress_master">
      <summary>
            Master selection of compression modules.
            This is done once at the start of processing an image.  We determine
            which modules will be used and give them appropriate initialization calls.
            This routine is in charge of selecting the modules to be executed and
            making an initialization call to each one.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jinit_c_master_control(System.Boolean)">
      <summary>
            Initialize master compression control.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jinit_c_main_controller(System.Boolean)">
      <summary>
            Initialize main buffer controller.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.transencode_master_selection(BitMiracle.LibJpeg.Classic.jvirt_array{BitMiracle.LibJpeg.Classic.JBLOCK}[])">
      <summary>
            Master selection of compression modules for transcoding.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.initial_setup">
      <summary>
            Do computations that are needed before master selection phase
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.validate_script">
      <summary>
            Verify that the scan script in scan_info[] is valid; 
            also determine whether it uses progressive JPEG, and set progressive_mode.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.std_huff_tables">
      <summary>
            Set up the standard Huffman tables (cf. JPEG standard section K.3)
            
            IMPORTANT: these are only valid for 8-bit data precision!
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.add_huff_table(BitMiracle.LibJpeg.Classic.JHUFF_TBL@,System.Byte[],System.Byte[])">
      <summary>
            Define a Huffman table
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.fill_a_scan(System.Int32@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Support routine: generate one scan for specified component
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.fill_dc_scans(System.Int32@,System.Int32,System.Int32,System.Int32)">
      <summary>
            Support routine: generate interleaved DC scan if possible, else N scans
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.fill_scans(System.Int32@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Support routine: generate one scan for each component
            </summary>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.IsDecompressor">
      <summary>
            Retrieves <c>false</c> because this is not decompressor.
            </summary>
      <value>
        <c>false</c>
      </value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Dest">
      <summary>
            Gets or sets the destination for compressed data
            </summary>
      <value>The destination for compressed data.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Image_width">
      <summary>
            Gets or sets the width of image, in pixels.
            </summary>
      <value>The width of image.</value>
      <seealso href="07136fd7-d482-48de-b88c-1a4b9658c69e.htm" target="_self">Compression details</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Image_height">
      <summary>
            Gets or sets the height of image, in pixels.
            </summary>
      <value>The height of image.</value>
      <seealso href="07136fd7-d482-48de-b88c-1a4b9658c69e.htm" target="_self">Compression details</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Input_components">
      <summary>
            Gets or sets the number of color channels (components per pixel)
            </summary>
      <value>The number of color channels.</value>
      <seealso href="07136fd7-d482-48de-b88c-1a4b9658c69e.htm" target="_self">Compression details</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.In_color_space">
      <summary>
            Gets or sets the color space of source image.
            </summary>
      <value>The color space.</value>
      <seealso href="07136fd7-d482-48de-b88c-1a4b9658c69e.htm" target="_self">Compression details</seealso>
      <seealso href="c90654b9-f3f4-4319-80d1-979c73d84e76.htm" target="_self">Special color spaces</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Data_precision">
      <summary>
            Gets or sets the number of bits of precision in image data.
            </summary>
      <remarks>Default value: 8<br />
            The number of bits.
            </remarks>
      <value>The data precision.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Num_components">
      <summary>
            Gets or sets the number of color components for JPEG color space.
            </summary>
      <value>The number of color components for JPEG color space.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Jpeg_color_space">
      <summary>
            Gets or sets the JPEG color space.
            </summary>
      <remarks>We recommend to use <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_colorspace(BitMiracle.LibJpeg.Classic.J_COLOR_SPACE)" /> if you want to change this.</remarks>
      <value>The JPEG color space.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Raw_data_in">
      <summary>
            Gets or sets a value indicating whether you will be supplying raw data.
            </summary>
      <remarks>Default value: <c>false</c></remarks>
      <value>
        <c>true</c> if you will be supplying raw data; otherwise, <c>false</c>.</value>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_raw_data(System.Byte[][][],System.Int32)" />
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Optimize_coding">
      <summary>
            Gets or sets a value indicating a way of using Huffman coding tables.
            </summary>
      <remarks>When this is <c>true</c>, you need not supply Huffman tables at all, and any you do supply will be overwritten.</remarks>
      <value>
        <c>true</c> causes the compressor to compute optimal Huffman coding tables 
            for the image. This requires an extra pass over the data and therefore costs a good 
            deal of space and time. The default is <c>false</c>, which tells the compressor to use the 
            supplied or default Huffman tables. In most cases optimal tables save only a few 
            percent of file size compared to the default tables.</value>
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.CCIR601_sampling">
      <summary>
            Gets or sets a value indicating whether first samples are cosited.
            </summary>
      <value>
        <c>true</c> if first samples are cosited; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Smoothing_factor">
      <summary>
            Gets or sets the coefficient of image smoothing.
            </summary>
      <remarks>Default value: 0<br />
            If non-zero, the input image is smoothed; the value should be 1 for minimal smoothing 
            to 100 for maximum smoothing.</remarks>
      <value>The coefficient of image smoothing.</value>
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Dct_method">
      <summary>
            Gets or sets the algorithm used for the DCT step.
            </summary>
      <value>The DCT algorithm.</value>
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Restart_interval">
      <summary>
            Gets or sets the exact interval in MCU blocks.
            </summary>
      <remarks>Default value: 0<br />
            One restart marker per MCU row is often a good choice. The overhead of restart markers 
            is higher in grayscale JPEG files than in color files, and MUCH higher in progressive JPEGs. 
            If you use restarts, you may want to use larger intervals in those cases.</remarks>
      <value>The restart interval.</value>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Restart_in_rows" />
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Restart_in_rows">
      <summary>
            Gets or sets the interval in MCU rows.
            </summary>
      <remarks>Default value: 0<br />
            If Restart_in_rows is not 0, then <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Restart_interval" /> is set 
            after the image width in MCUs is computed.<br />
            One restart marker per MCU row is often a good choice. 
            The overhead of restart markers is higher in grayscale JPEG files than in color files, and MUCH higher in progressive JPEGs. If you use restarts, you may want to use larger intervals in those cases.
            </remarks>
      <value>The restart interval in MCU rows.</value>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Restart_interval" />
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Write_JFIF_header">
      <summary>
            Gets or sets a value indicating whether the JFIF APP0 marker is emitted.
            </summary>
      <remarks>
        <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_defaults" /> and 
            <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_colorspace(BitMiracle.LibJpeg.Classic.J_COLOR_SPACE)" /> set this <c>true</c> 
            if a JFIF-legal JPEG color space (i.e., YCbCr or grayscale) is selected, otherwise <c>false</c>.</remarks>
      <value>
        <c>true</c> if JFIF APP0 marker is emitted; otherwise, <c>false</c>.</value>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.JFIF_major_version" />
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.JFIF_major_version">
      <summary>
            Gets or sets the version number to be written into the JFIF marker.
            </summary>
      <remarks>
        <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_defaults" /> initializes the version to 
            1.01 (major=minor=1). You should set it to 1.02 (major=1, minor=2) if you plan to write any 
            JFIF 1.02 extension markers.</remarks>
      <value>The version number to be written into the JFIF marker.</value>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.JFIF_minor_version" />
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Write_JFIF_header" />
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.JFIF_minor_version">
      <summary>
            Gets or sets the version number to be written into the JFIF marker.
            </summary>
      <remarks>
        <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_defaults" /> initializes the version to 
            1.01 (major=minor=1). You should set it to 1.02 (major=1, minor=2) if you plan to write any 
            JFIF 1.02 extension markers.</remarks>
      <value>The version number to be written into the JFIF marker.</value>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.JFIF_major_version" />
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Write_JFIF_header" />
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Density_unit">
      <summary>
            Gets or sets the resolution information to be written into the JFIF marker; not used otherwise.
            </summary>
      <remarks>Default value: <see cref="F:BitMiracle.LibJpeg.Classic.DensityUnit.Unknown" /><br />
            The pixel aspect ratio is defined by 
            <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.X_density" />/<see cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Y_density" /> 
            even when Density_unit is <see cref="F:BitMiracle.LibJpeg.Classic.DensityUnit.Unknown">Unknown</see>.</remarks>
      <value>The density unit.</value>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.X_density" />
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Y_density" />
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.X_density">
      <summary>
            Gets or sets the horizontal component of pixel ratio.
            </summary>
      <remarks>Default value: 1</remarks>
      <value>The horizontal density.</value>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Density_unit" />
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Y_density" />
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Y_density">
      <summary>
            Gets or sets the vertical component of pixel ratio.
            </summary>
      <remarks>Default value: 1</remarks>
      <value>The vertical density.</value>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Density_unit" />
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.X_density" />
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Write_Adobe_marker">
      <summary>
            Gets or sets a value indicating whether to emit Adobe APP14 marker.
            </summary>
      <remarks>
        <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_defaults" /> and <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_set_colorspace(BitMiracle.LibJpeg.Classic.J_COLOR_SPACE)" /> 
            set this <c>true</c> if JPEG color space RGB, CMYK, or YCCK is selected, otherwise <c>false</c>. 
            It is generally a bad idea to set both <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Write_JFIF_header" /> and 
            <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Write_Adobe_marker" />. 
            In fact, you probably shouldn't change the default settings at all - the default behavior ensures that the JPEG file's 
            color space can be recognized by the decoder.</remarks>
      <value>If <c>true</c> an Adobe APP14 marker is emitted; <c>false</c>, otherwise.</value>
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Max_v_samp_factor">
      <summary>
            Gets the largest vertical sample factor.
            </summary>
      <value>The largest vertical sample factor.</value>
      <seealso href="ce3f6712-3633-4a58-af07-626a4fba9ae4.htm" target="_self">Compression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Component_info">
      <summary>
            Gets the components that appears in SOF.
            </summary>
      <value>The component info array.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Quant_tbl_ptrs">
      <summary>
            Gets the coefficient quantization tables.
            </summary>
      <value>The coefficient quantization tables or null if not defined.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Dc_huff_tbl_ptrs">
      <summary>
            Gets the Huffman coding tables.
            </summary>
      <value>The Huffman coding tables or null if not defined.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Ac_huff_tbl_ptrs">
      <summary>
            Gets the Huffman coding tables.
            </summary>
      <value>The Huffman coding tables or null if not defined.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Next_scanline">
      <summary>
            Gets the index of next scanline to be written to <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_scanlines(System.Byte[][],System.Int32)" />.
            </summary>
      <remarks>Application may use this to control its processing loop, 
            e.g., "while (Next_scanline &lt; Image_height)"</remarks>
      <value>Range: from 0 to (Image_height - 1)</value>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_write_scanlines(System.Byte[][],System.Int32)" />
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct">
      <summary>
            JPEG decompression routine.
            </summary>
      <seealso cref="T:BitMiracle.LibJpeg.Classic.jpeg_compress_struct" />
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct" /> class.
            </summary>
      <seealso cref="T:BitMiracle.LibJpeg.Classic.jpeg_compress_struct" />
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.#ctor(BitMiracle.LibJpeg.Classic.jpeg_error_mgr)">
      <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct" /> class.
            </summary>
      <param name="errorManager">The error manager.</param>
      <seealso cref="T:BitMiracle.LibJpeg.Classic.jpeg_compress_struct" />
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_stdio_src(System.IO.Stream)">
      <summary>
            Sets input stream.
            </summary>
      <param name="infile">The input stream.</param>
      <remarks>
            The caller must have already opened the stream, and is responsible
            for closing it after finishing decompression.
            </remarks>
      <seealso href="9d052723-a7f9-42de-8747-0bd9896f8157.htm" target="_self">Decompression details</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_header(System.Boolean)">
      <summary>
            Decompression startup: this will read the source datastream header markers, up to the beginning of the compressed data proper.
            </summary>
      <param name="require_image">Read a description of <b>Return Value</b>.</param>
      <returns>
            If you pass <c>require_image=true</c> (normal case), you need not check for a
            <see cref="F:BitMiracle.LibJpeg.Classic.ReadResult.JPEG_HEADER_TABLES_ONLY" /> return code; an abbreviated file will cause
            an error exit. <see cref="F:BitMiracle.LibJpeg.Classic.ReadResult.JPEG_SUSPENDED" /> is only possible if you use a data source
            module that can give a suspension return.<br /><br />
            
            This method will read as far as the first SOS marker (ie, actual start of compressed data),
            and will save all tables and parameters in the JPEG object. It will also initialize the
            decompression parameters to default values, and finally return <see cref="F:BitMiracle.LibJpeg.Classic.ReadResult.JPEG_HEADER_OK" />.
            On return, the application may adjust the decompression parameters and then call
            <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress" />. (Or, if the application only wanted to
            determine the image parameters, the data need not be decompressed. In that case, call
            <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.jpeg_abort" /> to release any temporary space.)<br /><br />
            
            If an abbreviated (tables only) datastream is presented, the routine will return
            <see cref="F:BitMiracle.LibJpeg.Classic.ReadResult.JPEG_HEADER_TABLES_ONLY" /> upon reaching EOI. The application may then re-use
            the JPEG object to read the abbreviated image datastream(s). It is unnecessary (but OK) to call
            <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.jpeg_abort">jpeg_abort</see> in this case.
            The <see cref="F:BitMiracle.LibJpeg.Classic.ReadResult.JPEG_SUSPENDED" /> return code only occurs if the data source module
            requests suspension of the decompressor. In this case the application should load more source
            data and then re-call <c>jpeg_read_header</c> to resume processing.<br /><br />
            
            If a non-suspending data source is used and <c>require_image</c> is <c>true</c>,
            then the return code need not be inspected since only <see cref="F:BitMiracle.LibJpeg.Classic.ReadResult.JPEG_HEADER_OK" /> is possible.
            </returns>
      <remarks>Need only initialize JPEG object and supply a data source before calling.<br />
            On return, the image dimensions and other info have been stored in the JPEG object.
            The application may wish to consult this information before selecting decompression parameters.<br />
            This routine is now just a front end to <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_consume_input" />, with some extra error checking.
            </remarks>
      <seealso href="9d052723-a7f9-42de-8747-0bd9896f8157.htm" target="_self">Decompression details</seealso>
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress">
      <summary>
            Decompression initialization.
            </summary>
      <returns>Returns <c>false</c> if suspended. The return value need be inspected 
            only if a suspending data source is used.
            </returns>
      <remarks>
        <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_header(System.Boolean)">jpeg_read_header</see> must be completed before calling this.<br />
            
            If a multipass operating mode was selected, this will do all but the last pass, and thus may take a great deal of time.
            </remarks>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_finish_decompress" />
      <seealso href="9d052723-a7f9-42de-8747-0bd9896f8157.htm" target="_self">Decompression details</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_scanlines(System.Byte[][],System.Int32)">
      <summary>
            Read some scanlines of data from the JPEG decompressor.
            </summary>
      <param name="scanlines">Buffer for filling.</param>
      <param name="max_lines">Required number of lines.</param>
      <returns>The return value will be the number of lines actually read. 
            This may be less than the number requested in several cases, including 
            bottom of image, data source suspension, and operating modes that emit multiple scanlines at a time.
            </returns>
      <remarks>We warn about excess calls to <c>jpeg_read_scanlines</c> since this likely signals an 
            application programmer error. However, an oversize buffer <c>(max_lines &gt; scanlines remaining)</c> 
            is not an error.
            </remarks>
      <seealso href="9d052723-a7f9-42de-8747-0bd9896f8157.htm" target="_self">Decompression details</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_finish_decompress">
      <summary>
            Finish JPEG decompression.
            </summary>
      <returns>Returns <c>false</c> if suspended. The return value need be inspected 
            only if a suspending data source is used.
            </returns>
      <remarks>This will normally just verify the file trailer and release temp storage.</remarks>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress" />
      <seealso href="9d052723-a7f9-42de-8747-0bd9896f8157.htm" target="_self">Decompression details</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_raw_data(System.Byte[][][],System.Int32)">
      <summary>
            Alternate entry point to read raw data.
            </summary>
      <param name="data">The raw data.</param>
      <param name="max_lines">The number of scanlines for reading.</param>
      <returns>The number of lines actually read.</returns>
      <remarks>Replaces <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_scanlines(System.Byte[][],System.Int32)">jpeg_read_scanlines</see> 
            when reading raw downsampled data. Processes exactly one iMCU row per call, unless suspended.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_has_multiple_scans">
      <summary>
            Is there more than one scan?
            </summary>
      <returns>
        <c>true</c> if image has more than one scan; otherwise, <c>false</c></returns>
      <remarks>If you are concerned about maximum performance on baseline JPEG files,
            you should use <see href="6dba59c5-d32e-4dfc-87fe-f9eff7004146.htm" target="_self">buffered-image mode</see> only
            when the incoming file actually has multiple scans. This can be tested by calling this method.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_output(System.Int32)">
      <summary>
            Initialize for an output pass in <see href="6dba59c5-d32e-4dfc-87fe-f9eff7004146.htm" target="_self">buffered-image mode</see>.
            </summary>
      <param name="scan_number">Indicates which scan of the input file is to be displayed; 
            the scans are numbered starting at 1 for this purpose.</param>
      <returns>
        <c>true</c> if done; <c>false</c> if suspended</returns>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_finish_output" />
      <seealso href="6dba59c5-d32e-4dfc-87fe-f9eff7004146.htm" target="_self">Buffered-image mode</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_finish_output">
      <summary>
            Finish up after an output pass in <see href="6dba59c5-d32e-4dfc-87fe-f9eff7004146.htm" target="_self">buffered-image mode</see>.
            </summary>
      <returns>Returns <c>false</c> if suspended. The return value need be inspected only if a suspending data source is used.</returns>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_output(System.Int32)" />
      <seealso href="6dba59c5-d32e-4dfc-87fe-f9eff7004146.htm" target="_self">Buffered-image mode</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_input_complete">
      <summary>
            Indicates if we have finished reading the input file.
            </summary>
      <returns>
        <c>true</c> if we have finished reading the input file.</returns>
      <seealso href="6dba59c5-d32e-4dfc-87fe-f9eff7004146.htm" target="_self">Buffered-image mode</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_consume_input">
      <summary>
            Consume data in advance of what the decompressor requires.
            </summary>
      <returns>The result of data consumption.</returns>
      <remarks>This routine can be called at any time after initializing the JPEG object.
            It reads some additional data and returns when one of the indicated significant events
            occurs. If called after the EOI marker is reached, it will immediately return
            <see cref="F:BitMiracle.LibJpeg.Classic.ReadResult.JPEG_REACHED_EOI" /> without attempting to read more data.</remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_calc_output_dimensions">
      <summary>
            Pre-calculate output image dimensions and related values for current decompression parameters.
            </summary>
      <remarks>This is allowed for possible use by application. Hence it mustn't do anything 
            that can't be done twice. Also note that it may be called before the master module is initialized!
            </remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_coefficients">
      <summary>
            Read or write the raw DCT coefficient arrays from a JPEG file (useful for lossless transcoding).
            </summary>
      <returns>Returns <c>null</c> if suspended. This case need be checked only 
            if a suspending data source is used.
            </returns>
      <remarks>
        <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_header(System.Boolean)">jpeg_read_header</see> must be completed before calling this.<br />
            
            The entire image is read into a set of virtual coefficient-block arrays, one per component.
            The return value is an array of virtual-array descriptors.<br />
            
            An alternative usage is to simply obtain access to the coefficient arrays during a 
            <see href="6dba59c5-d32e-4dfc-87fe-f9eff7004146.htm" target="_self">buffered-image mode</see> decompression operation. This is allowed after any 
            <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_finish_output">jpeg_finish_output</see> call. The arrays can be accessed 
            until <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_finish_decompress">jpeg_finish_decompress</see> is called. 
            Note that any call to the library may reposition the arrays, 
            so don't rely on <see cref="M:BitMiracle.LibJpeg.Classic.jvirt_array`1.Access(System.Int32,System.Int32)" /> results to stay valid across library calls.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_copy_critical_parameters(BitMiracle.LibJpeg.Classic.jpeg_compress_struct)">
      <summary>
            Initializes the compression object with default parameters, then copy from the source object 
            all parameters needed for lossless transcoding.
            </summary>
      <param name="dstinfo">Target JPEG compression object.</param>
      <remarks>Parameters that can be varied without loss (such as scan script and 
            Huffman optimization) are left in their default states.</remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_abort_decompress">
      <summary>
            Aborts processing of a JPEG decompression operation.
            </summary>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.jpeg_abort" />
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_set_marker_processor(System.Int32,BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_marker_parser_method)">
      <summary>
            Sets processor for special marker.
            </summary>
      <param name="marker_code">The marker code.</param>
      <param name="routine">The processor.</param>
      <remarks>Allows you to supply your own routine to process 
            COM and/or APPn markers on-the-fly as they are read.
            </remarks>
      <seealso href="81c88818-a5d7-4550-9ce5-024a768f7b1e.htm" target="_self">Special markers</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_save_markers(System.Int32,System.Int32)">
      <summary>
            Control saving of COM and APPn markers into <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Marker_list">Marker_list</see>.
            </summary>
      <param name="marker_code">The marker type to save (see JPEG_MARKER enumeration).<br />
            To arrange to save all the special marker types, you need to call this 
            routine 17 times, for COM and APP0-APP15 markers.</param>
      <param name="length_limit">If the incoming marker is longer than <c>length_limit</c> data bytes, 
            only <c>length_limit</c> bytes will be saved; this parameter allows you to avoid chewing up memory 
            when you only need to see the first few bytes of a potentially large marker. If you want to save 
            all the data, set <c>length_limit</c> to 0xFFFF; that is enough since marker lengths are only 16 bits. 
            As a special case, setting <c>length_limit</c> to 0 prevents that marker type from being saved at all. 
            (That is the default behavior, in fact.)
            </param>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Marker_list" />
      <seealso href="81c88818-a5d7-4550-9ce5-024a768f7b1e.htm" target="_self">Special markers</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.use_merged_upsample">
      <summary>
            Determine whether merged upsample/color conversion should be used.
            CRUCIAL: this must match the actual capabilities of merged upsampler!
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.initialize">
      <summary>
            Initialization of JPEG compression objects.
            The error manager must already be set up (in case memory manager fails).
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.transdecode_master_selection">
      <summary>
            Master selection of decompression modules for transcoding (that is, reading 
            raw DCT coefficient arrays from an input JPEG file.)
            This substitutes for initialization of the full decompressor.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.output_pass_setup">
      <summary>
            Set up for an output pass, and perform any dummy pass(es) needed.
            Common subroutine for jpeg_start_decompress and jpeg_start_output.
            Entry: global_state = DSTATE_PRESCAN only if previously suspended.
            Exit: If done, returns true and sets global_state for proper output mode.
                  If suspended, returns false and sets global_state = DSTATE_PRESCAN.
            </summary>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.default_decompress_parms">
      <summary>
            Set default decompression parameters.
            </summary>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.IsDecompressor">
      <summary>
            Retrieves <c>true</c> because this is a decompressor.
            </summary>
      <value>
        <c>true</c>
      </value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Src">
      <summary>
            Gets or sets the source for decompression.
            </summary>
      <value>The source for decompression.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Image_width">
      <summary>
            Gets the width of image, set by <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_header(System.Boolean)" /></summary>
      <value>The width of image.</value>
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Image_height">
      <summary>
            Gets the height of image, set by <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_header(System.Boolean)" /></summary>
      <value>The height of image.</value>
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Num_components">
      <summary>
            Gets the number of color components in JPEG image.
            </summary>
      <value>The number of color components.</value>
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Jpeg_color_space">
      <summary>
            Gets or sets the colorspace of JPEG image.
            </summary>
      <value>The colorspace of JPEG image.</value>
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Marker_list">
      <summary>
            Gets the list of loaded special markers.
            </summary>
      <remarks>All the special markers in the file appear in this list, in order of 
            their occurrence in the file (but omitting any markers of types you didn't ask for)
            </remarks>
      <value>The list of loaded special markers.</value>
      <seealso href="81c88818-a5d7-4550-9ce5-024a768f7b1e.htm" target="_self">Special markers</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Out_color_space">
      <summary>
            Gets or sets the output color space.
            </summary>
      <value>The output color space.</value>
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Scale_num">
      <summary>
            Gets or sets the numerator of the fraction of image scaling.
            </summary>
      <value>Scale the image by the fraction Scale_num/<see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Scale_denom">Scale_denom</see>. 
            Default is 1/1, or no scaling. Currently, the only supported scaling ratios are 1/1, 1/2, 1/4, and 1/8.
            (The library design allows for arbitrary scaling ratios but this is not likely to be implemented any time soon.)
            </value>
      <remarks>Smaller scaling ratios permit significantly faster decoding since fewer pixels 
            need to be processed and a simpler <see cref="T:BitMiracle.LibJpeg.Classic.J_DCT_METHOD">DCT method</see> can be used.</remarks>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Scale_denom" />
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Scale_denom">
      <summary>
            Gets or sets the denominator of the fraction of image scaling.
            </summary>
      <value>Scale the image by the fraction <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Scale_num">Scale_num</see>/Scale_denom. 
            Default is 1/1, or no scaling. Currently, the only supported scaling ratios are 1/1, 1/2, 1/4, and 1/8.
            (The library design allows for arbitrary scaling ratios but this is not likely to be implemented any time soon.)
            </value>
      <remarks>Smaller scaling ratios permit significantly faster decoding since fewer pixels 
            need to be processed and a simpler <see cref="T:BitMiracle.LibJpeg.Classic.J_DCT_METHOD">DCT method</see> can be used.</remarks>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Scale_num" />
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Buffered_image">
      <summary>
            Gets or sets a value indicating whether to use buffered-image mode.
            </summary>
      <value>
        <c>true</c> if buffered-image mode is turned on; otherwise, <c>false</c>.</value>
      <seealso href="6dba59c5-d32e-4dfc-87fe-f9eff7004146.htm" target="_self">Buffered-image mode</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Raw_data_out">
      <summary>
            Enable or disable raw data output.
            </summary>
      <value>
        <c>true</c> if raw data output is enabled; otherwise, <c>false</c>.</value>
      <remarks>Default value: <c>false</c><br />
            Set this to true before <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress" /> 
            if you need to obtain raw data output.
            </remarks>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_raw_data(System.Byte[][][],System.Int32)" />
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Dct_method">
      <summary>
            Gets or sets the algorithm used for the DCT step.
            </summary>
      <value>The algorithm used for the DCT step.</value>
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Do_fancy_upsampling">
      <summary>
            Enable or disable upsampling of chroma components.
            </summary>
      <value>If <c>true</c>, do careful upsampling of chroma components. 
            If <c>false</c>, a faster but sloppier method is used. 
            The visual impact of the sloppier method is often very small.
            </value>
      <remarks>Default value: <c>true</c></remarks>
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Do_block_smoothing">
      <summary>
            Apply interblock smoothing in early stages of decoding progressive JPEG files.
            </summary>
      <value>If <c>true</c>, interblock smoothing is applied in early stages of decoding progressive JPEG files; 
            if <c>false</c>, not. Early progression stages look "fuzzy" with smoothing, "blocky" without.</value>
      <remarks>Default value: <c>true</c><br />
            In any case, block smoothing ceases to be applied after the first few AC coefficients are 
            known to full accuracy, so it is relevant only when using 
            <see href="6dba59c5-d32e-4dfc-87fe-f9eff7004146.htm" target="_self">buffered-image mode</see> for progressive images.
            </remarks>
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Quantize_colors">
      <summary>
            Colors quantization.
            </summary>
      <value>If set <c>true</c>, colormapped output will be delivered.<br />
            Default value: <c>false</c>, meaning that full-color output will be delivered.
            </value>
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Dither_mode">
      <summary>
            Selects color dithering method.
            </summary>
      <value>Default value: <see cref="F:BitMiracle.LibJpeg.Classic.J_DITHER_MODE.JDITHER_FS" />.</value>
      <remarks>Ignored if <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Quantize_colors" /> is <c>false</c>.<br />
            At present, ordered dither is implemented only in the single-pass, standard-colormap case. 
            If you ask for ordered dither when <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Two_pass_quantize" /> is <c>true</c>
            or when you supply an external color map, you'll get F-S dithering.
            </remarks>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Quantize_colors" />
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Two_pass_quantize">
      <summary>
            Gets or sets a value indicating whether to use two-pass color quantization.
            </summary>
      <value>If <c>true</c>, an extra pass over the image is made to select a custom color map for the image.
            This usually looks a lot better than the one-size-fits-all colormap that is used otherwise.
            Ignored when the application supplies its own color map.<br />
            
            Default value: <c>true</c></value>
      <remarks>Ignored if <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Quantize_colors" /> is <c>false</c>.<br /></remarks>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Quantize_colors" />
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Desired_number_of_colors">
      <summary>
            Maximum number of colors to use in generating a library-supplied color map.
            </summary>
      <value>Default value: 256.</value>
      <remarks>Ignored if <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Quantize_colors" /> is <c>false</c>.<br />
            The actual number of colors is returned in a <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Actual_number_of_colors" />.
            </remarks>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Quantize_colors" />
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Enable_1pass_quant">
      <summary>
            Enable future use of 1-pass quantizer.
            </summary>
      <value>Default value: <c>false</c></value>
      <remarks>Significant only in buffered-image mode.</remarks>
      <seealso href="6dba59c5-d32e-4dfc-87fe-f9eff7004146.htm" target="_self">Buffered-image mode</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Enable_external_quant">
      <summary>
            Enable future use of external colormap.
            </summary>
      <value>Default value: <c>false</c></value>
      <remarks>Significant only in buffered-image mode.</remarks>
      <seealso href="6dba59c5-d32e-4dfc-87fe-f9eff7004146.htm" target="_self">Buffered-image mode</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Enable_2pass_quant">
      <summary>
            Enable future use of 2-pass quantizer.
            </summary>
      <value>Default value: <c>false</c></value>
      <remarks>Significant only in buffered-image mode.</remarks>
      <seealso href="6dba59c5-d32e-4dfc-87fe-f9eff7004146.htm" target="_self">Buffered-image mode</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Output_width">
      <summary>
            Gets the actual width of output image.
            </summary>
      <value>The width of output image.</value>
      <remarks>Computed by <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress" />.
            You can also use <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_calc_output_dimensions" /> to determine this value
            in advance of calling <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress" />.</remarks>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Output_height" />
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Output_height">
      <summary>
            Gets the actual height of output image.
            </summary>
      <value>The height of output image.</value>
      <remarks>Computed by <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress" />.
            You can also use <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_calc_output_dimensions" /> to determine this value
            in advance of calling <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress" />.</remarks>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Output_width" />
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Out_color_components">
      <summary>
            Gets the number of color components in <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Out_color_space" />.
            </summary>
      <remarks>Computed by <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress" />.
            You can also use <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_calc_output_dimensions" /> to determine this value
            in advance of calling <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress" />.</remarks>
      <value>The number of color components.</value>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Out_color_space" />
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Output_components">
      <summary>
            Gets the number of color components returned.
            </summary>
      <remarks>Computed by <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress" />.
            You can also use <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_calc_output_dimensions" /> to determine this value
            in advance of calling <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress" />.</remarks>
      <value>When <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Quantize_colors">quantizing colors</see>, 
            <c>Output_components</c> is 1, indicating a single color map index per pixel. 
            Otherwise it equals to <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Out_color_components" />.
            </value>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Out_color_space" />
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Rec_outbuf_height">
      <summary>
            Gets the recommended height of scanline buffer.
            </summary>
      <value>In high-quality modes, <c>Rec_outbuf_height</c> is always 1, but some faster, 
            lower-quality modes set it to larger values (typically 2 to 4).</value>
      <remarks>Computed by <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress" />.
            You can also use <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_calc_output_dimensions" /> to determine this value
            in advance of calling <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_start_decompress" />.<br /><c>Rec_outbuf_height</c> is the recommended minimum height (in scanlines) 
            of the buffer passed to <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_scanlines(System.Byte[][],System.Int32)" />.
            If the buffer is smaller, the library will still work, but time will be wasted due 
            to unnecessary data copying. If you are going to ask for a high-speed processing mode, 
            you may as well go to the trouble of honoring <c>Rec_outbuf_height</c> so as to avoid data copying.
            (An output buffer larger than <c>Rec_outbuf_height</c> lines is OK, but won't provide 
            any material speed improvement over that height.)
            </remarks>
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Actual_number_of_colors">
      <summary>
            The number of colors in the color map.
            </summary>
      <value>The number of colors in the color map.</value>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Colormap" />
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Colormap">
      <summary>
            The color map, represented as a 2-D pixel array of <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Out_color_components" /> rows 
            and <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Actual_number_of_colors" /> columns.
            </summary>
      <value>Colormap is set to <c>null</c> by <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_read_header(System.Boolean)" />.
            The application can supply a color map by setting <c>Colormap</c> non-null and setting 
            <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Actual_number_of_colors" /> to the map size.
            </value>
      <remarks>Ignored if not quantizing.<br />
            Implementation restriction: at present, an externally supplied <c>Colormap</c>
            is only accepted for 3-component output color spaces.
            </remarks>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Actual_number_of_colors" />
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Quantize_colors" />
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Output_scanline">
      <summary>
            Gets the number of scanlines returned so far.
            </summary>
      <value>The output_scanline.</value>
      <remarks>Usually you can just use this variable as the loop counter, 
            so that the loop test looks like 
            <c>while (cinfo.Output_scanline &lt; cinfo.Output_height)</c></remarks>
      <seealso href="9d052723-a7f9-42de-8747-0bd9896f8157.htm" target="_self">Decompression details</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Input_scan_number">
      <summary>
            Gets the number of SOS markers seen so far.
            </summary>
      <value>The number of SOS markers seen so far.</value>
      <remarks>Indicates the progress of the decompressor input side.</remarks>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Input_iMCU_row">
      <summary>
            Gets the number of iMCU rows completed.
            </summary>
      <value>The number of iMCU rows completed.</value>
      <remarks>Indicates the progress of the decompressor input side.</remarks>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Output_scan_number">
      <summary>
            Gets the nominal scan number being displayed.
            </summary>
      <value>The nominal scan number being displayed.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Output_iMCU_row">
      <summary>
            Gets the number of iMCU rows read.
            </summary>
      <value>The number of iMCU rows read.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Coef_bits">
      <summary>
            Gets the current progression status..
            </summary>
      <value>
        <c>Coef_bits[c][i]</c> indicates the precision with 
            which component c's DCT coefficient i (in zigzag order) is known. 
            It is <c>-1</c> when no data has yet been received, otherwise 
            it is the point transform (shift) value for the most recent scan of the coefficient 
            (thus, 0 at completion of the progression). This is null when reading a non-progressive file.
            </value>
      <seealso href="bda5b19b-88e0-44bf-97de-cd30fc61bb65.htm" target="_self">Progressive JPEG support</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Density_unit">
      <summary>
            Gets the resolution information from JFIF marker.
            </summary>
      <value>The information from JFIF marker.</value>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.X_density" />
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Y_density" />
      <seealso href="0955150c-4ee7-4b0f-a716-4bda2e85652b.htm" target="_self">Decompression parameter selection</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.X_density">
      <summary>
            Gets the horizontal component of pixel ratio.
            </summary>
      <value>The horizontal component of pixel ratio.</value>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Y_density" />
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Density_unit" />
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Y_density">
      <summary>
            Gets the vertical component of pixel ratio.
            </summary>
      <value>The vertical component of pixel ratio.</value>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.X_density" />
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Density_unit" />
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Data_precision">
      <summary>
            Gets the data precision.
            </summary>
      <value>The data precision.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Max_v_samp_factor">
      <summary>
            Gets the largest vertical sample factor.
            </summary>
      <value>The largest vertical sample factor.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Unread_marker">
      <summary>
            Gets the last read and unprocessed JPEG marker.
            </summary>
      <value>It is either zero or the code of a JPEG marker that has been
            read from the data source, but has not yet been processed.
            </value>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_set_marker_processor(System.Int32,BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_marker_parser_method)" />
      <seealso href="81c88818-a5d7-4550-9ce5-024a768f7b1e.htm" target="_self">Special markers</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Comp_info">
      <summary>
            Comp_info[i] describes component that appears i'th in SOF
            </summary>
      <value>The components in SOF.</value>
      <seealso cref="T:BitMiracle.LibJpeg.Classic.jpeg_component_info" />
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_marker_parser_method">
      <summary>
            The delegate for application-supplied marker processing methods.
            </summary>
      <param name="cinfo">Decompressor.</param>
      <returns>Return <c>true</c> to indicate success. <c>false</c> should be returned only 
            if you are using a suspending data source and it tells you to suspend.
            </returns>
      <remarks>Although the marker code is not explicitly passed, the routine can find it 
            in the <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Unread_marker" />. At the time of call, 
            the marker proper has been read from the data source module. The processor routine 
            is responsible for reading the marker length word and the remaining parameter bytes, if any.
            </remarks>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.JPEG_MARKER">
      <summary>
            JPEG marker codes.
            </summary>
      <seealso href="81c88818-a5d7-4550-9ce5-024a768f7b1e.htm" target="_self">Special markers</seealso>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOF0">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOF1">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOF2">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOF3">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOF5">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOF6">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOF7">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.JPG">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOF9">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOF10">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOF11">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOF13">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOF14">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOF15">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.DHT">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.DAC">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.RST0">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.RST1">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.RST2">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.RST3">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.RST4">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.RST5">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.RST6">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.RST7">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOI">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.EOI">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.SOS">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.DQT">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.DNL">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.DRI">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.DHP">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.EXP">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP0">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP1">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP2">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP3">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP4">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP5">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP6">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP7">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP8">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP9">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP10">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP11">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP12">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP13">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP14">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.APP15">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.JPG0">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.JPG13">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.COM">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.TEM">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.JPEG_MARKER.ERROR">
      <summary>
      </summary>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.jpeg_marker_struct">
      <summary>
            Representation of special JPEG marker.
            </summary>
      <remarks>You can't create instance of this class manually.
            Concrete objects are instantiated by library and you can get them
            through <see cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Marker_list">Marker_list</see> property.
            </remarks>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Marker_list" />
      <seealso href="81c88818-a5d7-4550-9ce5-024a768f7b1e.htm" target="_self">Special markers</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_marker_struct.Marker">
      <summary>
            Gets the special marker.
            </summary>
      <value>The marker value.</value>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_marker_struct.OriginalLength">
      <summary>
            Gets the full length of original data associated with the marker.
            </summary>
      <value>The length of original data associated with the marker.</value>
      <remarks>This length excludes the marker length word, whereas the stored representation 
            within the JPEG file includes it. (Hence the maximum data length is really only 65533.)
            </remarks>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_marker_struct.Data">
      <summary>
            Gets the data associated with the marker.
            </summary>
      <value>The data associated with the marker.</value>
      <remarks>The length of this array doesn't exceed <c>length_limit</c> for the particular marker type.
            Note that this length excludes the marker length word, whereas the stored representation 
            within the JPEG file includes it. (Hence the maximum data length is really only 65533.)
            </remarks>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr">
      <summary>
            The progress monitor object.
            </summary>
      <seealso href="febdc6af-ca72-4f3b-8cfe-3473ce6a7c7f.htm" target="_self">Progress monitoring</seealso>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Updated">
      <summary>
            Indicates that progress was changed.
            </summary>
      <remarks>Call this method if you change some progress parameters manually.
            This method ensures happening of the <see cref="E:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.OnProgress">OnProgress</see> event.</remarks>
    </member>
    <member name="E:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.OnProgress">
      <summary>
            Occurs when progress is changed.
            </summary>
      <seealso href="febdc6af-ca72-4f3b-8cfe-3473ce6a7c7f.htm" target="_self">Progress monitoring</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Pass_counter">
      <summary>
            Gets or sets the number of work units completed in this pass.
            </summary>
      <value>The number of work units completed in this pass.</value>
      <seealso href="febdc6af-ca72-4f3b-8cfe-3473ce6a7c7f.htm" target="_self">Progress monitoring</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Pass_limit">
      <summary>
            Gets or sets the total number of work units in this pass.
            </summary>
      <value>The total number of work units in this pass.</value>
      <seealso href="febdc6af-ca72-4f3b-8cfe-3473ce6a7c7f.htm" target="_self">Progress monitoring</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Completed_passes">
      <summary>
            Gets or sets the number of passes completed so far.
            </summary>
      <value>The number of passes completed so far.</value>
      <seealso href="febdc6af-ca72-4f3b-8cfe-3473ce6a7c7f.htm" target="_self">Progress monitoring</seealso>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jpeg_progress_mgr.Total_passes">
      <summary>
            Gets or sets the total number of passes expected.
            </summary>
      <value>The total number of passes expected.</value>
      <seealso href="febdc6af-ca72-4f3b-8cfe-3473ce6a7c7f.htm" target="_self">Progress monitoring</seealso>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.JQUANT_TBL">
      <summary>
            DCT coefficient quantization tables.
            </summary>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.JQUANT_TBL.Sent_table">
      <summary>
            Gets or sets a value indicating whether the table has been output to file.
            </summary>
      <value>It's initialized <c>false</c> when the table is created, and set 
            <c>true</c> when it's been output to the file. You could suppress output of a table by setting this to <c>true</c>.
            </value>
      <remarks>This property is used only during compression.</remarks>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.jpeg_suppress_tables(System.Boolean)" />
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.jvirt_array`1">
      <summary>
            JPEG virtual array.
            </summary>
      <typeparam name="T">The type of array's elements.</typeparam>
      <remarks>You can't create virtual array manually. For creation use methods
            <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.CreateSamplesArray(System.Int32,System.Int32)" /> and
            <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.CreateBlocksArray(System.Int32,System.Int32)" />.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jvirt_array`1.#ctor(System.Int32,System.Int32,BitMiracle.LibJpeg.Classic.jvirt_array{`0}.Allocator)">
      <summary>
            Request a virtual 2-D array
            </summary>
      <param name="width">Width of array</param>
      <param name="height">Total virtual array height</param>
      <param name="allocator">The allocator.</param>
    </member>
    <member name="M:BitMiracle.LibJpeg.Classic.jvirt_array`1.Access(System.Int32,System.Int32)">
      <summary>
            Access the part of a virtual array.
            </summary>
      <param name="startRow">The first row in required block.</param>
      <param name="numberOfRows">The number of required rows.</param>
      <returns>The required part of virtual array.</returns>
    </member>
    <member name="P:BitMiracle.LibJpeg.Classic.jvirt_array`1.ErrorProcessor">
      <summary>
            Gets or sets the error processor.
            </summary>
      <value>The error processor.<br />
            Default value: <c>null</c></value>
      <remarks>Uses only for calling 
            <see cref="M:BitMiracle.LibJpeg.Classic.jpeg_common_struct.ERREXIT(BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE)">jpeg_common_struct.ERREXIT</see>
            on error.</remarks>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.J_COLOR_SPACE">
      <summary>
            Known color spaces.
            </summary>
      <seealso href="c90654b9-f3f4-4319-80d1-979c73d84e76.htm" target="_self">Special color spaces</seealso>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_COLOR_SPACE.JCS_UNKNOWN">
      <summary>
            Unspecified color space.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_COLOR_SPACE.JCS_GRAYSCALE">
      <summary>
            Grayscale
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_COLOR_SPACE.JCS_RGB">
      <summary>
            RGB
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_COLOR_SPACE.JCS_YCbCr">
      <summary>
            YCbCr (also known as YUV)
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_COLOR_SPACE.JCS_CMYK">
      <summary>
            CMYK
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_COLOR_SPACE.JCS_YCCK">
      <summary>
            YCbCrK
            </summary>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.J_DCT_METHOD">
      <summary>
            Algorithm used for the DCT step.
            </summary>
      <remarks>The <c>FLOAT</c> method is very slightly more accurate than the <c>ISLOW</c> method, 
            but may give different results on different machines due to varying roundoff behavior. 
            The integer methods should give the same results on all machines. On machines with 
            sufficiently fast hardware, the floating-point method may also be the fastest. 
            The <c>IFAST</c> method is considerably less accurate than the other two; its use is not recommended 
            if high quality is a concern.</remarks>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_compress_struct.Dct_method" />
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Dct_method" />
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_DCT_METHOD.JDCT_ISLOW">
      <summary>
            Slow but accurate integer algorithm.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_DCT_METHOD.JDCT_IFAST">
      <summary>
            Faster, less accurate integer method.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_DCT_METHOD.JDCT_FLOAT">
      <summary>
            Floating-point method.
            </summary>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.J_DITHER_MODE">
      <summary>
            Dithering options for decompression.
            </summary>
      <seealso cref="P:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.Dither_mode" />
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_DITHER_MODE.JDITHER_NONE">
      <summary>
            No dithering: fast, very low quality
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_DITHER_MODE.JDITHER_ORDERED">
      <summary>
            Ordered dither: moderate speed and quality
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_DITHER_MODE.JDITHER_FS">
      <summary>
            Floyd-Steinberg dither: slow, high quality
            </summary>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE">
      <summary>
            Message codes used in code to signal errors, warning and trace messages.
            </summary>
      <seealso cref="T:BitMiracle.LibJpeg.Classic.jpeg_error_mgr" />
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JMSG_NOMESSAGE">
      <summary>
            Must be first entry!
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_ARITH_NOTIMPL">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_BUFFER_MODE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_COMPONENT_ID">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_DCT_COEF">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_DCTSIZE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_HUFF_TABLE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_IN_COLORSPACE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_J_COLORSPACE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_LENGTH">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_MCU_SIZE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_PRECISION">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_PROGRESSION">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_PROG_SCRIPT">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_SAMPLING">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_SCAN_SCRIPT">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_STATE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BAD_VIRTUAL_ACCESS">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_BUFFER_SIZE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_CANT_SUSPEND">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_CCIR601_NOTIMPL">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_COMPONENT_COUNT">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_CONVERSION_NOTIMPL">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_DHT_INDEX">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_DQT_INDEX">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_EMPTY_IMAGE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_EOI_EXPECTED">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_FILE_WRITE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_FRACT_SAMPLE_NOTIMPL">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_HUFF_CLEN_OVERFLOW">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_HUFF_MISSING_CODE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_IMAGE_TOO_BIG">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_INPUT_EMPTY">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_INPUT_EOF">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_MISMATCHED_QUANT_TABLE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_MISSING_DATA">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_MODE_CHANGE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_NOTIMPL">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_NOT_COMPILED">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_NO_HUFF_TABLE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_NO_IMAGE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_NO_QUANT_TABLE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_NO_SOI">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_OUT_OF_MEMORY">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_QUANT_COMPONENTS">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_QUANT_FEW_COLORS">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_QUANT_MANY_COLORS">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_SOF_DUPLICATE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_SOF_NO_SOS">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_SOF_UNSUPPORTED">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_SOI_DUPLICATE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_SOS_NO_SOF">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_TOO_LITTLE_DATA">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_UNKNOWN_MARKER">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JERR_WIDTH_OVERFLOW">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_16BIT_TABLES">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_ADOBE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_APP0">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_APP14">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_DHT">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_DQT">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_DRI">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_EOI">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_HUFFBITS">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_JFIF">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_JFIF_BADTHUMBNAILSIZE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_JFIF_EXTENSION">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_JFIF_THUMBNAIL">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_MISC_MARKER">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_PARMLESS_MARKER">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_QUANTVALS">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_QUANT_3_NCOLORS">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_QUANT_NCOLORS">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_QUANT_SELECTED">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_RECOVERY_ACTION">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_RST">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_SMOOTH_NOTIMPL">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_SOF">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_SOF_COMPONENT">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_SOI">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_SOS">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_SOS_COMPONENT">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_SOS_PARAMS">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_THUMB_JPEG">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_THUMB_PALETTE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_THUMB_RGB">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JTRC_UNKNOWN_IDS">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JWRN_ADOBE_XFORM">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JWRN_BOGUS_PROGRESSION">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JWRN_EXTRANEOUS_DATA">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JWRN_HIT_MARKER">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JWRN_HUFF_BAD_CODE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JWRN_JFIF_MAJOR">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JWRN_JPEG_EOF">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JWRN_MUST_RESYNC">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JWRN_NOT_SEQUENTIAL">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JWRN_TOO_MUCH_DATA">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JMSG_UNKNOWNMSGCODE">
      <summary>
      </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.J_MESSAGE_CODE.JMSG_LASTMSGCODE">
      <summary>
      </summary>
    </member>
    <member name="T:BitMiracle.LibJpeg.Classic.ReadResult">
      <summary>
            Describes a result of read operation.
            </summary>
      <seealso cref="M:BitMiracle.LibJpeg.Classic.jpeg_decompress_struct.jpeg_consume_input" />
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.ReadResult.JPEG_SUSPENDED">
      <summary>
            Suspended due to lack of input data. Can occur only if a suspending data source is used.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.ReadResult.JPEG_HEADER_OK">
      <summary>
            Found valid image datastream.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.ReadResult.JPEG_HEADER_TABLES_ONLY">
      <summary>
            Found valid table-specs-only datastream.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.ReadResult.JPEG_REACHED_SOS">
      <summary>
            Reached a SOS marker (the start of a new scan)
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.ReadResult.JPEG_REACHED_EOI">
      <summary>
            Reached the EOI marker (end of image)
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.ReadResult.JPEG_ROW_COMPLETED">
      <summary>
            Completed reading one MCU row of compressed data.
            </summary>
    </member>
    <member name="F:BitMiracle.LibJpeg.Classic.ReadResult.JPEG_SCAN_COMPLETED">
      <summary>
            Completed reading last MCU row of current scan.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.TiffErrorHandler">
      <summary>
            Default error handler implementation.
            </summary>
      <remarks>
        <para>
          <b>TiffErrorHandler</b> provides error and warning handling methods that write an
            error or a warning messages to the <see cref="P:System.Console.Error" />.
            </para>
        <para>
            Applications that desire to capture control in the event of an error or a warning should
            set their custom error and warning handler using <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetErrorHandler(BitMiracle.LibTiff.Classic.TiffErrorHandler)" /> method.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffErrorHandler.ErrorHandler(BitMiracle.LibTiff.Classic.Tiff,System.String,System.String,System.Object[])">
      <summary>
            Handles an error by writing it text to the <see cref="P:System.Console.Error" />.
            </summary>
      <param name="tif">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class. Can be <c>null</c>.</param>
      <param name="method">The method where an error is detected.</param>
      <param name="format">A composite format string (see Remarks).</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <remarks>
            The <paramref name="format" /> is a composite format string that uses the same format as
            <see cref="O:System.String.Format" /> method. The <paramref name="method" /> parameter, if
            not <c>null</c>, is printed before the message; it typically is used to identify the
            method in which an error is detected.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffErrorHandler.ErrorHandlerExt(BitMiracle.LibTiff.Classic.Tiff,System.Object,System.String,System.String,System.Object[])">
      <summary>
            Handles an error by writing it text to the <see cref="P:System.Console.Error" />.
            </summary>
      <param name="tif">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class. Can be <c>null</c>.</param>
      <param name="clientData">A client data.</param>
      <param name="method">The method where an error is detected.</param>
      <param name="format">A composite format string (see Remarks).</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <remarks>
        <para>
            The <paramref name="format" /> is a composite format string that uses the same format as
            <see cref="O:System.String.Format" /> method. The <paramref name="method" /> parameter, if
            not <c>null</c>, is printed before the message; it typically is used to identify the
            method in which an error is detected.
            </para>
        <para>
            The <paramref name="clientData" /> parameter can be anything. Its value and meaning is
            defined by an application and not the library.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffErrorHandler.WarningHandler(BitMiracle.LibTiff.Classic.Tiff,System.String,System.String,System.Object[])">
      <summary>
            Handles a warning by writing it text to the <see cref="P:System.Console.Error" />.
            </summary>
      <param name="tif">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class. Can be <c>null</c>.</param>
      <param name="method">The method where a warning is detected.</param>
      <param name="format">A composite format string (see Remarks).</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <remarks>
            The <paramref name="format" /> is a composite format string that uses the same format as
            <see cref="O:System.String.Format" /> method. The <paramref name="method" /> parameter, if
            not <c>null</c>, is printed before the message; it typically is used to identify the
            method in which a warning is detected.
            </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffErrorHandler.WarningHandlerExt(BitMiracle.LibTiff.Classic.Tiff,System.Object,System.String,System.String,System.Object[])">
      <summary>
            Handles a warning by writing it text to the <see cref="P:System.Console.Error" />.
            </summary>
      <param name="tif">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.Tiff" /> class. Can be <c>null</c>.</param>
      <param name="clientData">A client data.</param>
      <param name="method">The method where a warning is detected.</param>
      <param name="format">A composite format string (see Remarks).</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <remarks>
        <para>
            The <paramref name="format" /> is a composite format string that uses the same format as
            <see cref="O:System.String.Format" /> method. The <paramref name="method" /> parameter, if
            not <c>null</c>, is printed before the message; it typically is used to identify the
            method in which a warning is detected.
            </para>
        <para>
            The <paramref name="clientData" /> parameter can be anything. Its value and meaning is
            defined by an application and not the library.
            </para>
      </remarks>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.TiffFieldInfo">
      <summary>
            Represents a TIFF field information.
            </summary>
      <remarks>
        <b>TiffFieldInfo</b> describes a field. It provides information about field name, type,
            number of values etc.
            </remarks>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Variable">
      <summary>
            marker for variable length tags
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Spp">
      <summary>
            marker for SamplesPerPixel-bound tags
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Variable2">
      <summary>
            marker for integer variable length tags
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffFieldInfo.#ctor(BitMiracle.LibTiff.Classic.TiffTag,System.Int16,System.Int16,BitMiracle.LibTiff.Classic.TiffType,System.Int16,System.Boolean,System.Boolean,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:BitMiracle.LibTiff.Classic.TiffFieldInfo" /> class.
            </summary>
      <param name="tag">The tag to describe.</param>
      <param name="readCount">The number of values to read when reading field information or
            one of <see cref="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Variable" />, <see cref="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Spp" /> and <see cref="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Variable2" />.</param>
      <param name="writeCount">The number of values to write when writing field information
            or one of <see cref="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Variable" />, <see cref="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Spp" /> and <see cref="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Variable2" />.</param>
      <param name="type">The type of the field value.</param>
      <param name="bit">Index of the bit to use in "Set Fields Vector" when this instance
            is merged into field info collection. Take a look at <see cref="T:BitMiracle.LibTiff.Classic.FieldBit" /> class.</param>
      <param name="okToChange">If true, then it is permissible to set the tag's value even
            after writing has commenced.</param>
      <param name="passCount">If true, then number of value elements should be passed to
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetField(BitMiracle.LibTiff.Classic.TiffTag,System.Object[])" /> method as second parameter (right after tag type AND
            before value itself).</param>
      <param name="name">The name (description) of the tag this instance describes.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffFieldInfo.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffFieldInfo.Tag">
      <summary>
            The tag described by this instance.
            </summary>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffFieldInfo.ReadCount">
      <summary>
            Number of values to read when reading field information or
            one of <see cref="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Variable" />, <see cref="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Spp" /> and <see cref="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Variable2" />.
            </summary>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffFieldInfo.WriteCount">
      <summary>
            Number of values to write when writing field information or
            one of <see cref="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Variable" />, <see cref="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Spp" /> and <see cref="F:BitMiracle.LibTiff.Classic.TiffFieldInfo.Variable2" />.
            </summary>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffFieldInfo.Type">
      <summary>
            Type of the field values.
            </summary>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffFieldInfo.Bit">
      <summary>
            Index of the bit to use in "Set Fields Vector" when this instance
            is merged into field info collection. Take a look at <see cref="T:BitMiracle.LibTiff.Classic.FieldBit" /> class.
            </summary>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffFieldInfo.OkToChange">
      <summary>
            If true, then it is permissible to set the tag's value even after writing has commenced.
            </summary>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffFieldInfo.PassCount">
      <summary>
            If true, then number of value elements should be passed to <see cref="M:BitMiracle.LibTiff.Classic.Tiff.SetField(BitMiracle.LibTiff.Classic.TiffTag,System.Object[])" />
            method as second parameter (right after tag type AND before values itself).
            </summary>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffFieldInfo.Name">
      <summary>
            The name (or description) of the tag this instance describes.
            </summary>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.TiffRgbaImage">
      <summary>
            RGBA-style image support. Provides methods for decoding images into RGBA (or other) format.
            </summary>
      <remarks>
        <para>
          <b>TiffRgbaImage</b> provide a high-level interface through which TIFF images may be read
            into memory. Images may be strip- or tile-based and have a variety of different
            characteristics: bits/sample, samples/pixel, photometric, etc. The target raster format
            can be customized to a particular application's needs by installing custom methods that
            manipulate image data according to application requirements.
            </para>
        <para>
            The default usage for this class: check if an image can be processed using
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.RGBAImageOK(System.String@)" />, construct an instance of
            <b>TiffRgbaImage</b> using <see cref="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.Create(BitMiracle.LibTiff.Classic.Tiff,System.Boolean,System.String@)" /> and then read and decode an image into a
            target raster using <see cref="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.GetRaster(System.Int32[],System.Int32,System.Int32,System.Int32)" />. <see cref="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.GetRaster(System.Int32[],System.Int32,System.Int32,System.Int32)" /> can be called
            multiple times to decode an image using different state parameters. If multiple images
            are to be displayed and there is not enough space for each of the decoded rasters,
            multiple instances of <b>TiffRgbaImage</b> can be managed and then calls can be made to
            <see cref="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.GetRaster(System.Int32[],System.Int32,System.Int32,System.Int32)" /> as needed to display an image.</para>
        <para>
            To use the core support for reading and processing TIFF images, but write the resulting
            raster data in a different format one need only override the "put methods" used to store
            raster data. These methods are initially setup by <see cref="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.Create(BitMiracle.LibTiff.Classic.Tiff,System.Boolean,System.String@)" /> to point to methods
            that pack raster data in the default ABGR pixel format. Two different methods are used
            according to the physical organization of the image data in the file: one for
            <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.CONTIG (packed samples),
            and another for <see cref="F:BitMiracle.LibTiff.Classic.TiffTag.PLANARCONFIG" /> = <see cref="T:BitMiracle.LibTiff.Classic.PlanarConfig" />.SEPARATE
            (separated samples). Note that this mechanism can be used to transform the data before 
            storing it in the raster. For example one can convert data to colormap indices for display
            on a colormap display.</para>
        <para>
            To setup custom "put" method please use <see cref="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.PutContig" /> property for contiguously
            packed samples and/or <see cref="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.PutSeparate" /> property for separated samples.</para>
        <para>
            The methods of <b>TiffRgbaImage</b> support the most commonly encountered flavors of TIFF.
            It is possible to extend this support by overriding the "get method" invoked by
            <see cref="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.GetRaster(System.Int32[],System.Int32,System.Int32,System.Int32)" /> to read TIFF image data. Details of doing this are a bit involved,
            it is best to make a copy of an existing get method and modify it to suit the needs of an
            application. To setup custom "get" method please use <see cref="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.Get" /> property.</para>
      </remarks>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.tif">
      <summary>
            image handle
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.stoponerr">
      <summary>
            stop on read error
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.isContig">
      <summary>
            data is packed/separate
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.alpha">
      <summary>
            type of alpha data present
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.width">
      <summary>
            image width
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.height">
      <summary>
            image height
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.bitspersample">
      <summary>
            image bits/sample
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.samplesperpixel">
      <summary>
            image samples/pixel
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.orientation">
      <summary>
            image orientation
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.req_orientation">
      <summary>
            requested orientation
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.photometric">
      <summary>
            image photometric interp
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.redcmap">
      <summary>
            colormap pallete
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.Map">
      <summary>
            sample mapping array
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.BWmap">
      <summary>
            black and white map
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.PALmap">
      <summary>
            palette image map
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.ycbcr">
      <summary>
            YCbCr conversion state
            </summary>
    </member>
    <member name="F:BitMiracle.LibTiff.Classic.TiffRgbaImage.cielab">
      <summary>
            CIE L*a*b conversion state
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.Create(BitMiracle.LibTiff.Classic.Tiff,System.Boolean,System.String@)">
      <summary>
            Creates new instance of the <see cref="T:BitMiracle.LibTiff.Classic.TiffRgbaImage" /> class.
            </summary>
      <param name="tif">
            The instance of the <see cref="N:BitMiracle.LibTiff.Classic" /> class used to retrieve
            image data.
            </param>
      <param name="stopOnError">
            if set to <c>true</c> then an error will terminate the conversion; otherwise "get"
            methods will continue processing data until all the possible data in the image have
            been requested.
            </param>
      <param name="errorMsg">The error message (if any) gets placed here.</param>
      <returns>
            New instance of the <see cref="T:BitMiracle.LibTiff.Classic.TiffRgbaImage" /> class if the image specified
            by <paramref name="tif" /> can be converted to RGBA format; otherwise, <c>null</c> is
            returned and <paramref name="errorMsg" /> contains the reason why it is being
            rejected.
            </returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.GetRaster(System.Int32[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Reads the underlaying TIFF image and decodes it into RGBA format raster.
            </summary>
      <param name="raster">The raster (the buffer to place decoded image data to).</param>
      <param name="offset">The zero-based byte offset in <paramref name="raster" /> at which
            to begin storing decoded bytes.</param>
      <param name="width">The raster width.</param>
      <param name="height">The raster height.</param>
      <returns>
        <c>true</c> if the image was successfully read and decoded; otherwise,
            <c>false</c>.</returns>
      <remarks>
        <para>
          <b>GetRaster</b> reads image into memory using current "get" (<see cref="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.Get" />) method,
            storing the result in the user supplied RGBA <paramref name="raster" /> using one of
            the "put" (<see cref="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.PutContig" /> or <see cref="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.PutSeparate" />) methods. The raster
            is assumed to be an array of <paramref name="width" /> times <paramref name="height" />
            32-bit entries, where <paramref name="width" /> must be less than or equal to the width
            of the image (<paramref name="height" /> may be any non-zero size). If the raster
            dimensions are smaller than the image, the image data is cropped to the raster bounds.
            If the raster height is greater than that of the image, then the image data placement
            depends on the value of <see cref="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.ReqOrientation" /> property. Note that the raster is
            assumed to be organized such that the pixel at location (x, y) is
            <paramref name="raster" />[y * width + x]; with the raster origin specified by the
            value of <see cref="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.ReqOrientation" /> property.
            </para>
        <para>
            Raster pixels are 8-bit packed red, green, blue, alpha samples. The 
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetR(System.Int32)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetG(System.Int32)" />, <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetB(System.Int32)" />, and
            <see cref="M:BitMiracle.LibTiff.Classic.Tiff.GetA(System.Int32)" /> should be used to access individual samples. Images without
            Associated Alpha matting information have a constant Alpha of 1.0 (255).
            </para>
        <para>
          <b>GetRaster</b> converts non-8-bit images by scaling sample values. Palette,
            grayscale, bilevel, CMYK, and YCbCr images are converted to RGB transparently.
            Raster pixels are returned uncorrected by any colorimetry information present in
            the directory.
            </para>
        <para>
            Samples must be either 1, 2, 4, 8, or 16 bits. Colorimetric samples/pixel must be
            either 1, 3, or 4 (i.e. SamplesPerPixel minus ExtraSamples).
            </para>
        <para>
            Palette image colormaps that appear to be incorrectly written as 8-bit values are
            automatically scaled to 16-bits.
            </para>
        <para>
            All error messages are directed to the current error handler.
            </para>
      </remarks>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.CMAP(System.Int32,System.Int32,System.Int32@)">
      <summary>
            Palette images with &lt;= 8 bits/sample are handled with a table to avoid lots of shifts
            and masks. The table is setup so that put*cmaptile (below) can retrieve 8 / bitspersample
            pixel values simply by indexing into the table with one number.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.GREY(System.Int32,System.Int32,System.Int32@)">
      <summary>
            Greyscale images with less than 8 bits/sample are handled with a table to avoid lots
            of shifts and masks. The table is setup so that put*bwtile (below) can retrieve
            8 / bitspersample pixel values simply by indexing into the table with one number.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.gtTileContig(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Get an tile-organized image that has
            PlanarConfiguration contiguous if SamplesPerPixel &gt; 1
             or
            SamplesPerPixel == 1
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.gtTileSeparate(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Get an tile-organized image that has
            SamplesPerPixel &gt; 1
            PlanarConfiguration separated
            We assume that all such images are RGB.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.gtStripContig(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Get a strip-organized image that has 
            PlanarConfiguration contiguous if SamplesPerPixel &gt; 1
             or
            SamplesPerPixel == 1
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.gtStripSeparate(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Get a strip-organized image with
             SamplesPerPixel &gt; 1
             PlanarConfiguration separated
            We assume that all such images are RGB.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.pickContigCase">
      <summary>
            Select the appropriate conversion routine for packed data.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.pickSeparateCase">
      <summary>
            Select the appropriate conversion routine for unpacked data.
            NB: we assume that unpacked single channel data is directed to the "packed routines.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.buildMap">
      <summary>
            Construct any mapping table used by the associated put method.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.setupMap">
      <summary>
            Construct a mapping table to convert from the range of the data samples to [0, 255] -
            for display. This process also handles inverting B&amp;W images when needed.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.YCbCrtoRGB(System.Int32@,System.Int32,System.Int32,System.Int32)">
      <summary>
            YCbCr -&gt; RGB conversion and packing routines.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.put8bitcmaptile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit palette =&gt; colormap/RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.put4bitcmaptile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            4-bit palette =&gt; colormap/RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.put2bitcmaptile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            2-bit palette =&gt; colormap/RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.put1bitcmaptile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            1-bit palette =&gt; colormap/RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putgreytile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit greyscale =&gt; colormap/RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.put16bitbwtile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            16-bit greyscale =&gt; colormap/RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.put1bitbwtile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            1-bit bilevel =&gt; colormap/RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.put2bitbwtile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            2-bit greyscale =&gt; colormap/RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.put4bitbwtile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            4-bit greyscale =&gt; colormap/RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putRGBcontig8bittile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit packed samples, no Map =&gt; RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putRGBAAcontig8bittile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit packed samples =&gt; RGBA w/ associated alpha (known to have Map == null)
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putRGBUAcontig8bittile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit packed samples =&gt; RGBA w/ unassociated alpha (known to have Map == null)
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putRGBcontig16bittile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            16-bit packed samples =&gt; RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putRGBAAcontig16bittile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            16-bit packed samples =&gt; RGBA w/ associated alpha (known to have Map == null)
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putRGBUAcontig16bittile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            16-bit packed samples =&gt; RGBA w/ unassociated alpha (known to have Map == null)
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putRGBcontig8bitCMYKtile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit packed CMYK samples w/o Map =&gt; RGB.
            NB: The conversion of CMYK-&gt;RGB is *very* crude.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putcontig8bitCIELab(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit packed CIE L*a*b 1976 samples =&gt; RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putcontig8bitYCbCr22tile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit packed YCbCr samples w/ 2,2 subsampling =&gt; RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putcontig8bitYCbCr21tile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit packed YCbCr samples w/ 2,1 subsampling =&gt; RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putcontig8bitYCbCr44tile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit packed YCbCr samples w/ 4,4 subsampling =&gt; RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putcontig8bitYCbCr42tile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit packed YCbCr samples w/ 4,2 subsampling =&gt; RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putcontig8bitYCbCr41tile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit packed YCbCr samples w/ 4,1 subsampling =&gt; RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putcontig8bitYCbCr11tile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit packed YCbCr samples w/ no subsampling =&gt; RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putcontig8bitYCbCr12tile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit packed YCbCr samples w/ 1,2 subsampling =&gt; RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putRGBseparate8bittile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            8-bit unpacked samples =&gt; RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putRGBAAseparate8bittile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            8-bit unpacked samples =&gt; RGBA w/ associated alpha
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putRGBUAseparate8bittile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            8-bit unpacked samples =&gt; RGBA w/ unassociated alpha
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putRGBseparate16bittile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            16-bit unpacked samples =&gt; RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putRGBAAseparate16bittile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            16-bit unpacked samples =&gt; RGBA w/ associated alpha
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putRGBUAseparate16bittile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            16-bit unpacked samples =&gt; RGBA w/ unassociated alpha
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putseparate8bitYCbCr11tile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            8-bit packed YCbCr samples w/ no subsampling =&gt; RGB
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.putRGBcontig8bitCMYKMaptile(BitMiracle.LibTiff.Classic.TiffRgbaImage,System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
            8-bit packed CMYK samples w/Map =&gt; RGB
            NB: The conversion of CMYK-&gt;RGB is *very* crude.
            </summary>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.IsContig">
      <summary>
            Gets a value indicating whether image data has contiguous (packed) or separated samples.
            </summary>
      <value>
        <c>true</c> if this image data has contiguous (packed) samples; otherwise,
            <c>false</c>.</value>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.Alpha">
      <summary>
            Gets the type of alpha data present.
            </summary>
      <value>The type of alpha data present.</value>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.Width">
      <summary>
            Gets the image width.
            </summary>
      <value>The image width.</value>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.Height">
      <summary>
            Gets the image height.
            </summary>
      <value>The image height.</value>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.BitsPerSample">
      <summary>
            Gets the image bits per sample count.
            </summary>
      <value>The image bits per sample count.</value>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.SamplesPerPixel">
      <summary>
            Gets the image samples per pixel count.
            </summary>
      <value>The image samples per pixel count.</value>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.Orientation">
      <summary>
            Gets the image orientation.
            </summary>
      <value>The image orientation.</value>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.ReqOrientation">
      <summary>
            Gets or sets the requested orientation.
            </summary>
      <value>The requested orientation.</value>
      <remarks>The <see cref="M:BitMiracle.LibTiff.Classic.TiffRgbaImage.GetRaster(System.Int32[],System.Int32,System.Int32,System.Int32)" /> method uses this value when placing converted
            image data into raster buffer.</remarks>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.Photometric">
      <summary>
            Gets the photometric interpretation of the image data.
            </summary>
      <value>The photometric interpretation of the image data.</value>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.Get">
      <summary>
            Gets or sets the "get" method (the method that is called to produce RGBA raster).
            </summary>
      <value>The "get" method.</value>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.PutContig">
      <summary>
            Gets or sets the "put" method (the method that is called to pack pixel data in the
            raster) used when converting contiguously packed samples.
            </summary>
      <value>The "put" method used when converting contiguously packed samples.</value>
    </member>
    <member name="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.PutSeparate">
      <summary>
            Gets or sets the "put" method (the method that is called to pack pixel data in the
            raster) used when converting separated samples.
            </summary>
      <value>The "put" method used when converting separated samples.</value>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.TiffRgbaImage.PutContigDelegate">
      <summary>
            Delegate for "put" method (the method that is called to pack pixel data in the raster)
            used when converting contiguously packed samples.
            </summary>
      <param name="img">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.TiffRgbaImage" /> class.</param>
      <param name="raster">The raster (the buffer to place decoded image data to).</param>
      <param name="rasterOffset">The zero-based byte offset in <paramref name="raster" /> at
            which to begin storing decoded bytes.</param>
      <param name="rasterShift">The value that should be added to
            <paramref name="rasterOffset" /> after each row processed.</param>
      <param name="x">The x-coordinate of the first pixel in block of pixels to be decoded.</param>
      <param name="y">The y-coordinate of the first pixel in block of pixels to be decoded.</param>
      <param name="width">The block width.</param>
      <param name="height">The block height.</param>
      <param name="buffer">The buffer with image data.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at
            which to begin reading image bytes.</param>
      <param name="bufferShift">The value that should be added to <paramref name="offset" />
            after each row processed.</param>
      <remarks>
        <para>
            The image reading and conversion methods invoke "put" methods to copy/image/whatever
            tiles of raw image data. A default set of methods is provided to convert/copy raw
            image data to 8-bit packed ABGR format rasters. Applications can supply alternate
            methods that unpack the data into a different format or, for example, unpack the data
            and draw the unpacked raster on the display.
            </para>
        <para>
            To setup custom "put" method for contiguously packed samples please use
            <see cref="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.PutContig" /> property.</para>
        <para>
            The <paramref name="bufferShift" /> is usually 0. It is greater than 0 if width of strip
            being converted is greater than image width or part of the tile being converted is
            outside the image (may be true for tiles on the right and bottom edge of the image).
            In other words, <paramref name="bufferShift" /> is used to make up for any padding on
            the end of each line of the buffer with image data.
            </para>
        <para>
            The <paramref name="rasterShift" /> is 0 if width of tile being converted is equal to
            image width and image data should not be flipped vertically. In other circumstances
            <paramref name="rasterShift" /> is used to make up for any padding on the end of each
            line of the raster and/or for flipping purposes.
            </para>
      </remarks>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.TiffRgbaImage.PutSeparateDelegate">
      <summary>
            Delegate for "put" method (the method that is called to pack pixel data in the raster)
            used when converting separated samples.
            </summary>
      <param name="img">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.TiffRgbaImage" /> class.</param>
      <param name="raster">The raster (the buffer to place decoded image data to).</param>
      <param name="rasterOffset">The zero-based byte offset in <paramref name="raster" /> at
            which to begin storing decoded bytes.</param>
      <param name="rasterShift">The value that should be added to
            <paramref name="rasterOffset" /> after each row processed.</param>
      <param name="x">The x-coordinate of the first pixel in block of pixels to be decoded.</param>
      <param name="y">The y-coordinate of the first pixel in block of pixels to be decoded.</param>
      <param name="width">The block width.</param>
      <param name="height">The block height.</param>
      <param name="buffer">The buffer with image data.</param>
      <param name="offset1">The zero-based byte offset in <paramref name="buffer" /> at
            which to begin reading image bytes that constitute first sample plane.</param>
      <param name="offset2">The zero-based byte offset in <paramref name="buffer" /> at
            which to begin reading image bytes that constitute second sample plane.</param>
      <param name="offset3">The zero-based byte offset in <paramref name="buffer" /> at
            which to begin reading image bytes that constitute third sample plane.</param>
      <param name="offset4">The zero-based byte offset in <paramref name="buffer" /> at
            which to begin reading image bytes that constitute fourth sample plane.</param>
      <param name="bufferShift">The value that should be added to <paramref name="offset1" />,
            <paramref name="offset2" />, <paramref name="offset3" /> and <paramref name="offset4" />
            after each row processed.</param>
      <remarks>
        <para>
            The image reading and conversion methods invoke "put" methods to copy/image/whatever
            tiles of raw image data. A default set of methods is provided to convert/copy raw
            image data to 8-bit packed ABGR format rasters. Applications can supply alternate
            methods that unpack the data into a different format or, for example, unpack the data
            and draw the unpacked raster on the display.
            </para>
        <para>
            To setup custom "put" method for separated samples please use
            <see cref="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.PutSeparate" /> property.</para>
        <para>
            The <paramref name="bufferShift" /> is usually 0. It is greater than 0 if width of strip
            being converted is greater than image width or part of the tile being converted is
            outside the image (may be true for tiles on the right and bottom edge of the image).
            In other words, <paramref name="bufferShift" /> is used to make up for any padding on
            the end of each line of the buffer with image data.
            </para>
        <para>
            The <paramref name="rasterShift" /> is 0 if width of tile being converted is equal to
            image width and image data should not be flipped vertically. In other circumstances
            <paramref name="rasterShift" /> is used to make up for any padding on the end of each
            line of the raster and/or for flipping purposes.
            </para>
      </remarks>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.TiffRgbaImage.GetDelegate">
      <summary>
            Delegate for "get" method (the method that is called to produce RGBA raster).
            </summary>
      <param name="img">An instance of the <see cref="T:BitMiracle.LibTiff.Classic.TiffRgbaImage" /> class.</param>
      <param name="raster">The raster (the buffer to place decoded image data to).</param>
      <param name="offset">The zero-based byte offset in <paramref name="raster" /> at which
            to begin storing decoded bytes.</param>
      <param name="width">The raster width.</param>
      <param name="height">The raster height.</param>
      <returns>
        <c>true</c> if the image was successfully read and decoded; otherwise,
            <c>false</c>.</returns>
      <remarks>
        <para>
            A default set of methods is provided to read and convert/copy raw image data to 8-bit
            packed ABGR format rasters. Applications can supply alternate method for this.
            </para>
        <para>
            To setup custom "get" method please use <see cref="P:BitMiracle.LibTiff.Classic.TiffRgbaImage.Get" /> property.
            </para>
      </remarks>
    </member>
    <member name="T:BitMiracle.LibTiff.Classic.TiffStream">
      <summary>
            A stream used by the library for TIFF reading and writing.
            </summary>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffStream.Read(System.Object,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a sequence of bytes from the stream and advances the position within the stream
            by the number of bytes read.
            </summary>
      <param name="clientData">A client data (by default, an underlying stream).</param>
      <param name="buffer">An array of bytes. When this method returns, the
            <paramref name="buffer" /> contains the specified byte array with the values between
            <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1)
            replaced by the bytes read from the current source.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which
            to begin storing the data read from the current stream.</param>
      <param name="count">The maximum number of bytes to be read from the current stream.</param>
      <returns>The total number of bytes read into the <paramref name="buffer" />. This can
            be less than the number of bytes requested if that many bytes are not currently
            available, or zero (0) if the end of the stream has been reached.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffStream.Write(System.Object,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a sequence of bytes to the current stream and advances the current position
            within this stream by the number of bytes written.
            </summary>
      <param name="clientData">A client data (by default, an underlying stream).</param>
      <param name="buffer">An array of bytes. This method copies <paramref name="count" />
            bytes from <paramref name="buffer" /> to the current stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which
            to begin copying bytes to the current stream.</param>
      <param name="count">The number of bytes to be written to the current stream.</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffStream.Seek(System.Object,System.Int64,System.IO.SeekOrigin)">
      <summary>
            Sets the position within the current stream.
            </summary>
      <param name="clientData">A client data (by default, an underlying stream).</param>
      <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
      <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the
            reference point used to obtain the new position.</param>
      <returns>The new position within the current stream.</returns>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffStream.Close(System.Object)">
      <summary>
            Closes the current stream.
            </summary>
      <param name="clientData">A client data (by default, an underlying stream).</param>
    </member>
    <member name="M:BitMiracle.LibTiff.Classic.TiffStream.Size(System.Object)">
      <summary>
            Gets the length in bytes of the stream.
            </summary>
      <param name="clientData">A client data (by default, an underlying stream).</param>
      <returns>The length of the stream in bytes.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.WriteBIFFStream.prepend(System.Byte[])">
      <summary>
            Вставляет данные в начало списка
            </summary>
      <param name="bArray">Данные для вставки</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.WriteBIFFStream.append(System.Byte[])">
      <summary>
            Добавляет данные в конец списка
            </summary>
      <param name="bArray">Данные для добавления</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.WriteBIFFStream.storeBof(Bytescout.Spreadsheet.Constants.BIFFTYPE)">
      <summary>
            Вставляет в начало списка запись BOF указывающую на начало потока или
            подпотока BIFF файла. (BIFF5/BIFF7)
            </summary>
      <param name="bofType">Type of BIFF file to write</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.WriteBIFFStream.storeEof">
      <summary>
            Добавляет в конец списка запись EOF указывающую на конец BIFF потока.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.BiffRecList.Add(Bytescout.Spreadsheet.BaseClasses.BiffRec)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.BaseClasses.BiffRec" /> to the end of the BiffRecList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.BaseClasses.BiffRec" /> to be added to the end of the BiffRecList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.BiffRecList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.BaseClasses.BiffRecList" />.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.BiffRecList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.BaseClasses.BiffRec" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.BiffRecList.Count">
      <summary>
            Gets the number of elements actually contained in the BiffRecList.
            </summary>
      <value>The number of elements actually contained in the BiffRecList.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.BaseClasses.CellAddress">
      <summary>
            Cell address 
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.ICellAddress">
      <summary>
            Cell address interface
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ICellAddress.IsEmpty">
      <summary>
            Indicates whether the specified CellAddress is empty.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICellAddress.Column">
      <summary>
            Column index
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICellAddress.ColumnRelative">
      <summary>
            Specifies a relative or absolute column index
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICellAddress.Row">
      <summary>
            Row index
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICellAddress.RowRelative">
      <summary>
            Specifies a relative or absolute row index
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.CellAddress.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BaseClasses.CellAddress" /> class
            with Row = -1 and Column = -1.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.CellAddress.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BaseClasses.CellAddress" /> class.
            </summary>
      <param name="Row">The row.</param>
      <param name="Column">The column.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.CellAddress.GetCellAddress(System.String)">
      <summary>
            Gets the cell address.
            </summary>
      <param name="A1Ref">The a1 ref.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.CellAddress.IsEmpty">
      <summary>
            Indicates whether the specified CellAddress is empty.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.CellAddress.Row">
      <summary>
            Row index
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.CellAddress.Column">
      <summary>
            Column index
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.CellAddress.RowRelative">
      <summary>
            Specifies a relative or absolute row index
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.CellAddress.ColumnRelative">
      <summary>
            Specifies a relative or absolute column index
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress">
      <summary>
            Cell range address
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress.FirstRow">
      <summary>
            First row index
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress.LastRow">
      <summary>
            Last row index
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress.FirstColumn">
      <summary>
            First column index
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress.LastColumn">
      <summary>
            Last column index
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress.FirstRowRelative">
      <summary>
            Specifies a relative or absolute first row index
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress.LastRowRelative">
      <summary>
            Specifies a relative or absolute last row index
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress.FirstColumnRelative">
      <summary>
            Specifies a relative or absolute first column index
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress.LastColumnRelative">
      <summary>
            Specifies a relative or absolute last column index
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress" /> struct.
            </summary>
      <param name="firstRow">The first row.</param>
      <param name="lastRow">The last row.</param>
      <param name="firstColumn">The first column.</param>
      <param name="lastColumn">The last column.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress.GetCellRangeAddress(System.String)">
      <summary>
            Gets the cell range address.
            </summary>
      <param name="A1Ref">The a1 ref.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.CellRangeAddressList.Add(Bytescout.Spreadsheet.BaseClasses.CellRangeAddress)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress" /> to the end of the CellRangeAddressList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress" /> to be added to the end of the CellRangeAddressList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.CellRangeAddressList.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress" />. 
            </summary>
      <param name="index">The The zero-based index of the element to remove.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.CellRangeAddressList.Item(System.Int32)">
      <summary>
            Gets or set the <see cref="T:Bytescout.Spreadsheet.BaseClasses.CellRangeAddress" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.CellRangeAddressList.Count">
      <summary>
            Gets the number of elements actually contained in the CellRangeAddressList.
            </summary>
      <value>The number of elements actually contained in the CellRangeAddressList.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.FontListBase.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.FontListBase.Count">
      <summary>
            Gets the number of elements actually contained in the <see cref="T:Bytescout.Spreadsheet.BaseClasses.FontListBase" />.
            </summary>
      <value>The number of elements actually contained in the SpreadsheetFontList.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.BaseClasses.FontList">
      <summary>
            Represents fonts table of Workbook
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.FontList.Add(Bytescout.Spreadsheet.SpreadsheetFont)">
      <summary>
            Adds the <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> to the end of the FontList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> to be added to the end of the <see cref="T:Bytescout.Spreadsheet.BaseClasses.FontList" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.FontList.IndexOfKey(Bytescout.Spreadsheet.SpreadsheetFont)">
      <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> in the FontList
            </summary>
      <param name="xlsfont">The <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" />.</param>
      <returns>The zero-based index of the first occurrence of item within the entire FontList.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.Math2.GCD(System.Int32,System.Int32)">
      <summary>
            Find the Greatest Common Divisor
            </summary>
      <param name="a">Number a.</param>
      <param name="b">Number b.</param>
      <returns>The greatest common divisor</returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.BaseClasses.MD4">
      <summary>
            Implements the MD4 message digest algorithm in C#
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.BaseClasses.MD4.BLOCK_LENGTH">
      <summary>
            The size in bytes of the input block to the transformation algorithm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.BaseClasses.MD4.context">
      <summary>
            4 32-bit words (interim result)
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.BaseClasses.MD4.count">
      <summary>
            Number of bytes procesed so far mod. 2 power of 64.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.BaseClasses.MD4.buffer">
      <summary>
            512-bit input buffer = 16 x 32-bit words holds until it reaches 512 bits
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.BaseClasses.MD4.X">
      <summary>
            512-bit work buffer = 16 x 32-bit words
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.MD4.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BaseClasses.MD4" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.MD4.#ctor(Bytescout.Spreadsheet.BaseClasses.MD4)">
      <summary>
            This constructor is here to implement the clonability of this class
            </summary>
      <param name="md">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.MD4.Clone">
      <summary>
            Clones this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.MD4.engineReset">
      <summary>
            Resets this object disregarding any temporary data present at the
            time of the invocation of this call.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.MD4.engineUpdate(System.Byte)">
      <summary>
            Continues an MD4 message digest using the input byte
            </summary>
      <param name="b">byte to input</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.MD4.engineUpdate(System.Byte[],System.Int32,System.Int32)">
      <summary>
            MD4 block update operation
            </summary>
      <remarks>
            Continues an MD4 message digest operation by filling the buffer, 
            transform(ing) data in 512-bit message block(s), updating the variables
            context and count, and leaving (buffering) the remaining bytes in buffer
            for the next update or finish.
            </remarks>
      <param name="input">input block</param>
      <param name="offset">start of meaningful bytes in input</param>
      <param name="len">count of bytes in input blcok to consider</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.MD4.engineDigest">
      <summary>
            Completes the hash computation by performing final operations such
            as padding.  At the return of this engineDigest, the MD engine is
            reset.
            </summary>
      <returns>the array of bytes for the resulting hash value.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.MD4.GetByteHashFromString(System.String)">
      <summary>
            Returns a byte hash from a string
            </summary>
      <param name="s">string to hash</param>
      <returns>byte-array that contains the hash</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.MD4.GetByteHashFromBytes(System.Byte[])">
      <summary>
            Returns a binary hash from an input byte array
            </summary>
      <param name="b">byte-array to hash</param>
      <returns>binary hash of input</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.MD4.GetHexHashFromBytes(System.Byte[])">
      <summary>
            Returns a string that contains the hexadecimal hash
            </summary>
      <param name="b">byte-array to input</param>
      <returns>String that contains the hex of the hash</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.MD4.GetByteHashFromByte(System.Byte)">
      <summary>
            Returns a byte hash from the input byte
            </summary>
      <param name="b">byte to hash</param>
      <returns>binary hash of the input byte</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.MD4.GetHexHashFromByte(System.Byte)">
      <summary>
            Returns a string that contains the hexadecimal hash
            </summary>
      <param name="b">byte to hash</param>
      <returns>String that contains the hex of the hash</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.MD4.GetHexHashFromString(System.String)">
      <summary>
            Returns a string that contains the hexadecimal hash
            </summary>
      <param name="s">string to hash</param>
      <returns>String that contains the hex of the hash</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.MD4.transform(System.Byte[]@,System.Int32)">
      <summary>
            MD4 basic transformation
            </summary>
      <remarks>
            Transforms context based on 512 bits from input block starting
            from the offset'th byte.
            </remarks>
      <param name="block">input sub-array</param>
      <param name="offset">starting position of sub-array</param>
    </member>
    <member name="T:Bytescout.Spreadsheet.BaseClasses.PageSetup">
      <summary>
            Page setup settings for the worksheet.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.BlackAndWhite">
      <summary>
            Gets or sets a value indicating whether the document is printed in black and white.
            </summary>
      <value>
        <c>true</c> if the document is printed in black and white; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.BottomMargin">
      <summary>
            Gets or sets the size of the bottom margin, in points.
            </summary>
      <value>The bottom margin.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.CenterHorizontally">
      <summary>
            Gets or sets a value indicating whether the sheet is centered horizontally on the page when it's printed.
            </summary>
      <value>
        <c>true</c> if the sheet is centered horizontally on the page when it's printed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.CenterVertically">
      <summary>
            Gets or sets a value indicating whether sheet is centered vertically on the page when it's printed.
            </summary>
      <value>
        <c>true</c> if sheet is centered vertically on the page when it's printed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.Copies">
      <summary>
            Gets or sets the number of copies to print.
            </summary>
      <value>The number of copies to print.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.Draft">
      <summary>
            Gets or sets a value indicating whether the sheet will be printed without graphics.
            </summary>
      <value>
        <c>true</c> if print without graphics; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.FirstPageNumber">
      <summary>
            Gets or sets the first page number that will be used when this sheet is printed.
            </summary>
      <value>The Page number for first printed page.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.FitToPagesTall">
      <summary>
            Gets or sets the number of pages tall the worksheet will be scaled to when it's printed.
            </summary>
      <value>Number of vertical pages to fit on.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.FitToPagesWide">
      <summary>
            Gets or sets  the number of pages wide the worksheet will be scaled to when it's printed.
            </summary>
      <value>Number of horizontal pages to fit on.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.FooterMargin">
      <summary>
            Gets or sets the distance from the bottom of the page to the footer, in points.
            </summary>
      <value>The footer margin.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.HeaderMargin">
      <summary>
            Gets or sets the distance from the top of the page to the header, in points.
            </summary>
      <value>The header margin.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.LeftMargin">
      <summary>
            Gets or sets the size of the left margin, in points.
            </summary>
      <value>The left margin.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.Order">
      <summary>
            Gets or sets  the order that Microsoft Excel uses to number pages when printing a large worksheet.
            </summary>
      <value>Order of printed pages.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.Orientation">
      <summary>
            Gets or sets the page orientation.
            </summary>
      <value>The page orientation.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.PaperSize">
      <summary>
            Gets or sets the size of the paper.
            </summary>
      <value>The size of the paper.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.PrintComments">
      <summary>
            Gets or sets the way comments are printed with the sheet.
            </summary>
      <value>The print comments.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.PrintErrors">
      <summary>
            Gets or sets an <see cref="P:Bytescout.Spreadsheet.COM.IPageSetup.PrintErrors" /> contstant specifying the type of print error displayed.
            </summary>
      <value>The type of print error displayed.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.PrintNotes">
      <summary>
            Gets or sets a value indicating whether cell notes are printed as end notes with the sheet.
            </summary>
      <value>
        <c>true</c> if cell notes are printed as end notes with the sheet; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.PrintQualityHorizontal">
      <summary>
            Gets or sets the horizontal print resolution of the device in dots per inch (DPI).
            </summary>
      <value>The horizontal print resolution.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.PrintQualityVertical">
      <summary>
            Gets or sets the vertical print resolution of the device in dots per inch (DPI).
            </summary>
      <value>The vertical print resolution.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.RightMargin">
      <summary>
            Gets or sets the size of the right margin, in points.
            </summary>
      <value>The right margin.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.TopMargin">
      <summary>
            Gets or sets the size of the top margin, in points.
            </summary>
      <value>The top margin.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.UseFirstPageNumber">
      <summary>
            Gets or sets a value indicating whether use FirstPageNumber value for first page number, and do not auto number the pages.
            </summary>
      <value>
        <c>true</c> if use FirstPageNumber value for first page number; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IPageSetup.Zoom">
      <summary>
            Gets or sets the percentage (between 10 and 400 percent) by which Microsoft Excel will scale the worksheet for printing.
            </summary>
      <value>The scaling factor for printing as a percentage.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.PageSetup.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BaseClasses.PageSetup" /> class.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.PaperSize">
      <summary>
            Gets or sets the size of the paper.
            </summary>
      <value>The size of the paper.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.Zoom">
      <summary>
            Gets or sets the percentage (between 10 and 400 percent) by which Microsoft Excel will scale the worksheet for printing.
            </summary>
      <value>The scaling factor for printing as a percentage.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.FirstPageNumber">
      <summary>
            Gets or sets the first page number that will be used when this sheet is printed.
            </summary>
      <value>The Page number for first printed page.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.UseFirstPageNumber">
      <summary>
            Gets or sets a value indicating whether use FirstPageNumber value for first page number, and do not auto number the pages.
            </summary>
      <value>
        <c>true</c> if use FirstPageNumber value for first page number; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.FitToPagesWide">
      <summary>
            Gets or sets  the number of pages wide the worksheet will be scaled to when it's printed.
            </summary>
      <value>Number of horizontal pages to fit on.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.FitToPagesTall">
      <summary>
            Gets or sets the number of pages tall the worksheet will be scaled to when it's printed.
            </summary>
      <value>Number of vertical pages to fit on.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.Order">
      <summary>
            Gets or sets  the order that Microsoft Excel uses to number pages when printing a large worksheet.
            </summary>
      <value>Order of printed pages.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.Orientation">
      <summary>
            Gets or sets the page orientation.
            </summary>
      <value>The page orientation.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.BlackAndWhite">
      <summary>
            Gets or sets a value indicating whether the document is printed in black and white.
            </summary>
      <value>
        <c>true</c> if the document is printed in black and white; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.Draft">
      <summary>
            Gets or sets a value indicating whether the sheet will be printed without graphics.
            </summary>
      <value>
        <c>true</c> if print without graphics; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.PrintComments">
      <summary>
            Gets or sets the way comments are printed with the sheet.
            </summary>
      <value>The print comments.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.PrintNotes">
      <summary>
            Gets or sets a value indicating whether cell notes are printed as end notes with the sheet.
            </summary>
      <value>
        <c>true</c> if cell notes are printed as end notes with the sheet; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.PrintErrors">
      <summary>
            Gets or sets an <see cref="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.PrintErrors" /> contstant specifying the type of print error displayed.
            </summary>
      <value>The type of print error displayed.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.PrintQualityHorizontal">
      <summary>
            Gets or sets the horizontal print resolution of the device in dots per inch (DPI).
            </summary>
      <value>The horizontal print resolution.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.PrintQualityVertical">
      <summary>
            Gets or sets the vertical print resolution of the device in dots per inch (DPI).
            </summary>
      <value>The vertical print resolution.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.HeaderMargin">
      <summary>
            Gets or sets the distance from the top of the page to the header, in points.
            </summary>
      <value>The header margin.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.FooterMargin">
      <summary>
            Gets or sets the distance from the bottom of the page to the footer, in points.
            </summary>
      <value>The footer margin.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.Copies">
      <summary>
            Gets or sets the number of copies to print.
            </summary>
      <value>The number of copies to print.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.BottomMargin">
      <summary>
            Gets or sets the size of the bottom margin, in points.
            </summary>
      <value>The bottom margin.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.LeftMargin">
      <summary>
            Gets or sets the size of the left margin, in points.
            </summary>
      <value>The left margin.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.RightMargin">
      <summary>
            Gets or sets the size of the right margin, in points.
            </summary>
      <value>The right margin.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.TopMargin">
      <summary>
            Gets or sets the size of the top margin, in points.
            </summary>
      <value>The top margin.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.CenterHorizontally">
      <summary>
            Gets or sets a value indicating whether the sheet is centered horizontally on the page when it's printed.
            </summary>
      <value>
        <c>true</c> if the sheet is centered horizontally on the page when it's printed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.PageSetup.CenterVertically">
      <summary>
            Gets or sets a value indicating whether sheet is centered vertically on the page when it's printed.
            </summary>
      <value>
        <c>true</c> if sheet is centered vertically on the page when it's printed; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.BaseClasses.RichText">
      <summary>
            Class for conversion of RichText from inner xls notation to like html presentation and back.
            For like html presentationof RichText following tags are supported:
            &lt;b&gt; - italic
            &lt;i&gt; - bold
            &lt;u&gt; - underline
            &lt;u double&gt; - double underline
            &lt;s&gt; - strikethrough
            &lt;sup&gt; - superscript
            &lt;sub&gt; - subscript
            &lt;font color= face= size=&gt; - font color, font name, font size
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.RichText.#ctor(Bytescout.Spreadsheet.BaseClasses.FontList)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BaseClasses.RichText" /> class.
            </summary>
      <param name="fonttable">The workbook FontTable.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.RichText.HtmlToRichText(System.String,Bytescout.Spreadsheet.SpreadsheetFont)">
      <summary>
            Convert html like string htmlText to xls format of RichText.
            </summary>
      <param name="htmlText">The html like string.</param>
      <param name="DefaultFont">The default cell font.</param>
      <returns>The xls format of RichText</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.RichText.RichTextToHtml(System.String,Bytescout.Spreadsheet.Records.FormattingRun[],Bytescout.Spreadsheet.SpreadsheetFont)">
      <summary>
            Convert xls format of RichText to html like string.
            </summary>
      <param name="Text">The text.</param>
      <param name="FormattingRuns">The xls format of text.</param>
      <param name="DefaultFont">The cell default font.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.RichText.getFontIndex(Bytescout.Spreadsheet.SpreadsheetFont)">
      <summary>
            Gets the index of the font in FontTable.
            </summary>
      <param name="XFont">The font.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.RichText.HtmlToText(System.String)">
      <summary>
            Convert html like string htmlText to simle string.
            </summary>
      <param name="htmlText">The html like string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.Utilities.SplitString(System.String,System.Char[],System.Boolean)">
      <summary>
            Splits the string into chunks.
            </summary>
      <param name="s">The string to split.</param>
      <param name="separators">The separators.</param>
      <param name="removeEmptyEntries">if set to <c>true</c> then empty entries are removed from result.</param>
      <returns>
            Array of chunks (empty chunks are removed if necessary)
            </returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.BaseClasses.ViewOptions">
      <summary>
            View options
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IViewOptions">
      <summary>
            View options
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.ActivePane">
      <summary>
            Gets or sets the active pane.
            </summary>
      <value>The active pane.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.FrozenNoSplit">
      <summary>
            Gets or sets a value indicating whether the panes in the window are frozen with pane splits or without
            </summary>
      <value>
        <c>true</c> if frozen without pane splits; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.GridLineColor">
      <summary>
            Gets or sets the color of the gridlines
            </summary>
      <value>The color of the gridline.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.GridLinesColorEnabled">
      <summary>
            Gets or sets a value indicating whether the gridlines of the window are drawn with the window default foreground color or with the color specified by the value of <see cref="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.GridLineColor" /> option.
            </summary>
      <value>
        <c>true</c> to use window default foreground color; otherwise, <c>false</c> to use <see cref="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.GridLineColor" /> for this purpose instead.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.PageBreakPreview">
      <summary>
            Gets or sets a value indicating whether the sheet is in a Page Break Preview view
            </summary>
      <value>
        <c>true</c> if show in a page break preview; <c>false</c> if show in a normal view.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.Paged">
      <summary>
            Gets or sets a value indicating whether the sheet is currently being displayed in the window.
            </summary>
      <value>
        <c>true</c> if the sheet is currently being displayed in the window; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.PanesFrozen">
      <summary>
            Gets or sets a value indicating whether the panes in the window are frozen (locked) or not
            </summary>
      <value>
        <c>true</c> if panes are frozen (locked); otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.RightToLeft">
      <summary>
            Gets or sets a value indicating whether columns are displayed in right-to-left mode or not.
            </summary>
      <value>
        <c>true</c> if columns are displayed from right to left; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.Selected">
      <summary>
            Gets or sets a value indicating whether the sheet tab is selected
            </summary>
      <value>
        <c>true</c> if the sheet tab is selected; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.ShowFormulas">
      <summary>
            Gets or sets a value indicating whether formulas or values only are displayed in the <see cref="T:Bytescout.Spreadsheet.Worksheet" /></summary>
      <value>
        <c>true</c> if display formulas; <c>false</c> if display values.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.ShowGridLines">
      <summary>
            Gets or sets a value indicating whether gridlines are shown in the <see cref="T:Bytescout.Spreadsheet.Worksheet" /></summary>
      <value>
        <c>true</c> if show gridlines; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.ShowGuts">
      <summary>
            Gets or sets a value indicating whether the window displays the outline symbols or not.
            </summary>
      <value>
        <c>true</c> to show outline symbols; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.ShowSheetHeaders">
      <summary>
            Gets or sets a value indicating whether column headings are visible or not in the <see cref="T:Bytescout.Spreadsheet.Worksheet" /></summary>
      <value>
        <c>true</c> if show row and column headings; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.ShowZeroValues">
      <summary>
            Gets or sets a value indicating whether  the <see cref="T:Bytescout.Spreadsheet.Worksheet" /> displays zero values or not
            </summary>
      <value>
        <c>true</c> if show values of zero as a zero symbol; <c>false</c> if zero values should be displayed as blank.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.SplitColumn">
      <summary>
            Gets or sets the column number where the window is split into panes (the number of columns to the left of the split line).
            </summary>
      <value>The split column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.SplitHorizontal">
      <summary>
            Gets or sets the location of the horizontal window split, in points.
            </summary>
      <value>The split horizontal.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.SplitRow">
      <summary>
            Gets or sets the row number where the window is split into panes (the number of rows above the split).
            </summary>
      <value>The split row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.SplitVertical">
      <summary>
            Gets or sets the location of the vertical window split, in points.
            </summary>
      <value>The split vertical.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IViewOptions.Zoom">
      <summary>
            Gets or sets the display size of the window, as a percentage.
            </summary>
      <value>The zoom.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.GridLineColor">
      <summary>
            Gets or sets the color of the gridlines
            </summary>
      <value>The color of the gridline.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.ShowFormulas">
      <summary>
            Gets or sets a value indicating whether formulas or values only are displayed in the <see cref="T:Bytescout.Spreadsheet.Worksheet" /></summary>
      <value>
        <c>true</c> if display formulas; <c>false</c> if display values.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.ShowGridLines">
      <summary>
            Gets or sets a value indicating whether gridlines are shown in the <see cref="T:Bytescout.Spreadsheet.Worksheet" /></summary>
      <value>
        <c>true</c> if show gridlines; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.ShowSheetHeaders">
      <summary>
            Gets or sets a value indicating whether column headings are visible or not in the <see cref="T:Bytescout.Spreadsheet.Worksheet" /></summary>
      <value>
        <c>true</c> if show row and column headings; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.PanesFrozen">
      <summary>
            Gets or sets a value indicating whether the panes in the window are frozen (locked) or not
            </summary>
      <value>
        <c>true</c> if panes are frozen (locked); otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.ShowZeroValues">
      <summary>
            Gets or sets a value indicating whether  the <see cref="T:Bytescout.Spreadsheet.Worksheet" /> displays zero values or not
            </summary>
      <value>
        <c>true</c> if show values of zero as a zero symbol; <c>false</c> if zero values should be displayed as blank.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.GridLinesColorEnabled">
      <summary>
            Gets or sets a value indicating whether the gridlines of the window are drawn with the window default foreground color or with the color specified by the value of <see cref="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.GridLineColor" /> option.
            </summary>
      <value>
        <c>true</c> to use window default foreground color; otherwise, <c>false</c> to use <see cref="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.GridLineColor" /> for this purpose instead.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.RightToLeft">
      <summary>
            Gets or sets a value indicating whether columns are displayed in right-to-left mode or not.
            </summary>
      <value>
        <c>true</c> if columns are displayed from right to left; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.ShowGuts">
      <summary>
            Gets or sets a value indicating whether the window displays the outline symbols or not.
            </summary>
      <value>
        <c>true</c> to show outline symbols; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.FrozenNoSplit">
      <summary>
            Gets or sets a value indicating whether the panes in the window are frozen with pane splits or without
            </summary>
      <value>
        <c>true</c> if frozen without pane splits; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.Selected">
      <summary>
            Gets or sets a value indicating whether the sheet tab is selected
            </summary>
      <value>
        <c>true</c> if the sheet tab is selected; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.Paged">
      <summary>
            Gets or sets a value indicating whether the sheet is currently being displayed in the window.
            </summary>
      <value>
        <c>true</c> if the sheet is currently being displayed in the window; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.PageBreakPreview">
      <summary>
            Gets or sets a value indicating whether the sheet is in a Page Break Preview view
            </summary>
      <value>
        <c>true</c> if show in a page break preview; <c>false</c> if show in a normal view.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.ActivePane">
      <summary>
            Gets or sets the active pane.
            </summary>
      <value>The active pane.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.SplitColumn">
      <summary>
            Gets or sets the column number where the window is split into panes (the number of columns to the left of the split line).
            </summary>
      <value>The split column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.SplitRow">
      <summary>
            Gets or sets the row number where the window is split into panes (the number of rows above the split).
            </summary>
      <value>The split row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.SplitHorizontal">
      <summary>
            Gets or sets the location of the horizontal window split, in points.
            </summary>
      <value>The split horizontal.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.SplitVertical">
      <summary>
            Gets or sets the location of the vertical window split, in points.
            </summary>
      <value>The split vertical.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ViewOptions.Zoom">
      <summary>
            Gets or sets the display size of the window, as a percentage.
            </summary>
      <value>The zoom.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.WorksheetStorage.CopyRecord(System.UInt16,System.Int32,Bytescout.Spreadsheet.Worksheet,System.Byte[])">
      <summary>
            Копируем запись record, если она есть.
            </summary>
      <param name="record">The record.</param>
      <param name="start">The start.</param>
      <param name="worksheet">The worksheet.</param>
      <param name="oldstream">The oldstream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.ExtendedFormats.Add(Bytescout.Spreadsheet.ExtendedFormat)">
      <summary>
            Adds the <see cref="T:Bytescout.Spreadsheet.ExtendedFormat" /> to the end of the ExtendedFormats.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.ExtendedFormat" /> to be added to the end of the <see cref="T:Bytescout.Spreadsheet.BaseClasses.ExtendedFormats" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.ExtendedFormats.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.BaseClasses.ExtendedFormats" />.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ExtendedFormats.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.ExtendedFormat" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.ExtendedFormats.Count">
      <summary>
            Gets the number of elements actually contained in the <see cref="T:Bytescout.Spreadsheet.BaseClasses.ExtendedFormats" />.
            </summary>
      <value>The number of elements actually contained in the ExtendedFormats.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.XFList.Add(Bytescout.Spreadsheet.Records.XF)">
      <summary>
            Adds the <see cref="T:Bytescout.Spreadsheet.ExtendedFormat" /> to the end of the XFList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.ExtendedFormat" /> to be added to the end of the <see cref="T:Bytescout.Spreadsheet.BaseClasses.XFList" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.XFList.IndexOfKey(System.String)">
      <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:Bytescout.Spreadsheet.ExtendedFormat" /> in the XFList.
            </summary>
      <param name="key">The <see cref="P:Bytescout.Spreadsheet.Records.XF.Key" />.</param>
      <returns>The zero-based index of the first occurrence of item within the entire XFList, if found; otherwise, –1</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.XFList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.ExtendedFormat" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.XFList.Count">
      <summary>
            Gets the number of elements actually contained in the ExtendedFormatList.
            </summary>
      <value>The count.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.BaseClasses.XlsBiffStream">
      <summary>
            Represents a BIFF stream
            </summary>
    </member>
    <member name="T:Bytescout.MSCompoundFile.StorageStream">
      <summary>
            Represents a compound file stream
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.StorageStream.#ctor(System.IO.Stream,Bytescout.MSCompoundFile.AFat,System.UInt32,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.StorageStream" /> class.
            </summary>
      <param name="CFStream">Compound file stream.</param>
      <param name="FAT">Compound file FAT.</param>
      <param name="SectorSize">Sector Size of FAT.</param>
      <param name="StartSector">First Sector of Storage stream.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.StorageStream.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.StorageStream" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.StorageStream.ReadStream">
      <summary>
            Reads stream data from file
            </summary>
      <returns>Stream data</returns>
    </member>
    <member name="M:Bytescout.MSCompoundFile.StorageStream.WriteStream(System.Byte[])">
      <summary>
            Write stream data to file
            </summary>
      <param name="data">byte array for write</param>
    </member>
    <member name="P:Bytescout.MSCompoundFile.StorageStream.BaseSector">
      <summary>
            Returns number of first stream sector
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.StorageStream.SectorSize">
      <summary>
            Returns Sector Size of Stream
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.XlsBiffStream.Seek(System.UInt32,System.IO.SeekOrigin)">
      <summary>
            Sets stream pointer to the specified offset
            </summary>
      <param name="offset">Offset value</param>
      <param name="origin">Offset origin</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.XlsBiffStream.Read">
      <summary>
            Reads record under cursor and advances cursor position to next record
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.XlsBiffStream.ReadAt(System.Int32)">
      <summary>
            Reads record at specified offset, does not change cursor position
            </summary>
      <param name="offset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.XlsBiffStream.Size">
      <summary>
            Returns size of BIFF stream in bytes
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.XlsBiffStream.NewSize">
      <summary>
            Returns size of new BIFF stream in bytes
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.BaseClasses.XlsBiffStream.Position">
      <summary>
            Returns current position in BIFF stream
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.BaseClasses.XLSCompoundFile">
      <summary>
            Class for operation with xls files
            </summary>
    </member>
    <member name="T:Bytescout.MSCompoundFile.CompoundFile">
      <summary>
            Base class for operations with a compound file (OLE file).
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.CompoundFile.NewDocument">
      <summary>
            Indicates if the class contains new document or not.
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.CompoundFile.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.CompoundFile" /> class.
            </summary>
      <param name="olestream">Stream with compound file.</param>
      <param name="newdoc">set to <c>true</c> [newdoc] if you want to create new compound file.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.CompoundFile.StreamRead">
      <summary>
            Read of compound file structures.
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.CompoundFile.WriteToFile(System.IO.Stream)">
      <summary>
            Saving of the new document.
            </summary>
      <param name="astream">The stream in which is written the document.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.CompoundFile.WriteToFile2(System.IO.Stream)">
      <summary>
            Method flushes currently opened document into stream
            </summary>
      <param name="astream">The stream to write the document into.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.CompoundFile.WriteStreamsData(System.IO.Stream)">
      <summary>
            Write the data of compound file streams.
            </summary>
      <param name="stream">The compound file.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.CompoundFile.WriteFat(System.IO.Stream)">
      <summary>
            Write the FAT.
            </summary>
      <param name="stream">The compound file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.XLSCompoundFile.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BaseClasses.XLSCompoundFile" /> class.
            </summary>
      <param name="file">The xls file.</param>
      <param name="New">if set to <c>true</c> [new].</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.XLSCompoundFile.Read(Bytescout.Spreadsheet.Spreadsheet)">
      <summary>
            Reads this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.XLSCompoundFile.Write(Bytescout.Spreadsheet.Workbook)">
      <summary>
            Writes the specified workbook to <see cref="F:Bytescout.MSCompoundFile.CompoundFile.ole2Stream" />.
            </summary>
      <param name="workbook">The workbook.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.XLSCompoundFile.Write(System.IO.Stream,Bytescout.Spreadsheet.Workbook)">
      <summary>
            Writes the specified workbook to a stream object
            </summary>
      <param name="stream">The stream.</param>
      <param name="workbook">The workbook.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.XLSCompoundFile.ReadXLSBiffStream">
      <summary>
            Reads the Biff stream from compound file (OLE file) stream
            </summary>
      <returns>Biff stream</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.XLSCompoundFile.ReadXLSSummaryInformation(Bytescout.Spreadsheet.Workbook)">
      <summary>
            Reads the SummaryInformation from a compound file (OLE file)
            </summary>
      <param name="Workbook">The workbook.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BaseClasses.XLSCompoundFile.WorkBook">
      <summary>
            Finds the "Workbook" entry in the compound file (OLE file)
            </summary>
      <returns>The "Workbook" entry</returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.CacheType">
      <summary>
            XLS format file caching type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.CacheType.Memory">
      <summary>
            (0) Memory caching
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.CacheType.File">
      <summary>
            (1) File caching
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Cell">
      <summary>
            Cell class 
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.ICell">
      <summary>
            Cell interface
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ICell.Clear">
      <summary>
            Clears this cell.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ICell.Calculate">
      <summary>
            Calculates of formula this cell (if formula is set for this cell)
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ICell.GetAddress">
      <summary>
             Returns address of the cell as CellAddress object.
            </summary>
      <returns>Address of the cell.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ICell.ToDateTime">
      <summary>
            Return the cell value as date time, see type <see cref="T:System.DateTime" /></summary>
      <value>The cell value as <see cref="T:System.DateTime" />.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ICell.ToHTML">
      <summary>
            Return the formatted text (Rich-Text) in HTML coded format
            </summary>
      <returns>The like html presentation of formatted text</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ICell.ToInteger">
      <summary>
            Return cell value as integer, see type <see cref="T:System.Int32" />.
            </summary>
      <returns>The cell value as <see cref="T:System.Int32" /></returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ICell.ToDouble">
      <summary>
            Return cell value as double, see type <see cref="T:System.Double" />.
            </summary>
      <returns>The cell value as <see cref="T:System.Double" /></returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ICell.ToString">
      <summary>
            Toes the string.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.Value">
      <summary>
            Gets or sets the value of cell.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.ValueAsExcelDisplays">
      <summary>
            Returns the formatted string value of the cell in the sam way you would see in Excel or another spreadsheet editor. Formatting uses the <see cref="P:Bytescout.Spreadsheet.COM.ICell.NumberFormatString" /> formatting string settings to format the value.
            </summary>
      <value>The string with the formatted value.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.ValueAsHTML">
      <summary>
            Gets or sets the formatted text (Rich-Text) in HTML coded format
            </summary>
      <value>The like html presentation of formatted text.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.ValueAsString">
      <summary>
            Returns the formatted string value of the cell in the sam way you would see in Excel or another spreadsheet editor. Formatting uses the <see cref="P:Bytescout.Spreadsheet.COM.ICell.NumberFormatString" /> settings to format the value.
            </summary>
      <value>The string with the formatted value.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.ValueAsDouble">
      <summary>
            Gets the value as double.
            </summary>
      <value>The value as double.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.ValueAsInteger">
      <summary>
            Gets the value as integer.
            </summary>
      <value>The value as integer.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.ValueAsBoolean">
      <summary>
            Gets a value as boolean.
            </summary>
      <value>The value as boolean.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.ValueAsUnformattedString">
      <summary>
            Gets the value as unformatted string.
            </summary>
      <value>The value as unformatted string.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.ValueAsDateTime">
      <summary>
            Gets or sets the value as date time, see type <see cref="T:System.DateTime" /></summary>
      <value>The value as <see cref="T:System.DateTime" />.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.IsInteger">
      <summary>
            Gets a value indicating whether this Cell contains integer number.
            </summary>
      <value>
        <c>true</c> if this Cell contains integer number; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.ValueDataType">
      <summary>
            Gets the type of the value data.
            </summary>
      <value>The type of the value data.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.ContainsArrayFormula">
      <summary>
            Gets a value indicating whether this cell contains an array formula.
            </summary>
      <value>
        <c>true</c> if this cell contains array formula; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.Formula">
      <summary>
            Gets or sets the formula for the cell.
            </summary>
      <value>The formula.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.NumberFormatString">
      <summary>
            Gets or sets the number format string.
            </summary>
      <value>The number format string.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.ValueDataTypeByNumberFormatString">
      <summary>
            Changes (<see cref="P:Bytescout.Spreadsheet.COM.ICell.NumberFormatString" /> to the predefined format string depending according to the (<see cref="T:Bytescout.Spreadsheet.Constants.NumberFormatType" />) type
            </summary>
      <value>The type of the predefined number format string.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.Merged">
      <summary>
            Gets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.Cell" /> is merged.
            </summary>
      <value>
        <c>true</c> if merged; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.MergedWith">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Range" /> merged with this cell. 
            </summary>
      <value>The <see cref="T:Bytescout.Spreadsheet.Range" /> merged with this cell.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICell.MergedWithCell">
      <summary>
            Gets the top left cell of <see cref="T:Bytescout.Spreadsheet.Range" /> merged this with cell. 
            </summary>
      <value>The top left cell of <see cref="T:Bytescout.Spreadsheet.Range" /> merged this with cell.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IFontFormat">
      <summary>
            Font format interface
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IFontFormat.SetFontProperties(System.String,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the font properties.
            </summary>
      <param name="FontName">Name of the font.</param>
      <param name="IsBold">if set to <c>true</c> [is bold].</param>
      <param name="IsItalic">if set to <c>true</c> [is italic].</param>
      <param name="IsUnderline">if set to <c>true</c> [is underline].</param>
      <param name="Size">The size.</param>
      <param name="R">The red component value for the new color of the font.</param>
      <param name="G">The green component value for the new color of the font.</param>
      <param name="B">The blue component value for the new color of the font.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IFontFormat.SetFontColorRGB(System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the color of the font from the specified 8-bit color values (red, green, and blue).
            </summary>
      <param name="r">The red component value for the new color of the font.</param>
      <param name="g">The green component value for the new color of the font.</param>
      <param name="b">The blue component value for the new color of the font.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IFontFormat.Font">
      <summary>
            Sets the font.
            </summary>
      <value>The font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IFontFormat.FontColor">
      <summary>
            Sets the color of the font.
            </summary>
      <value>The color of the font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IFontFormat.FontColorIndex">
      <summary>
            Gets or sets the index of the font color.
            </summary>
      <value>The index of the font color.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IFontFormat.FontEscapement">
      <summary>
            Gets or sets the font escapement.
            </summary>
      <value>The font escapement.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IFontFormat.FontUnderline">
      <summary>
            Sets the font underline style.
            </summary>
      <value>The font underline style.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IExtFormat">
      <summary>
            Ext format for the cell interface
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.CellFormat">
      <summary>
            Gets or sets the cell format.
            </summary>
      <value>The cell format.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.Locked">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.COM.IExtFormat" /> is locked.
            </summary>
      <value>
        <c>true</c> if locked; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.HiddenFormula">
      <summary>
            Gets or sets a value indicating whether formula is hidden.
            </summary>
      <value>
        <c>true</c> if formula is hidden; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.AlignmentHorizontal">
      <summary>
            Sets the horizontal text alignment style of the row.
            </summary>
      <value>The horizontal text alignment style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.AlignmentVertical">
      <summary>
            Sets the vertical text alignment style of the row.
            </summary>
      <value>The vertical text alignment style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.Wrap">
      <summary>
            Sets a value indicating whether a text is wrapped.
            </summary>
      <value>
        <c>true</c> if a text is wrapped; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.ShrinkToFit">
      <summary>
            Gets or sets a value indicating shrink content to fit into cell.
            </summary>
      <value>
        <c>true</c> if shrink to fit; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.Rotation">
      <summary>
            Sets the text rotation angle for the row.
            </summary>
      <value>The rotation angle.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.Indent">
      <summary>
            Gets or sets the Indent value for the cell.
            </summary>
      <value>The rotation angle.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.TextDirection">
      <summary>
            Gets or sets the reading order.
            </summary>
      <value>Reading order.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.LeftBorderStyle">
      <summary>
            Sets the left border style.
            </summary>
      <value>The left border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.RightBorderStyle">
      <summary>
            Sets the right border style.
            </summary>
      <value>The right border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.TopBorderStyle">
      <summary>
            Sets the top border style.
            </summary>
      <value>The top border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.BottomBorderStyle">
      <summary>
            Sets the bottom border style.
            </summary>
      <value>The bottom border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.DiagonalBorderStyle">
      <summary>
            Gets or sets the diagonal border style.
            </summary>
      <value>The diagonal border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.LeftBorderColor">
      <summary>
            Sets the color of the left border.
            </summary>
      <value>The color of the left border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.RightBorderColor">
      <summary>
            Sets the color of the right border.
            </summary>
      <value>The color of the right border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.TopBorderColor">
      <summary>
            Sets the color of the top border.
            </summary>
      <value>The color of the top border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.BottomBorderColor">
      <summary>
            Sets the color of the bottom border.
            </summary>
      <value>The color of the bottom border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.DiagonalBorderColor">
      <summary>
            Gets or sets the color of the diagonal border.
            </summary>
      <value>The color of the diagonal border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.IsDiagonalDownLine">
      <summary>
            Gets or sets a value indicating whether this instance is diagonal line from top left to right bottom
            </summary>
      <value>
        <c>true</c> if this instance is diagonal down line; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.IsDiagonalUpLine">
      <summary>
            Gets or sets a value indicating whether this instance is diagonal line from bottom left to right top
            </summary>
      <value>
        <c>true</c> if this instance is diagonal up line; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.FillPattern">
      <summary>
            Sets the fill pattern of the row.
            </summary>
      <value>The fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.FillPatternBackColor">
      <summary>
            Sets the background color for a fill pattern of the row.
            </summary>
      <value>The background color for a fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IExtFormat.FillPatternForeColor">
      <summary>
            Sets the foreground color for a fill pattern of the row.
            </summary>
      <value>The foreground color for a fill pattern.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Cell.Clear">
      <summary>
            Clears this cell.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Cell.Calculate">
      <summary>
            Calculates of formula this cell (if formula is set for this cell)
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Cell.SetFontProperties(System.String,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the font properties.
            </summary>
      <param name="FontName">Name of the font.</param>
      <param name="IsBold">if set to <c>true</c> [is bold].</param>
      <param name="IsItalic">if set to <c>true</c> [is italic].</param>
      <param name="IsUnderline">if set to <c>true</c> [is underline].</param>
      <param name="Size">The size.</param>
      <param name="R">The red component value for the new color of the font.</param>
      <param name="G">The green component value for the new color of the font.</param>
      <param name="B">The blue component value for the new color of the font.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Cell.SetFontColorRGB(System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the color of the font from the specified 8-bit color values (red, green, and blue).
            </summary>
      <param name="r">The red component value for the new color of the font.</param>
      <param name="g">The green component value for the new color of the font.</param>
      <param name="b">The blue component value for the new color of the font.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Cell.GetAddress">
      <summary>
             Returns address of the cell as CellAddress object.
            </summary>
      <returns>Address of the cell.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Cell.ToDateTime">
      <summary>
            Return the cell value as date time, see type <see cref="T:System.DateTime" /></summary>
      <value>The cell value as <see cref="T:System.DateTime" />.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Cell.ToHTML">
      <summary>
            Return the formatted text (Rich-Text) in HTML coded format
            </summary>
      <returns>The like html presentation of formatted text</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Cell.ToInteger">
      <summary>
            Return cell value as integer, see type <see cref="T:System.Int32" />.
            </summary>
      <returns>The cell value as <see cref="T:System.Int32" /></returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Cell.ToDouble">
      <summary>
            Return cell value as double, see type <see cref="T:System.Double" />.
            </summary>
      <returns>The cell value as <see cref="T:System.Double" /></returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Cell.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Cell.Finalize">
      <summary>
            Cell destructor
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Cell.Dispose">
      <summary>
            Disposes the instance
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Cell.Dispose(System.Boolean)">
      <summary>
            Disposes the instance
            </summary>
      <param name="disposeManagedResources">
      </param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.Value">
      <summary>
            Gets or sets the value of cell.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.ValueAsExcelDisplays">
      <summary>
            Returns the formatted string value of the cell in the sam way you would see in Excel or another spreadsheet editor. Formatting uses the <see cref="T:Bytescout.Spreadsheet.Constants.NumberFormatType" /> settings to format the value.
            </summary>
      <value>The string with the formatted value.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.ValueAsHTML">
      <summary>
            Gets or sets the formatted text (Rich-Text) in HTML coded format
            </summary>
      <value>The like html presentation of formatted text.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.ValueAsString">
      <summary>
            Returns the formatted string value of the cell in the sam way you would see in Excel or another spreadsheet editor. Formatting uses the <see cref="T:Bytescout.Spreadsheet.Constants.NumberFormatType" /> settings to format the value or <see cref="P:Bytescout.Spreadsheet.Cell.NumberFormatString" /> format string.
            </summary>
      <value>The string with the formatted value.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.ValueAsDouble">
      <summary>
            Gets the value as double.
            </summary>
      <value>The value as double.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.ValueAsInteger">
      <summary>
            Gets the value as integer.
            </summary>
      <value>The value as integer.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.ValueAsBoolean">
      <summary>
            Gets a value as boolean.
            </summary>
      <value>The value as boolean.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.ValueAsUnformattedString">
      <summary>
            Gets the value as unformatted string.
            </summary>
      <value>The value as unformatted string.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.ValueAsDateTime">
      <summary>
            Gets or sets the value as date time, see type <see cref="T:System.DateTime" /></summary>
      <value>The value as <see cref="T:System.DateTime" />.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.IsInteger">
      <summary>
            Gets a value indicating whether this Cell contains integer number.
            </summary>
      <value>
        <c>true</c> if this Cell contains integer number; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.ValueDataType">
      <summary>
            Gets the type of the value data.
            </summary>
      <value>The type of the value data.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.ContainsArrayFormula">
      <summary>
            Gets a value indicating whether this cell contains an array formula.
            </summary>
      <value>
        <c>true</c> if this cell contains array formula; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.Formula">
      <summary>
            Gets or sets the formula for the cell.
            </summary>
      <value>The formula.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.Font">
      <summary>
            Gets or sets the font of the cell.
            </summary>
      <value>The font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.FontColor">
      <summary>
            Gets or sets the color of the font.
            </summary>
      <value>The color of the font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.FontColorIndex">
      <summary>
            Gets or sets the index of the font color.
            </summary>
      <value>The index of the font color.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.FontEscapement">
      <summary>
            Gets or sets the font escapement.
            </summary>
      <value>The font escapement.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.FontUnderline">
      <summary>
            Gets or sets the font underline style.
            </summary>
      <value>The font underline style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.CellFormat">
      <summary>
            Gets or sets the cell format.
            </summary>
      <value>The cell format.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.Locked">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.COM.IExtFormat" /> is locked.
            </summary>
      <value>
        <c>true</c> if locked; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.HiddenFormula">
      <summary>
            Gets or sets a value indicating whether formula is hidden.
            </summary>
      <value>
        <c>true</c> if formula is hidden; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.AlignmentHorizontal">
      <summary>
            Gets or sets a horizontal text alignment style of the cell.
            </summary>
      <value>The horizontal text alignment style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.AlignmentVertical">
      <summary>
            Gets or sets the vertical text alignment style of the cell.
            </summary>
      <value>The vertical text alignment style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.Wrap">
      <summary>
            Gets or sets a value indicating a text is wrapped.
            </summary>
      <value>
        <c>true</c> if a text is wrapped; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.ShrinkToFit">
      <summary>
            Gets or sets a value indicating shrink content to fit into cell.
            </summary>
      <value>
        <c>true</c> if shrink to fit; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.Rotation">
      <summary>
            Gets or sets the text rotation angle for the cell.
            </summary>
      <value>The rotation angle.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.Indent">
      <summary>
            Gets or sets the Indent value for the cell.
            </summary>
      <value>The rotation angle.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.TextDirection">
      <summary>
            Gets or sets the reading order.
            </summary>
      <value>Reading order.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.LeftBorderStyle">
      <summary>
            Gets or sets the left border style.
            </summary>
      <value>The left border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.RightBorderStyle">
      <summary>
            Gets or sets the right border style.
            </summary>
      <value>The right border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.TopBorderStyle">
      <summary>
            Gets or sets the top border style.
            </summary>
      <value>The top border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.BottomBorderStyle">
      <summary>
            Gets or sets the bottom border style.
            </summary>
      <value>The bottom border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.DiagonalBorderStyle">
      <summary>
            Gets or sets the diagonal border style.
            </summary>
      <value>The diagonal border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.LeftBorderColor">
      <summary>
            Gets or sets the color of the left border.
            </summary>
      <value>The color of the left border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.RightBorderColor">
      <summary>
            Gets or sets the color of the right border.
            </summary>
      <value>The color of the right border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.TopBorderColor">
      <summary>
            Gets or sets the color of the top border.
            </summary>
      <value>The color of the top border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.BottomBorderColor">
      <summary>
            Gets or sets the color of the bottom border.
            </summary>
      <value>The color of the bottom border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.DiagonalBorderColor">
      <summary>
            Gets or sets the color of the diagonal border.
            </summary>
      <value>The color of the diagonal border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.IsDiagonalDownLine">
      <summary>
            Gets or sets a value indicating whether this instance is diagonal line from top left to right bottom
            </summary>
      <value>
        <c>true</c> if this instance is diagonal down line; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.IsDiagonalUpLine">
      <summary>
            Gets or sets a value indicating whether this instance is diagonal line from bottom left to right top
            </summary>
      <value>
        <c>true</c> if this instance is diagonal up line; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.FillPattern">
      <summary>
            Gets or sets the fill pattern.
            </summary>
      <value>The fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.FillPatternBackColor">
      <summary>
            Gets or sets the background color for a fill pattern.
            </summary>
      <value>The background color for a fill pattern.</value>
      <remarks>
            XLS format stores document colors in a palette of fixed size. If you use some custom colors you should store them in the palette.
            It's allowed to modify any palette color.
            XLSX format is free of this defect.
            </remarks>
      <example>
            // Register custom color in the palette to make it correctly saved in XLS document.
            Color color = ColorTranslator.FromHtml("#D99795");
            document.Workbook.Colors[0] = color;
            cell.FillPatternForeColor = color;
            </example>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.FillPatternForeColor">
      <summary>
            Gets or sets the foreground color for a fill pattern.
            </summary>
      <value>The foreground color for a fill pattern.</value>
      <remarks>
            XLS format stores document colors in a palette of fixed size. If you use some custom colors you should store them in the palette.
            It's allowed to modify any palette color.
            XLSX format is free of this defect.
            </remarks>
      <example>
            // Register custom color in the palette to make it correctly saved in XLS document.
            Color color = ColorTranslator.FromHtml("#D99795");
            document.Workbook.Colors[0] = color;
            cell.FillPatternForeColor = color;
            </example>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.Merged">
      <summary>
            Gets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.Cell" /> is merged.
            </summary>
      <value>
        <c>true</c> if merged; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.MergedWith">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Range" /> merged with this cell. 
            </summary>
      <value>The <see cref="T:Bytescout.Spreadsheet.Range" /> merged with this cell.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.MergedWithCell">
      <summary>
            Gets the top left cell of <see cref="T:Bytescout.Spreadsheet.Range" /> merged this with cell. 
            </summary>
      <value>The top left cell of <see cref="T:Bytescout.Spreadsheet.Range" /> merged this with cell.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.NumberFormatString">
      <summary>
            Gets or sets the number format string.
            </summary>
      <value>The number format string.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Cell.ValueDataTypeByNumberFormatString">
      <summary>
            Gets or sets the type (<see cref="T:Bytescout.Spreadsheet.Constants.NumberFormatType" />) of the number format. 
            </summary>
      <value>The type of the number format.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.AxisCrossingPoint">
      <summary>
            Specifies the possible crossing points for an axis.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.AxisCrossingPoint.ExactValue">
      <summary>
            (Axis Crosses at Exact Value) The category axis crosses at value
            spceified by <see cref="P:Bytescout.Spreadsheet.Charts.ChartAxis.CrossingValue" />. 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.AxisCrossingPoint.AutoZero">
      <summary>
            (Axis Crosses at Zero) The category axis crosses at the zero
            point of the value axis (if possible), or the minimum value (if the
            minimum is greater than zero) or the maximum (if the maximum
            is less than zero).
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.AxisCrossingPoint.Max">
      <summary>
            (Maximum) The axis crosses at the maximum value.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.AxisCrossingPoint.Min">
      <summary>
            (Minimum) Axis crosses at the minimum value of the chart.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.AxisOrientation">
      <summary>
            Specifies the orientation of the axis.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.AxisOrientation.MaxMin">
      <summary>
            (Maximum to Minimum) Specifies that the values on the axis shall
            be reversed so they go from maximum to minimum.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.AxisOrientation.MinMax">
      <summary>
            (Minimum to Maximum) Specifies that the axis values shall be in
            the usual order, minimum to maximum.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.AxisPosition">
      <summary>
            Specifies the position of the axis on the chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.AxisPosition.Bottom">
      <summary>
            Specifies that the axis shall be displayed at the bottom of the plot area.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.AxisPosition.Left">
      <summary>
            Specifies that the axis shall be displayed at the left of the plot area.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.AxisPosition.Right">
      <summary>
            Specifies that the axis shall be displayed at the right of the plot area.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.AxisPosition.Top">
      <summary>
            Specifies that the axis shall be displayed at the top of the plot area.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.BarGrouping">
      <summary>
            Specifies the kind of grouping for a column or bar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.BarGrouping.Clustered">
      <summary>
            (Clustered) Specifies that the chart series are drawn next to
            each other along the category axis.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.BarGrouping.PercentStacked">
      <summary>
            (100% Stacked) Specifies that the chart series are drawn next
            to each other along the value axis and scaled to total 100%.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.BarGrouping.Stacked">
      <summary>
            (Stacked) Specifies that the chart series are drawn next to each
            other on the value axis.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.BarGrouping.Standard">
      <summary>
            (Standard) Specifies that the chart series are drawn next to each
            other on the depth axis.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.Border">
      <summary>
            Represents the border of an object.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.Border.#ctor(Bytescout.Spreadsheet.Constants.BorderLineStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Charts.Border" /> class.
            </summary>
      <param name="style">The style.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.Border.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            <see cref="M:System.Object.GetHashCode"></see> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.Border.op_Equality(Bytescout.Spreadsheet.Charts.Border,Bytescout.Spreadsheet.Charts.Border)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.Border.op_Inequality(Bytescout.Spreadsheet.Charts.Border,Bytescout.Spreadsheet.Charts.Border)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.Border.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object"></see>
            is equal to the current <see cref="T:System.Object"></see>.
            </summary>
      <param name="obj">The <see cref="T:System.Object"></see>
            to compare with the current <see cref="T:System.Object"></see>.</param>
      <returns>
            true if the specified <see cref="T:System.Object"></see>
            is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Border.Color">
      <summary>
            Gets or sets the color of the border.
            </summary>
      <value>The color of the border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Border.ColorIndex">
      <summary>
            Gets or sets value that represents the color of the border.
            </summary>
      <value>The index of the color.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Border.LineStyle">
      <summary>
            Gets or sets the line style for the border.
            </summary>
      <value>The line style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Border.Weight">
      <summary>
            Gets or sets the weight of the border.
            </summary>
      <value>The weight.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.BubbleSizeRepresents">
      <summary>
            Specifies the possible ways to represent data as bubble chart sizes.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.BubbleSizeRepresents.Area">
      <summary>
            (Bubble Size Represents Area) Specifies the area of the bubbles
            shall be proportional to the bubble size value.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.BubbleSizeRepresents.Width">
      <summary>
            (Bubble Size Represents Width) Specifies the radius of the bubbles
            shall be proportional to the bubble size value.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.CategoryAxis">
      <summary>
            Specifies the category axis of the chart.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.ChartAxis">
      <summary>
            Specifies base properties for a chart axis.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartAxis.Orientation">
      <summary>
            Gets or sets the orientation of the axis.
            </summary>
      <value>The orientation of the axis.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartAxis.DoNotDraw">
      <summary>
            Gets or sets a value indicating whether this axis should not be drawn.
            </summary>
      <value>
        <c>true</c> if this axis should not be drawn;
            otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartAxis.Position">
      <summary>
            Gets or sets the position of the axis within plot area.
            </summary>
      <value>The position of the axis within plot area.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartAxis.MajorTickMark">
      <summary>
            Gets or sets the major tick mark.
            </summary>
      <value>The major tick mark.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartAxis.MinorTickMark">
      <summary>
            Gets or sets the minor tick mark.
            </summary>
      <value>The minor tick mark.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartAxis.TickLabelPosition">
      <summary>
            Gets or sets the tick label position.
            </summary>
      <value>The tick label position.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartAxis.CrossingPoint">
      <summary>
            Gets or sets the crossing point for the axis.
            </summary>
      <value>The crossing point for the axis.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartAxis.CrossingValue">
      <summary>
            Gets or sets the crossing value for the axis.
            </summary>
      <value>The crossing value for the axis.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartAxis.ShowMajorGridLines">
      <summary>
            Gets or sets a value indicating whether to show major grid lines.
            </summary>
      <value>
        <c>true</c> if to show major grid lines;
            otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartAxis.ShowMinorGridLines">
      <summary>
            Gets or sets a value indicating whether to show minor grid lines.
            </summary>
      <value>
        <c>true</c> if to show minor grid lines;
            otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.CategoryAxis.#ctor(Bytescout.Spreadsheet.Spreadsheet)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Charts.CategoryAxis" /> class.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.CategoryAxis.AutomaticCategory">
      <summary>
            Gets or sets a value indicating whether this axis is a text axis
            based on the data that is used for the axis labels, not a
            specific choice.
            </summary>
      <value>
        <c>true</c> if this axis is a text axis
            based on the data that is used for the axis labels, not a
            specific choice; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.CategoryAxis.LabelAlignment">
      <summary>
            Gets or sets the tick label alignment.
            </summary>
      <value>The tick label alignment.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.CategoryAxis.LabelOffset">
      <summary>
            Gets or sets the label offset (the distance of labels from the axis).
            </summary>
      <value>The label offset.</value>
      <remarks>The label offset is an integer between 0 and 1000 and is percentage
            of the default offset value.</remarks>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.CategoryAxis.ShowLabelAsFlatText">
      <summary>
            Gets or sets a value indicating whether to show label as flat text.
            </summary>
      <value>
        <c>true</c> if to show label as flat text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.Chart">
      <summary>
            Class for common chart properties and methods.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.Chart.#ctor(Bytescout.Spreadsheet.Spreadsheet,Bytescout.Spreadsheet.Charts.ChartAxis[])">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Charts.Chart" /> class.
            </summary>
      <param name="document">The document this chart will belong to.</param>
      <param name="axes">The axes.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.Chart.#ctor(Bytescout.Spreadsheet.Spreadsheet,Bytescout.Spreadsheet.Charts.ChartType)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Charts.Chart" /> class.
            </summary>
      <param name="document">The document.</param>
      <param name="chartType">Type of the chart.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.ChartGroups">
      <summary>
            Gets the chart groups.
            </summary>
      <value>The chart groups.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.PlacementType">
      <summary>
            Gets or sets the Placement setting of this chart, which specifies
            how changes to the sheet will affect the placement of the chart.
            </summary>
      <value>The placement.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.Name">
      <summary>
            Gets or sets the name of this chart used for
            identification purposes only.
            </summary>
      <value>The name of this chart used for identification
            purposes only.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.RoundedCorners">
      <summary>
            Gets or sets a value indicating whether chart area has rounded corners.
            </summary>
      <value>
        <c>true</c> if chart area has rounded corners; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.ShowAutoTitle">
      <summary>
            Gets or sets a value indicating whether the auto-generated title shall
            be shown for this chart.
            </summary>
      <value>
        <c>true</c> if the auto-generated title shall be shown for this
            chart; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.DisplayBlanksAs">
      <summary>
            Gets or sets a value indicating how blank cells shall be plotted on a chart.
            </summary>
      <value>The value indicating how blank cells shall be plotted on a chart.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.PlotArea">
      <summary>
            Gets the plot area properties of the chart.
            </summary>
      <value>The plot area properties of the chart.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.Legend">
      <summary>
            Gets the legend of the chart.
            </summary>
      <value>The legend of the chart.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.PlotVisibleOnly">
      <summary>
            Gets or sets a value indicating whether only visible cells should
            be plotted on the chart.
            </summary>
      <value>
        <c>true</c> if only visible cells should be plotted on the
            chart; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.ShowDataLabelsOverMax">
      <summary>
            Gets or sets a value indicating whether data labels over the maximum
            of the chart shall be shown.
            </summary>
      <value>
        <c>true</c> if data labels over the maximum of the chart shall
            be shown; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.Elevation">
      <summary>
            Gets or sets the elevation of the 3-D chart view, in degrees.
            </summary>
      <value>The elevation of the 3-D chart view, in degrees.</value>
      <remarks>The value of this property must be between -90 and 90,
            except for 3-D bar charts, where it must be between 0 and 44.</remarks>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.Perspective">
      <summary>
            Gets or sets the perspective for the 3-D chart view. Must be between 0 and 100.
            </summary>
      <value>The perspective for the 3-D chart view.</value>
      <remarks>This element is ignored if <see cref="P:Bytescout.Spreadsheet.Charts.Chart.RightAngleAxes" /> property  is true.</remarks>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.Rotation">
      <summary>
            Gets or sets the rotation of the 3-D chart view (the rotation of the plot area around the z-axis, in degrees).
            </summary>
      <value>The rotation of the 3-D chart view (the rotation of the plot area around the z-axis, in degrees).</value>
      <remarks>The value of this property must be from 0 to 360, except for 3-D bar charts, where the value must be from 0 to 44.</remarks>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.HeightPercent">
      <summary>
            Gets or sets the height of a 3-D chart as a percentage of the chart width.
            </summary>
      <value>The height of a 3-D chart as a percentage of the chart width.</value>
      <remarks>The height should be between 5 and 500 percent.</remarks>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.DepthPercent">
      <summary>
            Gets or sets the depth of a 3-D chart as a percentage of the chart width.
            </summary>
      <value>The depth of a 3-D chart as a percentage of the chart width.</value>
      <remarks>The depth should be between 20 and 2000 percent.</remarks>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.RightAngleAxes">
      <summary>
            Gets or sets a value indicating whether the chart axes are at right
            angles, rather than drawn in perspective
            </summary>
      <value>
        <c>true</c> if the chart axes are at right angles, and not
            drawn in perspective; otherwise, <c>false</c>.</value>
      <remarks>If this property is True, the <see cref="P:Bytescout.Spreadsheet.Charts.Chart.Perspective" /> property is ignored.</remarks>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.BackWall">
      <summary>
            Gets the back wall properties of the chart.
            </summary>
      <value>The back wall properties of the chart.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.Floor">
      <summary>
            Gets the floor properties of the chart.
            </summary>
      <value>The floor properties of the chart.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.SideWall">
      <summary>
            Gets the side wall properties of the chart.
            </summary>
      <value>The side wall properties of the chart.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.ChartType">
      <summary>
            Gets or sets the type of the chart.
            </summary>
      <value>The type of the chart.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.SeriesCollection">
      <summary>
            Gets the series collection.
            </summary>
      <value>The series collection.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.XAxis">
      <summary>
            Gets the x axis.
            </summary>
      <value>The x axis.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.YAxis">
      <summary>
            Gets the y axis.
            </summary>
      <value>The y axis.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.ZAxis">
      <summary>
            Gets the z axis.
            </summary>
      <value>The z axis.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.ChartTitle">
      <summary>
            Gets a <see cref="P:Bytescout.Spreadsheet.Charts.Chart.ChartTitle" /> object that represents the title of the specified chart.
            </summary>
      <value>The chart title.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Chart.ChartArea">
      <summary>
            Gets a <see cref="P:Bytescout.Spreadsheet.Charts.Chart.ChartArea" /> object that represents the complete chart area for the chart.
            </summary>
      <value>The chart area.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.ChartArea">
      <summary>
            Represents the chart area of a chart.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartArea.TopRow">
      <summary>
            Gets or sets the top row.
            </summary>
      <value>The top row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartArea.LeftColumn">
      <summary>
            Gets or sets the left column.
            </summary>
      <value>The left column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartArea.BottomRow">
      <summary>
            Gets or sets the bottom row.
            </summary>
      <value>The bottom row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartArea.RightColumn">
      <summary>
            Gets or sets the right column.
            </summary>
      <value>The right column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartArea.OffsetTopRow">
      <summary>
            Gets the offset top row in EMU.
            </summary>
      <value>The offset top row in EMU.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartArea.Left">
      <summary>
            Gets or sets the leftmost coordinate of the chart in points.
            </summary>
      <value>The leftmost coordinate of the chart in points.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartArea.Top">
      <summary>
            Gets or sets the topmost coordinate of the chart in points.
            </summary>
      <value>The topmost coordinate of the chart in points.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartArea.Width">
      <summary>
            Gets the width of the chart in points.
            </summary>
      <value>The width of the chart in points.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartArea.Height">
      <summary>
            Gets or sets the height of the chart in points.
            </summary>
      <value>The height of the chart in points.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.ChartCollection">
      <summary>
            Collection of charts.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.ChartCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.ChartCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the entire collection to a compatible one-dimensional <see cref="T:System.Array" />,
            starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the
            destination of the elements copied from collection. The <see cref="T:System.Array" /> must
            have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.ChartCollection.AddChart(System.Int32,System.Int32,Bytescout.Spreadsheet.Charts.ChartType)">
      <summary>
            Adds the chart.
            </summary>
      <param name="topRow">The top row.</param>
      <param name="leftColumn">The left column.</param>
      <param name="chartType">Type of the chart.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.ChartCollection.AddChart(Bytescout.Spreadsheet.Charts.ChartType)">
      <summary>
            Adds the chart.
            </summary>
      <param name="chartType">Type of the chart.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.ChartCollection.AddChartAndFitInto(System.Int32,System.Int32,System.Int32,System.Int32,Bytescout.Spreadsheet.Charts.ChartType)">
      <summary>
            Adds the chart and fit into.
            </summary>
      <param name="topRow">The top row.</param>
      <param name="leftColumn">The left column.</param>
      <param name="bottomRow">The bottom row.</param>
      <param name="rightColumn">The right column.</param>
      <param name="chartType">Type of the chart.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Charts.Chart" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartCollection.Count">
      <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
      <value>
      </value>
      <returns>
            The number of elements actually contained in the collection.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe).
            </summary>
      <value>
      </value>
      <returns>true if access to the collection is synchronized (thread safe); otherwise, false.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
      <value>
      </value>
      <returns>
            An object that can be used to synchronize access to the collection.
            </returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.ChartGroup">
      <summary>
            Represents one or more series plotted in a chart with the same format.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartGroup.DoughnutHoleSize">
      <summary>
            Gets or sets the size of the hole in a doughnut chart group.
            The hole size is expressed as a percentage of the chart size, between 10 and 90 percent.
            </summary>
      <value>The size of the doughnut hole.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartGroup.FirstSliceAngle">
      <summary>
            Gets or sets the angle of the first pie-chart or doughnut-chart slice, in degrees (clockwise from vertical).
            Applies only to pie, 3-D pie, and doughnut charts.
            </summary>
      <value>The first slice angle.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartGroup.GapWidth">
      <summary>
            Gets or sets the width of the gap between bar or column clusters,
            as a percentage of the bar or column width or the space between
            the primary and secondary sections in a pie of pie and Bar of Pie chart.
            </summary>
      <value>The width of the gap between bar or column clusters, as a
            percentage of the bar or column width.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartGroup.HasHiLoLines">
      <summary>
            Gets or sets a value indicating whether line chart has high-low lines.
            </summary>
      <value>
        <c>true</c> if the line chart has high-low lines; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartGroup.HiLoLines">
      <summary>
            Gets a HiLoLines object that represents the high-low lines for a series on a line chart.
            </summary>
      <value>The HiLoLines object.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartGroup.VaryByCategories">
      <summary>
            Gets or sets a value indicating whether colors are varied for each data point
            of the first series in a chart containing only one series.
            </summary>
      <value>
        <c>true</c> if a different color or pattern to each data marker; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartGroup.BubbleScale">
      <summary>
            Gets or sets the scale factor for the bubble chart in percent
            of the default size.
            </summary>
      <value>The scale factor for the bubble chart in percent
            of the default size.</value>
      <remarks>The value be an integer from 0 to 300, corresponding to
            a percentage of the default size.</remarks>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartGroup.ShowNegativeBubbles">
      <summary>
            Gets or sets a value indicating whether negative sized bubbles shall
            be shown on the chart.
            </summary>
      <value>
        <c>true</c> if negative sized bubbles shall
            be shown on the chart; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartGroup.SizeRepresents">
      <summary>
            Gets or sets the value indicating how the bubble size values
            are represented on the chart.
            </summary>
      <value>The value indicating how the bubble size values
            are represented on the chart.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.ChartGroupCollection">
      <summary>
            A collection of all the ChartGroup objects in the specified chart.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.ChartGroupCollection.Add(Bytescout.Spreadsheet.Charts.ChartGroup)">
      <summary>
            Adds the specified item.
            </summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.ChartGroupCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used
            to iterate through the collection.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartGroupCollection.Count">
      <summary>
            Gets the number of ChartGroup contained in the collection.
            </summary>
      <value>The number of ChartGroup contained in the collection.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartGroupCollection.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Charts.ChartGroup" /> at the specified index.
            </summary>
      <value>The <see cref="T:Bytescout.Spreadsheet.Charts.ChartGroup" /> at the specified index.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.ChartLineStyle">
      <summary>
            This type represents preset line dash values.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartLineStyle.Dash">
      <summary>
            Dash
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartLineStyle.DashDot">
      <summary>
            Dash Dot
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartLineStyle.Dot">
      <summary>
            Dot
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartLineStyle.LgDash">
      <summary>
            Large Dash
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartLineStyle.LgDashDot">
      <summary>
            Large Dash Dot
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartLineStyle.LgDashDotDot">
      <summary>
            Large Dash Dot Dot
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartLineStyle.Solid">
      <summary>
            Solid
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartLineStyle.SysDash">
      <summary>
            System Dash
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartLineStyle.SysDashDot">
      <summary>
            System Dash Dot
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartLineStyle.SysDashDotDot">
      <summary>
            System Dash Dot Dot
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartLineStyle.SysDot">
      <summary>
            System Dot
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.ChartSheetView">
      <summary>
            Specifies a chart sheet view.
            
            Please take a look at:
                Open XML spec, 18.3.1.86 sheetView (Chart Sheet View)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.ChartSheetViews">
      <summary>
            Specifies chart sheet views.
            
            Please take a look at:
                Open XML spec, 18.3.1.89 sheetViews (Chart Sheet Views)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.ChartTitle">
      <summary>
            Represents the chart title.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartTitle.Border">
      <summary>
            Gets a <see cref="P:Bytescout.Spreadsheet.Charts.ChartTitle.Border" /> object that represents the border of the object.
            </summary>
      <value>The border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartTitle.Fill">
      <summary>
            Gets a <see cref="T:Bytescout.Spreadsheet.Charts.FillFormat" /> object that contains fill formatting properties for the specified chart or shape.
            </summary>
      <value>The fill.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartTitle.Font">
      <summary>
            Gets a <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> object that represents the font of the specified object.
            </summary>
      <value>The font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartTitle.Left">
      <summary>
            Gets or sets the position, in points, of the left edge of the chart title.
            </summary>
      <value>The position of the left edge of the chart title in points.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartTitle.Orientation">
      <summary>
            Gets or sets the text orientation. Can be an integer value from –90 to 90 degrees.
            </summary>
      <value>The text orientation.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartTitle.Text">
      <summary>
            Gets or sets the text.
            </summary>
      <value>The text.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartTitle.Top">
      <summary>
            Gets or sets the position, in points, of the top edge of the chart title.
            </summary>
      <value>The position of the top edge of the chart title in points.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartTitle.Width">
      <summary>
            Gets the width, in points.
            </summary>
      <value>The width, in points.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ChartTitle.Shadow">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.Charts.ChartTitle" /> has a shadow.
            </summary>
      <value>
        <c>true</c> if shadow; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.ChartType">
      <summary>
            The chart type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.Area">
      <summary>
            Area chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.Area3D">
      <summary>
            3D area chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.AreaStacked">
      <summary>
            Stacked area chart
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.AreaStacked100">
      <summary>
            100% stacked area chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.AreaStacked1003D">
      <summary>
            3D 100% stacked area chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.AreaStacked3D">
      <summary>
            3D stacked area chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.BarClustered">
      <summary>
            Clustered bar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.BarClustered3D">
      <summary>
            3D clustered bar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.BarOfPie">
      <summary>
            Bar of pie chart. 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.BarStacked">
      <summary>
            Stacked bar chart. 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.BarStacked100">
      <summary>
            100% stacked bar chart. 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.BarStacked1003D">
      <summary>
            3D 100% stacked bar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.BarStacked3D">
      <summary>
            3D stacked bar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.Bubble">
      <summary>
            Bubble chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.Bubble3DEffect">
      <summary>
            3D bubble chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.Column3D">
      <summary>
            3D column chart .
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.ColumnClustered">
      <summary>
            Clustered column chart. 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.ColumnClustered3D">
      <summary>
            3D clustered column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.ColumnStacked">
      <summary>
            Stacked column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.ColumnStacked100">
      <summary>
            100% stacked column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.ColumnStacked1003D">
      <summary>
            3D 100% stacked column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.ColumnStacked3D">
      <summary>
            3D stacked column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.ConeBarClustered">
      <summary>
            Clustered cone bar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.ConeBarStacked">
      <summary>
            Stacked cone bar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.ConeBarStacked100">
      <summary>
            100% stacked cone bar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.ConeCol">
      <summary>
            3D cone column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.ConeColClustered">
      <summary>
            Clustered cone column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.ConeColStacked">
      <summary>
            Stacked cone column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.ConeColStacked100">
      <summary>
            100% stacked cone column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.CylinderBarClustered">
      <summary>
            Clustered cylinder bar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.CylinderBarStacked">
      <summary>
            Stacked cylinder bar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.CylinderBarStacked100">
      <summary>
            100% stacked cylinder bar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.CylinderCol">
      <summary>
            3D cylinder column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.CylinderColClustered">
      <summary>
            Clustered cylinder column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.CylinderColStacked">
      <summary>
            Stacked cylinder column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.CylinderColStacked100">
      <summary>
            100% stacked cylinder column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.Doughnut">
      <summary>
            Doughnut chart. 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.DoughnutExploded">
      <summary>
            Exploded doughnut  chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.Line">
      <summary>
            Line chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.Line3D">
      <summary>
            3D Line chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.LineMarkers">
      <summary>
            Line chart with markers.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.LineMarkersStacked">
      <summary>
            Stacked line chart with markers. 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.LineMarkersStacked100">
      <summary>
            100% stacked line chart with markers. 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.LineStacked">
      <summary>
            Stacked line chart. 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.LineStacked100">
      <summary>
            100% stacked line chart. 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.Pie">
      <summary>
            Pie chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.Pie3D">
      <summary>
            3D pie chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.PieExploded">
      <summary>
            Exploded Pie chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.PieExploded3D">
      <summary>
            Exploded 3D Pie chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.PieOfPie">
      <summary>
            Pie of pie chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.PyramidBarClustered">
      <summary>
            Clustered pyramid bar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.PyramidBarStacked">
      <summary>
            Stacked pyramid bar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.PyramidBarStacked100">
      <summary>
            100% stacked pyramid bar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.PyramidCol">
      <summary>
            3D pyramid column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.PyramidColClustered">
      <summary>
            Clustered pyramid column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.PyramidColStacked">
      <summary>
            Stacked pyramid column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.PyramidColStacked100">
      <summary>
            100% stacked pyramid column chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.Radar">
      <summary>
            Radar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.RadarFilled">
      <summary>
            Filled radar chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.RadarMarkers">
      <summary>
            Radar  chart with data narkers.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.StockHLC">
      <summary>
            High-Low-Close stock chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.StockOHLC">
      <summary>
            Open-High-Low-Close stock chart
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.StockVHLC">
      <summary>
            Volume-High-Low-Close stock chart
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.StockVOHLC">
      <summary>
            Volume-Open-High-Low-Close stock chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.Surface">
      <summary>
            3D surface chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.SurfaceTopView">
      <summary>
            Surface chart (Top view).
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.SurfaceTopViewWireframe">
      <summary>
            Surface chart (Top view wireframe).
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.SurfaceWireframe">
      <summary>
            Surface chart (wireframe).
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.XYScatter">
      <summary>
            Scatter chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.XYScatterLines">
      <summary>
            Scatter chart with lines.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.XYScatterLinesNoMarkers">
      <summary>
             Scatter chart with lines and no data markers.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.XYScatterSmooth">
      <summary>
            Scatter chart with smoothed lines.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.ChartType.XYScatterSmoothNoMarkers">
      <summary>
            Scatter chart with smoothed lines and no data markers.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.ColorFormat">
      <summary>
            Represents color information.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ColorFormat.Color">
      <summary>
            Gets or sets the color.
            </summary>
      <value>The color.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ColorFormat.RGB">
      <summary>
            Gets or sets the red-green-blue value of the specified color.
            </summary>
      <value>The red-green-blue value of the specified color.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ColorFormat.SchemeColor">
      <summary>
            Gets or sets the color as an index in the current color scheme.
            </summary>
      <value>The index in the current color scheme.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.DataLabels">
      <summary>
            Specifies the settings for the data labels for an entire series
            or the entire chart.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.DataLabels.ShowLegendKey">
      <summary>
            Gets or sets a value indicating whether legend keys shall
            be shown in data labels.
            </summary>
      <value>
        <c>true</c> if legend keys shall be shown in data
            labels; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.DataLabels.ShowValue">
      <summary>
            Gets or sets a value indicating whether value shall be shown
            in a data label.
            </summary>
      <value>
        <c>true</c> if value shall be shown in a data label;
            otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.DataLabels.ShowCategoryName">
      <summary>
            Gets or sets a value indicating whether category name shall
            be shown in the data label.
            </summary>
      <value>
        <c>true</c> if category name shall be shown in the
            data label; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.DataLabels.ShowSeriesName">
      <summary>
            Gets or sets a value indicating whether series name shall be
            shown in a data label.
            </summary>
      <value>
        <c>true</c> if series name shall be shown in a data
            label; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.DataLabels.ShowPercent">
      <summary>
            Gets or sets a value indicating whether percentage shall be shown
            in a data label.
            </summary>
      <value>
        <c>true</c> if percentage shall be shown in a data label;
            otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.DataLabels.ShowBubbleSize">
      <summary>
            Gets or sets a value indicating whether bubble size shall be
            shown in a data label.
            </summary>
      <value>
        <c>true</c> if bubble size shall be shown in a data
            label; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.DataLabels.ShowLeaderLines">
      <summary>
            Gets or sets a value indicating whether leader lines shall be
            shown for data labels.
            </summary>
      <value>
        <c>true</c> if leader lines shall be shown for data
            labels; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.DisplayBlanksAs">
      <summary>
            Specifies the possible ways to display blanks in charts.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.DisplayBlanksAs.Gap">
      <summary>
            Specifies that blank values shall be left as a gap.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.DisplayBlanksAs.Span">
      <summary>
            Specifies that blank values shall be spanned with a line.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.DisplayBlanksAs.Zero">
      <summary>
            Specifies that blank values shall be treated as zero.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.FillFormat">
      <summary>
            Represents fill formatting for a shape.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.FillFormat.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            <see cref="M:System.Object.GetHashCode"></see> is suitable for
            use in hashing algorithms and data structures like a hash table.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.FillFormat.op_Equality(Bytescout.Spreadsheet.Charts.FillFormat,Bytescout.Spreadsheet.Charts.FillFormat)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.FillFormat.op_Inequality(Bytescout.Spreadsheet.Charts.FillFormat,Bytescout.Spreadsheet.Charts.FillFormat)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.FillFormat.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object"></see>
            is equal to the current <see cref="T:System.Object"></see>.
            </summary>
      <param name="obj">The <see cref="T:System.Object"></see>
            to compare with the current <see cref="T:System.Object"></see>.</param>
      <returns>
            true if the specified <see cref="T:System.Object"></see>
            is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.FillFormat.BackColor">
      <summary>
            Gets or sets a <see cref="T:Bytescout.Spreadsheet.Charts.ColorFormat" /> object that represents the specified fill background color.
            </summary>
      <value>The color of the back.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.FillFormat.ForeColor">
      <summary>
            Gets or sets a <see cref="T:Bytescout.Spreadsheet.Charts.ColorFormat" /> object that represents the specified foreground fill or solid color.
            </summary>
      <value>The color of the back.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.FillFormat.Pattern">
      <summary>
            Gets or sets the fill pattern.
            </summary>
      <value>The fill pattern.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.Grouping">
      <summary>
            Specifies the possible groupings for a column, line, or area chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.Grouping.PercentStacked">
      <summary>
            (100% Stacked) Specifies that the chart series are drawn next
            to each other along the value axis and scaled to total 100%.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.Grouping.Stacked">
      <summary>
            (Stacked) Specifies that the chart series are drawn next to each
            other on the value axis.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.Grouping.Standard">
      <summary>
            (Standard) Specifies that the chart series are drawn on the value axis.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.HiLoLines">
      <summary>
            Represents the high-low lines in a chart group.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.HiLoLines.Border">
      <summary>
            Gets the border.
            </summary>
      <value>The border.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.Interior">
      <summary>
            Represents the interior of an object
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Interior.Color">
      <summary>
            Gets or sets the color of the interior as an index into the current color palette.
            </summary>
      <value>The color of the interior.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Interior.ColorIndex">
      <summary>
            Gets or sets the color of the interior.
            </summary>
      <value>The index of the color.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Interior.PatternColor">
      <summary>
            Gets or sets the color of the interior pattern.
            </summary>
      <value>The color of the interior pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Interior.PatternColorIndex">
      <summary>
            Gets or sets the color of the interior pattern as an index into the current color palette.
            </summary>
      <value>The index of the pattern color.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Interior.Pattern">
      <summary>
            Gets or sets the interior pattern.
            </summary>
      <value>The interior pattern.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.LabelAlignment">
      <summary>
            Specifies the possible ways to align the tick labels.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.LabelAlignment.Center">
      <summary>
            Specifies that the text shall be centered.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.LabelAlignment.Left">
      <summary>
            Specifies that the text shall be left justified.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.LabelAlignment.Right">
      <summary>
            Specifies that the text shall be right justified.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.Layout">
      <summary>
            Specifies how the chart element is placed on the chart.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Layout.Auto">
      <summary>
            Gets or sets a value indicating whether exact position
            of the chart element should be auto calculated.
            </summary>
      <value>
        <c>true</c> if exact position of the chart element
            should be auto calculated; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Layout.Height">
      <summary>
            Gets or sets a value specifies the height of the chart element
            as a fraction of the height of the chart.
            </summary>
      <value>The height.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Layout.Left">
      <summary>
            Gets or sets a value specifies the x location (left) of the chart
            element as a fraction of the width of the chart.
            </summary>
      <value>The left.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Layout.Top">
      <summary>
             Gets or sets a value specifies the top of the chart element as 
            a fraction of the height of the chart.
             </summary>
      <value>The top.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Layout.Width">
      <summary>
            Gets or sets a value specifies the width of the chart element
            as a fraction of the width of the chart.
            </summary>
      <value>The width.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.Legend">
      <summary>
            Specifies the legend for a chart.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Legend.Layout">
      <summary>
            Gets the layout of the legend.
            </summary>
      <value>The layout of the legend.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Legend.Position">
      <summary>
            Gets or sets the position of the legend.
            </summary>
      <value>The position of the legend.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Legend.MayBeOverlapped">
      <summary>
            Gets or sets a value indicating whether the legend may
            be overlapped by other elements.
            </summary>
      <value>
        <c>true</c> if the legend may be overlapped by other elements;
            otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.LegendPosition">
      <summary>
            Specifies the possible positions for a chart's legend.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.LegendPosition.Bottom">
      <summary>
            Specifies that the legend shall be drawn at the bottom of the chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.LegendPosition.Left">
      <summary>
            Specifies that the legend shall be drawn at the left of the chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.LegendPosition.Right">
      <summary>
            Specifies that the legend shall be drawn at the right of the chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.LegendPosition.Top">
      <summary>
            Specifies that the legend shall be drawn at the top of the chart.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.LegendPosition.TopRight">
      <summary>
            Specifies that the legend shall be drawn at the top right of the chart.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.Marker">
      <summary>
            Specifies a data marker on a chart. The marker is applied
            to each data point.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.Marker.#ctor(Bytescout.Spreadsheet.Charts.MarkerStyle,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Charts.Marker" /> class.
            </summary>
      <param name="style">The style.</param>
      <param name="size">The size.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Marker.Style">
      <summary>
            Gets or sets the style of the marker.
            </summary>
      <value>The style of the marker.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Marker.Size">
      <summary>
            Gets or sets the size of the marker in points.
            </summary>
      <value>The size of the marker in points.</value>
      <remarks>The size of the marker should between
            2 and 72 points.</remarks>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.MarkerStyle">
      <summary>
            All possible style for a marker drawn at each data point.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.MarkerStyle.Automatic">
      <summary>
            Automatic markers
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.MarkerStyle.Circle">
      <summary>
            Specifies a circle shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.MarkerStyle.Dash">
      <summary>
            Specifies a dash shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.MarkerStyle.Diamond">
      <summary>
            Specifies a diamond shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.MarkerStyle.Dot">
      <summary>
            Specifies a dot shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.MarkerStyle.None">
      <summary>
            Specifies nothing shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.MarkerStyle.Picture">
      <summary>
            Specifies a picture shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.MarkerStyle.Plus">
      <summary>
            Specifies a plus shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.MarkerStyle.Square">
      <summary>
            Specifies a square shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.MarkerStyle.Star">
      <summary>
            Specifies a star shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.MarkerStyle.Triangle">
      <summary>
            Specifies a triangle shall be drawn at each data point.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.MarkerStyle.X">
      <summary>
            Specifies an X shall be drawn at each data point.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.OpenXml.ChartWriter">
      <summary>
            Base abstract class for classes that write chart properties in Open XML format.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.Outline">
      <summary>
            Specifies the outline style.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Outline.Width">
      <summary>
            Gets or sets the width of a line in points.
            </summary>
      <value>The width.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Outline.Color">
      <summary>
            Gets or sets the color.
            </summary>
      <value>The color.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Outline.LineStyle">
      <summary>
            Gets or sets the line style.
            </summary>
      <value>The line style.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.PlotArea">
      <summary>
            Specifies the plot area of the chart.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.PlotArea.#ctor(Bytescout.Spreadsheet.Spreadsheet,Bytescout.Spreadsheet.Charts.ChartAxis[])">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Charts.PlotArea" /> class.
            </summary>
      <param name="document">The document.</param>
      <param name="axes">The axes.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.PlotArea.Layout">
      <summary>
            Gets the layout of the plot area.
            </summary>
      <value>The layout of the plot area.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.PlotArea.XAxis">
      <summary>
            Gets the x axis properties.
            </summary>
      <value>The x axis properties.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.PlotArea.YAxis">
      <summary>
            Gets the y axis properties.
            </summary>
      <value>The y axis properties.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.PlotArea.ZAxis">
      <summary>
            Gets the z axis properties.
            </summary>
      <value>The y axis properties.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.PlotArea.Border">
      <summary>
            Gets the border.
            </summary>
      <value>The border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.PlotArea.Interior">
      <summary>
            Gets the interior.
            </summary>
      <value>The interior.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.Series">
      <summary>
            Specifies base properties for a chart series.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.Series.#ctor(Bytescout.Spreadsheet.Range)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Charts.Series" /> class.
            </summary>
      <param name="values">The values.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.Series.#ctor(Bytescout.Spreadsheet.Range,Bytescout.Spreadsheet.Range)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Charts.Series" /> class.
            </summary>
      <param name="values">The values.</param>
      <param name="xvalues">The x values.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.Series.#ctor(Bytescout.Spreadsheet.Range,Bytescout.Spreadsheet.Range,Bytescout.Spreadsheet.Range)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Charts.Series" /> class.
            </summary>
      <param name="values">The values range.</param>
      <param name="xvalues">The x values range.</param>
      <param name="bubbleSizes">The bubble sizes range.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.Index">
      <summary>
            Gets or sets a value specifies the index of the containing element.
            This index shall determine which of the parent's children collection
            this element applies to.
            </summary>
      <value>The index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.Order">
      <summary>
            Gets or sets a value specifies the order of the series in the collection.
            It is 0 based.
            </summary>
      <value>The order.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.ChartType">
      <summary>
            Gets or sets the type of the chart.
            </summary>
      <value>The type of the chart.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.Values">
      <summary>
            Gets or sets the reference to source of the data contained
            in this chart.
            </summary>
      <value>The the reference to source of the data contained
            in this chart.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.XValues">
      <summary>
            Gets or sets the reference to source of the x values for a chart series.
            </summary>
      <value>The the reference to source of the x values.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.BubbleSizes">
      <summary>
            Gets or sets the reference to source of the bubble size values.
            </summary>
      <value>The reference to source of the bubble size values.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.ShapeProperties">
      <summary>
            Gets or sets a value specifies the formatting.
            </summary>
      <value>The Shape Properties.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.Name">
      <summary>
            Gets or sets name of the series.
            </summary>
      <value>The name of the series.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.MarkerSize">
      <summary>
            Gets or sets the size of the marker in points.
            </summary>
      <value>The size of the marker in points.</value>
      <remarks>The size of the marker should between 2 and 72 points.</remarks>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.MarkerStyle">
      <summary>
            Gets or sets the marker style for a point or series in a line chart, scatter chart, or radar chart.
            </summary>
      <value>The marker style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.DataLabels">
      <summary>
            Gets the <see cref="P:Bytescout.Spreadsheet.Charts.Series.DataLabels" /> object for for the series.
            </summary>
      <value>The <see cref="P:Bytescout.Spreadsheet.Charts.Series.DataLabels" />.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.InvertIfNegative">
      <summary>
            Gets or sets a value indicating whether chart shall invert
            its colors if the value is negative.
            </summary>
      <value>
        <c>true</c> if chart shall invert its colors if the
            value is negative; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.Has3DEffect">
      <summary>
            Gets or sets a value indicating whether the series has a three-dimensional appearance.
            Applies only to bubble charts
            </summary>
      <value>
        <c>true</c> if the series has a three-dimensional appearance; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.Explosion">
      <summary>
            Gets or sets the amount the data point shall be moved
            from the center of the pie (for a pie-chart or doughnut-chart slice). 
            </summary>
      <value>The amount the data point shall be moved from the
            center of the pie.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Series.Smooth">
      <summary>
            Gets or sets a value indicating whether line connecting the points on the
            chart shall be smoothed using Catmull-Rom splines.
            </summary>
      <value>
        <c>true</c> if line connecting the points on the chart shall be
            smoothed using Catmull-Rom splines; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.SeriesAxis">
      <summary>
            Specifies a series axis for the chart.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.SeriesCollection">
      <summary>
            Collection of series.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.SeriesCollection.m_series">
      <summary>
            Collection of series.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.SeriesCollection.Add(Bytescout.Spreadsheet.Charts.Series)">
      <summary>
            Adds the specified item.
            </summary>
      <param name="item">The item.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.SeriesCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used
            to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.SeriesCollection.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the entire collection to a compatible one-dimensional <see cref="T:System.Array" />,
            starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the
            destination of the elements copied from collection. The <see cref="T:System.Array" /> must
            have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.SeriesCollection.Count">
      <summary>
            Gets the number of series contained in the collection.
            </summary>
      <value>The number of series contained in the collection.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.SeriesCollection.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.Charts.Series" /> at the specified index.
            </summary>
      <value>The <see cref="T:Bytescout.Spreadsheet.Charts.Series" /> at the specified index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.SeriesCollection.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the
            collection is synchronized (thread safe).
            </summary>
      <value>
      </value>
      <returns>true if access to the collection is synchronized
            (thread safe); otherwise, false.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.SeriesCollection.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
      <value>An object that can be used to synchronize access to the collection.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.ShapeProperties">
      <summary>
            Specifies the formatting of series.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ShapeProperties.FillColor">
      <summary>
            Gets or sets the color of the fill.
            </summary>
      <value>The color of the fill.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ShapeProperties.Outline">
      <summary>
            Gets or sets the outline.
            </summary>
      <value>The outline.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.Surface">
      <summary>
            Specifies a wall or floor properties of a 3D chart.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.Surface.Thickness">
      <summary>
            Gets or sets the thickness of the wall or floor as a percentage of
            the largest dimension of the plot volume.
            </summary>
      <value>The thickness of the wall or floor as a percentage of
            the largest dimension of the plot volume.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.TickLabelPosition">
      <summary>
            Specifies the possible positions for tick labels.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.TickLabelPosition.High">
      <summary>
            Specifies the axis labels shall be at the high end
            of the perpendicular axis.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.TickLabelPosition.Low">
      <summary>
            Specifies the axis labels shall be at the low end of
            the perpendicular axis.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.TickLabelPosition.NextTo">
      <summary>
            Specifies the axis labels shall be next to the axis.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.TickLabelPosition.None">
      <summary>
            Specifies the axis labels are not drawn.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.TickMark">
      <summary>
            Specifies the possible positions for tick marks.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.TickMark.Cross">
      <summary>
            Specifies the tick marks shall cross the axis.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.TickMark.Inside">
      <summary>
            Specifies the tick marks shall be inside the plot area.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.TickMark.None">
      <summary>
            Specifies there shall be no tick marks.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Charts.TickMark.Outside">
      <summary>
            Specifies the tick marks shall be outside the plot area.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.ValueAxis">
      <summary>
            Specifies the value axis of the chart.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.ValueAxis.#ctor(Bytescout.Spreadsheet.Spreadsheet)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Charts.ValueAxis" /> class.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ValueAxis.CrossesBetweenCategories">
      <summary>
            Gets or sets a value indicating whether the value axis crosses the 
            category axis between categories.
            </summary>
      <value>
        <c>true</c> if the value axis crosses the category axis between
            categories; otherwise, <c>false</c>.
            </value>
      <remarks>
            If this property is set to <c>true</c> then the value axis crosses
            the category axis between data markers. If this property is set to
            <c>false</c> then the value axis crosses the category axis at
            the midpoint of a category.
            </remarks>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ValueAxis.MajorUnit">
      <summary>
            Gets or sets the distance between major ticks.
            </summary>
      <value>The distance between major ticks.</value>
      <remarks>Values less than 1 treated as "use default".</remarks>
    </member>
    <member name="P:Bytescout.Spreadsheet.Charts.ValueAxis.MinorUnit">
      <summary>
            Gets or sets the distance between minor ticks.
            </summary>
      <value>The distance between minor ticks.</value>
      <remarks>Values less than 1 treated as "use default".</remarks>
    </member>
    <member name="T:Bytescout.Spreadsheet.Charts.ValuesSeries">
      <summary>
            Specifies base properties for a chart series.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Charts.ValuesSeries.#ctor(Bytescout.Spreadsheet.Range)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Charts.ValuesSeries" /> class.
            </summary>
      <param name="values">The values.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.#ctor">
      <summary>
            Initialise a new instance of the CollectionImportExport class
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.#ctor(Bytescout.Spreadsheet.Spreadsheet)">
      <summary>
            Initialise a new instance of the CollectionImportExport class
            </summary>
      <param name="spreadsheet">Reference to the spreadsheet object</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFromList(System.Collections.IList)">
      <summary>
            Import from IList of rows. Each row will contain IList of columns.
            </summary>
      <param name="list">List of rows. Each row should contain an IList of columns</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFromList(System.Collections.IList,System.Int32)">
      <summary>
            Import from IList of rows to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFromList(System.Collections.IList,System.String)">
      <summary>
            Import from IList of rows to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportToList(System.Collections.IList)">
      <summary>
            Export the first worksheet in the spreadsheet to the list
            </summary>
      <param name="list">List must be a 2 dimensional string array</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportToList(System.Collections.IList,System.String)">
      <summary>
            Export the named worksheet to the list
            </summary>
      <param name="list">List must be a 2 dimensional string array</param>
      <param name="worksheetName">Name of worksheet to export</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportToList(System.Collections.IList,System.Int32)">
      <summary>
            Export the worksheet specified by index to the list
            </summary>
      <param name="list">List must be a 2 dimensional string array</param>
      <param name="worksheetIndex">Index of worksheet to export</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportToList(System.Collections.IList,Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Export the specified worksheet to the list
            </summary>
      <param name="list">List must be a 2 dimensional string array</param>
      <param name="worksheet">Worksheet</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFromJaggedArray(System.String[][])">
      <summary>
            Import from jagged array.
            </summary>
      <param name="array">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFromJaggedArray(System.String[][],System.Int32)">
      <summary>
            Import from jagged array to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFromJaggedArray(System.String[][],System.String)">
      <summary>
            Import from jagged array to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFromJaggedArray(System.String[][],Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Import from jagged array to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportToJaggedArray">
      <summary>
            Return spreadsheet rows and columns as jagged array 
            </summary>
      <returns>A jagged array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportToJaggedArray(System.String)">
      <summary>
            Return the cells in the named workedsheet as a jagged array 
            </summary>
      <param name="worksheetName">Name of worksheet to export</param>
      <returns>A jagged array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportToJaggedArray(System.Int32)">
      <summary>
            Return the cells in the specified workedsheet as a jagged array 
            </summary>
      <param name="worksheetIndex">Index of worksheet to export</param>
      <returns>A jagged array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportToJaggedArray(Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Exports the specified worksheet to a jagged array
            </summary>
      <param name="worksheet">Spreadhsheet worksheet</param>
      <returns>A jagged array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFrom2DArray(System.String[0:,0:])">
      <summary>
            Import from two-dimensional array. 
            </summary>
      <param name="array">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFrom2DArray(System.String[0:,0:],System.Int32)">
      <summary>
            Import from two-dimensional array to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFrom2DArray(System.String[0:,0:],System.String)">
      <summary>
            Import from two-dimensional array to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFrom2DArray(System.String[0:,0:],Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Import from two-dimensional array to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportTo2DArray">
      <summary>
            Return spreadsheet rows and columns as two-dimensional array; 
            </summary>
      <returns>Two dimensional array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportTo2DArray(System.String)">
      <summary>
            Return spreadsheet rows and columns as two-dimensional array; 
            </summary>
      <param name="worksheetName">Name of worksheet to export</param>
      <returns>Two dimensional array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportTo2DArray(System.Int32)">
      <summary>
            Return spreadsheet rows and columns as two-dimensional array; 
            </summary>
      <param name="worksheetIndex">Index of worksheet to export</param>
      <returns>Two dimensional array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportTo2DArray(Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Return spreadsheet rows and columns as two-dimensional array; 
            </summary>
      <param name="worksheet">Worksheet</param>
      <returns>Two dimensional array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFromDataTable(System.Data.DataTable)">
      <summary>
            Fills the spreasheet with rows and columns from specified DataTable.
            </summary>
      <param name="dataTable">The data table.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFromDataTable(System.Data.DataTable,System.UInt32)">
      <summary>
            Fills the spreasheet with rows and columns from specified DataTable. The method will automatically create new worksheet if table row count exceeds specified row limit.
            </summary>
      <param name="dataTable">The data table.</param>
      <param name="rowLimit">Worksheet row limit.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFromDataTable(System.Data.DataTable,System.String)">
      <summary>
            Import rows and columns from DataTable to specified worksheet.
            </summary>
      <param name="dataTable">The data table.</param>
      <param name="worksheetName">Name of the worksheet.</param>
      <returns>Number of filled worksheets.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFromDataTable(System.Data.DataTable,System.Int32)">
      <summary>
            Import rows and columns from DataTable to specified worksheet.
            </summary>
      <param name="dataTable">The data table.</param>
      <param name="worksheetIndex">Index of the worksheet.</param>
      <returns>Number of filled worksheets.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportToDataTable">
      <summary>
            Return new DataTable object filled from first worksheet.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportToDataTable(System.Int32)">
      <summary>
            Return new DataTable object filled from specified worksheet.
            </summary>
      <param name="worksheetIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportToDataTable(System.String)">
      <summary>
            Return new DataTable object filled from specified worksheet.
            </summary>
      <param name="worksheetName">Name of worksheet to export</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFromDataSet(System.Data.DataSet)">
      <summary>
            Fills the spreasheet with rows and columns from tables of specified DataSet.
            </summary>
      <param name="dataSet">The data set.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ImportFromDataSet(System.Data.DataSet,System.UInt32)">
      <summary>
            Fills the spreasheet with rows and columns from tables of specified DataSet. The method will automatically create new worksheet if table row count exceeds specified row limit.
            </summary>
      <param name="dataSet">The data set.</param>
      <param name="rowLimit">Worksheet row limit.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportToDataSet(System.Data.DataSet)">
      <summary>
            Export the spreadsheet to the specified dataset
            </summary>
      <param name="dataSet">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.CollectionImportExport.ExportToDataSet">
      <summary>
            Export the spreadsheet to a dataset
            </summary>
      <returns>A dataset</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.CollectionImportExport.Spreadsheet">
      <summary>
            Gets or sets a reference to the Spreadsheet object
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Column">
      <summary>
            Column class 
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IColumn">
      <summary>
            Column inteface
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IColumn.AutoFit">
      <summary>
            AutoFit of column width.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IColumn.Width">
      <summary>
            Gets or sets the width of column.
            </summary>
      <value>The width in pixels.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IColumn.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Cell" /> at the specified Index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IColumn.IsFormatted">
      <summary>
            Gets a bool value indicating that the column is formatted differently from the default format.
            </summary>
      <value>
        <c>true</c> if this column has non default format; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IColumn.IsNotEmptyCells">
      <summary>
            Gets a bool value indicating that the column contains only empty cells or not
            </summary>
      <value>
        <c>true</c> if this column contains not empty cells; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IColumn.NumberFormat">
      <summary>
            Gets or sets the number format string.
            </summary>
      <value>The number format string.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IColumn.Hidden">
      <summary>
            Gets or sets indicating that the column is hidden.
            </summary>
      <value>
        <c>true</c> if this column is hidden; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Column.#ctor(Bytescout.Spreadsheet.Worksheet,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Column" /> class.
            </summary>
      <param name="sheet">The sheet.</param>
      <param name="index">index of the column.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Column.AutoFit">
      <summary>
            AutoFit of column width.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Column.SetFontProperties(System.String,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the font properties.
            </summary>
      <param name="FontName">Name of the font.</param>
      <param name="IsBold">if set to <c>true</c> [is bold].</param>
      <param name="IsItalic">if set to <c>true</c> [is italic].</param>
      <param name="IsUnderline">if set to <c>true</c> [is underline].</param>
      <param name="Size">The size.</param>
      <param name="R">The red component value for the new color of the font.</param>
      <param name="G">The green component value for the new color of the font.</param>
      <param name="B">The blue component value for the new color of the font.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Column.SetFontColorRGB(System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the color of the font from the specified 8-bit color values (red, green, and blue).
            </summary>
      <param name="r">The red component value for the new color of the font.</param>
      <param name="g">The green component value for the new color of the font.</param>
      <param name="b">The blue component value for the new color of the font.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Column.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.WidthPnt">
      <summary>
            Gets the width of column in points.
            </summary>
      <value>The width of column in points.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.Width">
      <summary>
            Gets or sets the width of column.
            </summary>
      <value>The width in pixels.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Cell" /> at the specified Index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.IsFormatted">
      <summary>
            Gets a bool value indicating that the column is formatted differently from the default format.
            </summary>
      <value>
        <c>true</c> if this column has non default format; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.IsNotEmptyCells">
      <summary>
            Gets a bool value indicating that the column contains only empty cells or not
            </summary>
      <value>
        <c>true</c> if this column contains not empty cells; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.Font">
      <summary>
            Sets the font.
            </summary>
      <value>The font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.FontColor">
      <summary>
            Gets or sets the color of the font.
            </summary>
      <value>The color of the font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.FontColorIndex">
      <summary>
            Gets or sets the index of the font color.
            </summary>
      <value>The index of the font color.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.FontEscapement">
      <summary>
            Gets or sets the font escapement.
            </summary>
      <value>The font escapement.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.FontUnderline">
      <summary>
            Sets the font underline style.
            </summary>
      <value>The font underline style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.CellFormat">
      <summary>
            Gets or sets the cell format.
            </summary>
      <value>The cell format.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.Locked">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.COM.IExtFormat" /> is locked.
            </summary>
      <value>
        <c>true</c> if locked; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.HiddenFormula">
      <summary>
            Gets or sets a value indicating whether formula is hidden.
            </summary>
      <value>
        <c>true</c> if formula is hidden; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.AlignmentHorizontal">
      <summary>
            Sets the horizontal text alignment style of the column.
            </summary>
      <value>The horizontal text alignment style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.AlignmentVertical">
      <summary>
            Sets the vertical text alignment style of the column.
            </summary>
      <value>The vertical text alignment style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.Wrap">
      <summary>
            Sets a value indicating whether a text is wrapped.
            </summary>
      <value>
        <c>true</c> if a text is wrapped; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.ShrinkToFit">
      <summary>
            Gets or sets a value indicating shrink content to fit into cell.
            </summary>
      <value>
        <c>true</c> if shrink to fit; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.Rotation">
      <summary>
            Sets the text rotation angle for the row.
            </summary>
      <value>The rotation angle.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.Indent">
      <summary>
            Gets or sets the Indent value for the cell.
            </summary>
      <value>The rotation angle.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.TextDirection">
      <summary>
            Gets or sets the reading order.
            </summary>
      <value>Reading order.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.LeftBorderStyle">
      <summary>
            Sets the left border style.
            </summary>
      <value>The left border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.RightBorderStyle">
      <summary>
            Sets the right border style.
            </summary>
      <value>The right border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.TopBorderStyle">
      <summary>
            Sets the top border style.
            </summary>
      <value>The top border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.BottomBorderStyle">
      <summary>
            Sets the bottom border style.
            </summary>
      <value>The bottom border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.DiagonalBorderStyle">
      <summary>
            Gets or sets the diagonal border style.
            </summary>
      <value>The diagonal border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.LeftBorderColor">
      <summary>
            Sets the color of the left border.
            </summary>
      <value>The color of the left border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.RightBorderColor">
      <summary>
            Sets the color of the right border.
            </summary>
      <value>The color of the right border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.TopBorderColor">
      <summary>
            Sets the color of the top border.
            </summary>
      <value>The color of the top border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.BottomBorderColor">
      <summary>
            Sets the color of the bottom border.
            </summary>
      <value>The color of the bottom border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.DiagonalBorderColor">
      <summary>
            Gets or sets the color of the diagonal border.
            </summary>
      <value>The color of the diagonal border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.IsDiagonalDownLine">
      <summary>
            Gets or sets a value indicating whether this instance is diagonal line from top left to right bottom
            </summary>
      <value>
        <c>true</c> if this instance is diagonal down line; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.IsDiagonalUpLine">
      <summary>
            Gets or sets a value indicating whether this instance is diagonal line from bottom left to right top
            </summary>
      <value>
        <c>true</c> if this instance is diagonal up line; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.FillPattern">
      <summary>
            Sets the fill pattern of the column.
            </summary>
      <value>The fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.FillPatternBackColor">
      <summary>
            Sets the background color for a fill pattern of the column.
            </summary>
      <value>The background color for a fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.FillPatternForeColor">
      <summary>
            Sets the foreground color for a fill pattern of the column.
            </summary>
      <value>The foreground color for a fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.NumberFormat">
      <summary>
            Gets or sets the number format string.
            </summary>
      <value>The number format string.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Column.Hidden">
      <summary>
            Gets or sets indicating that the column is hidden.
            </summary>
      <value>
        <c>true</c> if this column is hidden; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Columns">
      <summary>
            The list of Column class
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IColumns">
      <summary>
            IColumns interface to manage columns in spreadsheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IColumns.Insert(System.Int32,System.Int32)">
      <summary>
            Inserts the specified ColumnCount Columns into the worksheet at the specified Index.
            </summary>
      <param name="Index">The index at which Column should be inserted.</param>
      <param name="ColumnCount">The Columns count.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IColumns.Insert(System.Int32)">
      <summary>
            Inserts Column into the worksheet at the specified Index.
            </summary>
      <param name="Index">The index at which Column should be inserted.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IColumns.Delete(System.Int32,System.Int32)">
      <summary>
            Deletes columns from First to Last indexes.
            </summary>
      <param name="First">The index first column.</param>
      <param name="Last">The index last column.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IColumns.Delete(System.Int32)">
      <summary>
            Deletes the column specified index.
            </summary>
      <param name="Index">The column index.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IColumns.CopyAndPaste(System.Int32,System.Int32,System.Int32)">
      <summary>
            Makes a copy and paste of the columns selection specified by First and Last columns indexes into new position (specified by Dest column index)
            </summary>
      <param name="First">The index of first column for copy.</param>
      <param name="Last">The index of last column for copy.</param>
      <param name="Dest">The index of destination column (to paste into).</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IColumns.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Row" /> with the specified Index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IColumns.FirstFormatedColumn">
      <summary>
            Gets the number of first formated column.
            </summary>
      <value>The number of first formated column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IColumns.LastFormatedColumn">
      <summary>
            Gets the number of last formated column.
            </summary>
      <value>The number of last formated column.</value>
    </member>
    <member name="F:Bytescout.Spreadsheet.Columns.min">
      <summary>
            Min column index
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Columns.max">
      <summary>
            Max column index
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Columns.recalcMinMax">
      <summary>
            Recalculate min and max index for columns
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Columns.Insert(System.Int32,System.Int32)">
      <summary>
            Inserts the specified ColumnCount Columns into the worksheet at the specified Index.
            </summary>
      <param name="Index">The index at which Column should be inserted.</param>
      <param name="ColumnCount">The Columns count.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Columns.Insert(System.Int32)">
      <summary>
            Inserts Column into the worksheet at the specified Index.
            </summary>
      <param name="Index">The index at which Column should be inserted.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Columns.Delete(System.Int32,System.Int32)">
      <summary>
            Deletes columns from First to Last indexes.
            </summary>
      <param name="First">The index first column.</param>
      <param name="Last">The index last column.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Columns.Delete(System.Int32)">
      <summary>
            Deletes the column specified index.
            </summary>
      <param name="Index">The column index.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Columns.CopyAndPaste(System.Int32,System.Int32,System.Int32)">
      <summary>
            Makes a copy and paste of the columns celection (First to Last columns) into Dest column (referenced by Dest index)
            </summary>
      <param name="First">The index of first column for copy.</param>
      <param name="Last">The index of last column for copy.</param>
      <param name="Dest">The index destination column.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Columns.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Row" /> with the specified Index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Columns.FirstFormatedColumn">
      <summary>
            Gets the number of first formated column.
            </summary>
      <value>The number of first formated column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Columns.LastFormatedColumn">
      <summary>
            Gets the number of last formated column.
            </summary>
      <value>The number of last formated column.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.CommonDataTypes.FixedPoint">
      <summary>
            Specifies an approximation of a real number, where the approximation has a fixed number of digits after the radix point.
            The integral part of the real number - 2 bytes.
            The fractional part of the real number - 2 bytes.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.ICellsRange">
      <summary>
            A structure that specifies a range of cells on the sheet.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ICellsRange.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ICellsRange.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ICellsRange.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICellsRange.FirstColumn">
      <summary>
            First column index
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICellsRange.FirstRow">
      <summary>
            First row index
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICellsRange.LastColumn">
      <summary>
            Last column index
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ICellsRange.LastRow">
      <summary>
            Last row index
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IDefinedName">
      <summary>
            Represents a defined name
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDefinedName.Comment">
      <summary>
            Gets or sets the comment associated with this defined name. 
            </summary>
      <value>The comment.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDefinedName.Index">
      <summary>
            Returns the zero based index of the defined name in the DefinedNames collection. 
            </summary>
      <value>The index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDefinedName.Name">
      <summary>
            Gets or sets the name of the defined name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDefinedName.RefersTo">
      <summary>
            Gets or sets the formula that the name is defined to refer to.
            </summary>
      <value>The refers to.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDefinedName.Value">
      <summary>
            Gets or sets the string containing the formula that the name is defined to refer to.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDefinedName.Visible">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.DefinedName" /> is visible in the user interface.
            </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IDefinedNameList">
      <summary>
            A collection of defined names in a workbook.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IDefinedNameList.Add(System.String,System.String)">
      <summary>
            Adds a name to the collection, or modifies the name if it already exists.
            </summary>
      <param name="name">The name of the defined name.</param>
      <param name="formula">The formula to assign to the defined name.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IDefinedNameList.IndexOf(System.String)">
      <summary>
            Searches for the specified string and returns the zero-based index of the first occurrence within the entire DefinedNameList. 
            </summary>
      <param name="name">The name.</param>
      <returns>The zero-based index of the first occurrence of name within the entire DefinedNameList, if found; otherwise, –1. </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IDefinedNameList.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:Bytescout.Spreadsheet.DefinedName" />. 
            </summary>
      <param name="index">The The zero-based index of the element to remove.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDefinedNameList.Count">
      <summary>
            Gets the number of elements actually contained in the DefinedNameList.
            </summary>
      <value>The number of elements actually contained in the DefinedNameList.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDefinedNameList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.DefinedName" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDefinedNameList.Item(System.String)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.DefinedName" /> with the specified name.
            </summary>
      <value>The specified name of the element to ge</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation">
      <summary>
            Structure describing SummaryInformation Property Set
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Bytecount">
      <summary>
            An estimate of the size of the document in bytes. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Category">
      <summary>
            Category name for the document
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Cchwithspaces">
      <summary>
            Specifies an estimate of the number of characters in the document including whitespace. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Codepage">
      <summary>
            Codepage for text
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Company">
      <summary>
            Specifies the company associated with the document‘s authoring.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Contentstatus">
      <summary>
            specifies the document status. May be absent.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Contenttype">
      <summary>
            Specifies the content type of the file. May be absent.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Docparts">
      <summary>
            docparts
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Docversion">
      <summary>
            Should be absent.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Headingpair">
      <summary>
            heading pair
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Hiddencount">
      <summary>
            Specifies the number of hidden slides in the document. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Hyperlinkschanged">
      <summary>
            hyperlinks changed
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Language">
      <summary>
            Should be absent.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Linecount">
      <summary>
            An estimate of the number of text lines in the document. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Linksdirty">
      <summary>
            Links dirty
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Manager">
      <summary>
            specifies the manager associated with the document.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Mmclipcount">
      <summary>
            Specifies the number of multimedia clips in the document. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Notecount">
      <summary>
            Specifies the number of notes in the document. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Paracount">
      <summary>
            An estimate or an exact count of the number of paragraphs in the document. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Presformat">
      <summary>
            Presentation format type of the document
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Scale">
      <summary>
            The value of the property must be FALSE.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Shareddoc">
      <summary>
            The property value MUST be FALSE (0x00000000).
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Slidecount">
      <summary>
            Specifies the number of slides in the document. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IDocumentSummaryInformation.Version">
      <summary>
            Specifies the version of the application that wrote the property set storage.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IHyperLink">
      <summary>
            Represents a hyperlink
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IHyperLink.Address">
      <summary>
            Gets or sets the address of this hyperlink.
            </summary>
      <value>The address.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IHyperLink.Range">
      <summary>
            Gets the range which this hyperlink is attached to.
            </summary>
      <value>The range.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IHyperLink.ScreenTip">
      <summary>
            Gets or sets the ScreenTip text for the specified hyperlink.
            </summary>
      <value>The screen tip.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IHyperLink.SubAddress">
      <summary>
            Gets or sets the the location within the document associated with the hyperlink.
            </summary>
      <value>The sub address.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IHyperLink.TextToDisplay">
      <summary>
            Gets or sets the text to be displayed for the specified hyperlink. The default value is the address of the hyperlink.
            <value>The text to display.</value></summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IHyperLinks">
      <summary>
            Hyperlinks 
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IHyperLinks.Add(Bytescout.Spreadsheet.Structures.CellsRange,System.String,System.String,System.String,System.String)">
      <summary>
            Adds the hyperlink.
            </summary>
      <param name="Anchor">The cells range.</param>
      <param name="Address">The hyperlink address.</param>
      <param name="SubAddress">The sub address.</param>
      <param name="ScreenTip">The screen tip.</param>
      <param name="TextToDisplay">The text to display.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IHyperLinks.Add(Bytescout.Spreadsheet.HyperLink)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.HyperLink" /> to the end of the HyperLinks.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.HyperLink" /> to be added to the end of the HyperLinks.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IHyperLinks.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:Bytescout.Spreadsheet.HyperLink" />. 
            </summary>
      <param name="index">The The zero-based index of the element to remove.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IHyperLinks.Count">
      <summary>
            Gets the number of elements actually contained in the HyperLinks.
            </summary>
      <value>The number of elements actually contained in the HyperLinks.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IHyperLinks.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.HyperLink" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IRange">
      <summary>
            Range interface
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IRange.CopyInto(System.Int32,System.Int32)">
      <summary>
            Makes a copy and paste of the current range into the position referenced by (row, col) cell
            </summary>
      <param name="row">The top row of destination range.</param>
      <param name="col">The left col of destination range.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IRange.CopyInto(System.String)">
      <summary>
            Makes copy and paste of the current range into position referenced by A1-style cell name
            </summary>
      <param name="A1Ref">The A1-style top left cell reference of the destination range (to paste into).</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IRange.Calculate">
      <summary>
            Calculates the formulas in the Range.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.Value">
      <summary>
            Sets the value of range.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.ValueAsHTML">
      <summary>
            Sets the formatted text (Rich-Text) in HTML coded format
            </summary>
      <value>The like html presentation of formatted text.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.Formula">
      <summary>
            Sets the formula for the range.
            </summary>
      <value>The formula.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.TopRowIndex">
      <summary>
            Index of the top row of the range.
            </summary>
      <value>Top row index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.BottomRowIndex">
      <summary>
            Index of the bottom row of the range.
            </summary>
      <value>Bottom row index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.LeftColumnIndex">
      <summary>
            Index of the left column of the range.
            </summary>
      <value>Left column index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.RightColumnIndex">
      <summary>
            Index of the right column of the range.
            </summary>
      <value>Right column index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.IsNotEmptyCells">
      <summary>
            Gets a bool value indicating that the range contains only empty cells or not
            </summary>
      <value>
        <c>true</c> if this range contains not empty cells; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.NumberFormatString">
      <summary>
            Sets the number format string.
            </summary>
      <value>The number format string.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.ValueDataTypeByNumberFormatString">
      <summary>
            Sets the type (<see cref="P:Bytescout.Spreadsheet.COM.IRange.ValueDataTypeByNumberFormatString" />) of the number format. 
            </summary>
      <value>The type of the number format.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.Font">
      <summary>
            Sets the font.
            </summary>
      <value>The font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.FontColor">
      <summary>
            Sets the color of the font.
            </summary>
      <value>The color of the font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.FontEscapement">
      <summary>
            Sets the font escapement.
            </summary>
      <value>The font escapement.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.FontUnderline">
      <summary>
            Sets the font underline style.
            </summary>
      <value>The font underline style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.CellFormat">
      <summary>
            Sets the cell format.
            </summary>
      <value>The cell format.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.Locked">
      <summary>
            Sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.COM.IRange" /> is locked.
            </summary>
      <value>
        <c>true</c> if locked; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.HiddenFormula">
      <summary>
            Gets or sets a value indicating whether formula is hidden.
            </summary>
      <value>
        <c>true</c> if formula is hidden; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.AlignmentHorizontal">
      <summary>
            Sets the horizontal text alignment style of the row.
            </summary>
      <value>The horizontal text alignment style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.AlignmentVertical">
      <summary>
            Sets the vertical text alignment style of the row.
            </summary>
      <value>The vertical text alignment style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.Wrap">
      <summary>
            Sets a value indicating whether a text is wrapped.
            </summary>
      <value>
        <c>true</c> if a text is wrapped; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.ShrinkToFit">
      <summary>
            Gets or sets a value indicating shrink content to fit into cell.
            </summary>
      <value>
        <c>true</c> if shrink to fit; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.Rotation">
      <summary>
            Sets the text rotation angle for the row.
            </summary>
      <value>The rotation angle.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.Indent">
      <summary>
            Gets or sets the Indent value for the cell.
            </summary>
      <value>The rotation angle.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.TextDirection">
      <summary>
            Gets or sets the reading order.
            </summary>
      <value>Reading order.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.LeftBorderStyle">
      <summary>
            Sets the left border style.
            </summary>
      <value>The left border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.RightBorderStyle">
      <summary>
            Sets the right border style.
            </summary>
      <value>The right border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.TopBorderStyle">
      <summary>
            Sets the top border style.
            </summary>
      <value>The top border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.BottomBorderStyle">
      <summary>
            Sets the bottom border style.
            </summary>
      <value>The bottom border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.DiagonalBorderStyle">
      <summary>
            Gets or sets the diagonal border style.
            </summary>
      <value>The diagonal border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.LeftBorderColor">
      <summary>
            Sets the color of the left border.
            </summary>
      <value>The color of the left border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.RightBorderColor">
      <summary>
            Sets the color of the right border.
            </summary>
      <value>The color of the right border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.TopBorderColor">
      <summary>
            Sets the color of the top border.
            </summary>
      <value>The color of the top border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.BottomBorderColor">
      <summary>
            Sets the color of the bottom border.
            </summary>
      <value>The color of the bottom border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.DiagonalBorderColor">
      <summary>
            Gets or sets the color of the diagonal border.
            </summary>
      <value>The color of the diagonal border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.IsDiagonalDownLine">
      <summary>
            Sets a value indicating whether this instance is diagonal down line.
            </summary>
      <value>
        <c>true</c> if this instance is diagonal down line; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.IsDiagonalUpLine">
      <summary>
            Sets a value indicating whether this instance is diagonal up line.
            </summary>
      <value>
        <c>true</c> if this instance is diagonal up line; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.FillPattern">
      <summary>
            Sets the fill pattern of the row.
            </summary>
      <value>The fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.FillPatternBackColor">
      <summary>
            Sets the background color for a fill pattern of the row.
            </summary>
      <value>The background color for a fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRange.FillPatternForeColor">
      <summary>
            Sets the foreground color for a fill pattern of the row.
            </summary>
      <value>The foreground color for a fill pattern.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IRow">
      <summary>
            Row interface
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IRow.AutoFit">
      <summary>
            AutoFit of row height.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IRow.InsertCell(System.Int32,System.Int32)">
      <summary>
            Inserts the cells.
            </summary>
      <param name="Index">The index at which cell should be inserted.</param>
      <param name="CellCount">The cell count.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IRow.DeleteCell(System.Int32,System.Int32)">
      <summary>
            Deletes the cells.
            </summary>
      <param name="First">The index first cell.</param>
      <param name="Last">The index last cell.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRow.Height">
      <summary>
            Gets or sets the height of row.
            </summary>
      <value>The height of row, in pixel.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRow.UseStandardHeight">
      <summary>
            Gets or sets a value indicating that row height equals the standard height of the sheet.
            </summary>
      <value>
        <c>true</c> if the row height equals the standard height of the sheet; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRow.Hidden">
      <summary>
            Gets or sets indicating that the row is hidden.
            </summary>
      <value>
        <c>true</c> if this row is hidden; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRow.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Cell" /> at the specified Index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRow.ColumnMin">
      <summary>
            Gets the index of the first column that contains a cell populated with data or formatting in the row. 
            </summary>
      <value>The index of the column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRow.ColumnMax">
      <summary>
            Gets the index of the last column that contains a cell populated with data or formatting in the row. 
            </summary>
      <value>The index of the column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRow.IsFormatted">
      <summary>
            Gets a bool value indicating that the row is formatted differently from the default format.
            </summary>
      <value>
        <c>true</c> if this row has non default format; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRow.IsNotEmptyCells">
      <summary>
            Indicates if the row contains non empty cells
            </summary>
      <value>
        <c>true</c> if this row contains non empty cells; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRow.NumberFormat">
      <summary>
            Gets or sets the number format string.
            </summary>
      <value>The number format string.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IRows">
      <summary>
            IRows interface for managing Rows collection
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IRows.Insert(System.Int32,System.Int32)">
      <summary>
            Inserts the specified RowCount Row into the List at the specified Index.
            </summary>
      <param name="Index">The index at which Row should be inserted.</param>
      <param name="RowCount">The row count.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IRows.Insert(System.Int32)">
      <summary>
            Inserts the Row into the List at the specified Index.
            </summary>
      <param name="Index">The index at which Row should be inserted.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IRows.Delete(System.Int32,System.Int32)">
      <summary>
            Deletes rows from First to Last indexes.
            </summary>
      <param name="First">The index first row.</param>
      <param name="Last">The index last row.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IRows.Delete(System.Int32)">
      <summary>
            Deletes the row.
            </summary>
      <param name="Index">The row index.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IRows.CopyAndPaste(System.Int32,System.Int32,System.Int32)">
      <summary>
            Makes a copy and paste of the rows selection specified by First and Last rows indexes into new position (specified by Dest row index)
            </summary>
      <param name="First">The index of first row for copy.</param>
      <param name="Last">The index of last row for copy.</param>
      <param name="Dest">The index destination row.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRows.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Row" /> with the specified Index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRows.FirstFormatedRow">
      <summary>
            Gets the number of first formated row.
            </summary>
      <value>The number of first formated row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IRows.LastFormatedRow">
      <summary>
            Gets the number of last formated row.
            </summary>
      <value>The number of last formated row.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.ISearchOptions">
      <summary>
            Search options class
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISearchOptions.CaseSensitiveSearch">
      <summary>
            Use case sensitive search.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISearchOptions.RegexSearch">
      <summary>
            Perform regular expression search. <see cref="P:Bytescout.Spreadsheet.COM.ISearchOptions.SearchString" /> must contain a regular expression.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISearchOptions.SearchBackwards">
      <summary>
            Perform backward search.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISearchOptions.SearchString">
      <summary>
            String to search.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.ISpreadsheet">
      <summary>
            Spreadsheet document interface
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromFile(System.String)">
      <summary>
            Load data from file.
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromFile(System.String,System.String)">
      <summary>
            Load data from file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Delimiter">Delimiter for text files.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromFile(System.String,Bytescout.Spreadsheet.CacheType)">
      <summary>
            Load data from file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Cache">Type of the cache.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromFile(System.String,Bytescout.Spreadsheet.CacheType,System.String)">
      <summary>
            Load data from file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Cache">Type of the cache.</param>
      <param name="Delimiter">Delimiter for text files.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromFile(System.String,System.String,System.Text.Encoding)">
      <summary>
            Load data from file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Delimiter">Delimiter for text files.</param>
      <param name="Encoding">The character encoding for text files.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromFile(System.String,Bytescout.Spreadsheet.CacheType,System.String,System.Text.Encoding)">
      <summary>
            Load data from file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Cache">Type of the cache.</param>
      <param name="Delimiter">Delimiter for text files.</param>
      <param name="Encoding">The character encoding for text files.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromFile(System.String,Bytescout.Spreadsheet.CacheType,System.String,System.Text.Encoding,System.String)">
      <summary>
            Load data from file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Cache">Type of the cache.</param>
      <param name="Delimiter">Delimiter for text files.</param>
      <param name="Encoding">The character encoding for text files.</param>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromStream(System.IO.Stream)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromStream(System.IO.Stream,Bytescout.Spreadsheet.CacheType)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
      <param name="Cache">Type of the cache.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromStream(System.IO.Stream,Bytescout.Spreadsheet.CacheType,System.String)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
      <param name="Cache">Type of the cache.</param>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromStream(System.IO.Stream,Bytescout.Spreadsheet.Constants.SpreadsheetFormatType)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
      <param name="SType">Type of the stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromStream(System.IO.Stream,Bytescout.Spreadsheet.Constants.SpreadsheetFormatType,Bytescout.Spreadsheet.CacheType)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
      <param name="SType">Type of the stream.</param>
      <param name="Cache">Type of the cache.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromStream(System.IO.Stream,Bytescout.Spreadsheet.Constants.SpreadsheetFormatType,System.String,System.Text.Encoding)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
      <param name="SType">Type of the stream.</param>
      <param name="Delimiter">Delimiter for text files.</param>
      <param name="Encoding">The character encoding for text files.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromStream(System.IO.Stream,Bytescout.Spreadsheet.Constants.SpreadsheetFormatType,Bytescout.Spreadsheet.CacheType,System.String,System.Text.Encoding)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
      <param name="SType">Type of the stream.</param>
      <param name="Cache">Type of the cache.</param>
      <param name="Delimiter">Delimiter for text files.</param>
      <param name="Encoding">The character encoding for text files.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.LoadFromStream(System.IO.Stream,Bytescout.Spreadsheet.Constants.SpreadsheetFormatType,Bytescout.Spreadsheet.CacheType,System.String,System.Text.Encoding,System.String)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
      <param name="SType">Type of the stream.</param>
      <param name="Cache">Type of the cache.</param>
      <param name="Delimiter">Delimiter for text files.</param>
      <param name="Encoding">The character encoding for text files.</param>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveAsXML(System.String)">
      <summary>
            Saves data in XML file with specified name
            </summary>
      <param name="FileName">Name of the file to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveAsTXT(System.String)">
      <summary>
            Saves data in TXT tab delimited file with specified name
            </summary>
      <param name="FileName">Name of the file to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveAsTXT(System.String,System.String)">
      <summary>
            Saves data in TXT tab delimited file with specified name
            </summary>
      <param name="FileName">Name of the file to save to.</param>
      <param name="Delimiter">Delimiter string.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveAsCSV(System.String)">
      <summary>
            Saves data in CSV file with specified name
            </summary>
      <param name="FileName">Name of the file to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveAsCSV(System.String,System.String)">
      <summary>
            Saves data in CSV file with specified name
            </summary>
      <param name="FileName">Name of the file to save to.</param>
      <param name="Delimiter">Delimiter string.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveAsXLS(System.String)">
      <summary>
            Saves data in XLS file FileName
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveAsXLSX(System.String)">
      <summary>
            Saves data in XLSX file FileName
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveAsXLSX(System.String,System.String)">
      <summary>
            Saves data in XLSX format to a file with specified name
            </summary>
      <param name="FileName">Name of the file to save to.</param>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveAs(System.String)">
      <summary>
            Saves data in XLS or XLSX file FileName
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveAs(System.String,Bytescout.Spreadsheet.Constants.SpreadsheetFormatType)">
      <summary>
            Saves data in XLS or XLSX file FileName
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="SType">The format in which save a file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveToStreamXLS(System.IO.Stream)">
      <summary>
            Saves data in XLS format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveToStreamXLSX(System.IO.Stream)">
      <summary>
            Saves data in XLSX format to a given stream
            </summary>
      <param name="stream">Stream to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveToStreamXLSX(System.IO.Stream,System.String)">
      <summary>
            Saves data in XLSX format to a given stream
            </summary>
      <param name="stream">Stream to save to.</param>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveToStreamXML(System.IO.Stream)">
      <summary>
            Saves data in XML format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveToStreamCSV(System.IO.Stream)">
      <summary>
            Saves data in CSV format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveToStreamCSV(System.IO.Stream,System.String)">
      <summary>
            Saves data in CSV format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
      <param name="Delimiter">Delimiter string.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveToStreamHTML(System.IO.Stream)">
      <summary>
            Saves first worksheet of spreadsheet as HTML document to a given stream.
            </summary>
      <param name="stream">The stream to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveToStreamHTML(System.IO.Stream,System.Int32)">
      <summary>
            Saves a worksheet of spreadsheet as HTML document to a given stream.
            </summary>
      <param name="stream">The stream to save to.</param>
      <param name="sheet">The worksheet to save.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveToStreamTXT(System.IO.Stream)">
      <summary>
            Saves data in TXT format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveToStreamTXT(System.IO.Stream,System.String)">
      <summary>
            Saves data in TXT format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
      <param name="Delimiter">Delimiter character.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveToStream(System.IO.Stream)">
      <summary>
            Saves data in XLS format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveToStream(System.IO.Stream,Bytescout.Spreadsheet.Constants.SpreadsheetFormatType)">
      <summary>
            Saves data in XLS or XLSX format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
      <param name="SType">The format in which saves data.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveAsHTML(System.String)">
      <summary>
            Saves spreadsheet in a HTML format file. 
            The second and subsequent worksheets of the spreadsheet will be saved 
            in separate files with auto-generated names.
            </summary>
      <param name="fileName">Name of the file.</param>
      <returns>List of generated HTML files.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveAsHTML(System.String,System.Boolean)">
      <summary>
            Saves spreadsheet in a HTML format file. 
            The second and subsequent worksheets of the spreadsheet will be saved 
            in separate files with auto-generated names.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="createNavigationLinks">If true, the method will create links for navigation between generated HTML files.</param>
      <returns>List of generated HTML files.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveAsPDF(System.String)">
      <summary>
            Saves spreadsheet to PDF file with specified name.
            </summary>
      <param name="FileName">Name of the file to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.SaveAsPDF(System.String,System.Boolean)">
      <summary>
             Saves spreadsheet to PDF file with specified name.
             </summary>
      <param name="FileName">Name of the file to save to.</param>
      <param name="autoSize">Automatic document sizing. If <c>false</c>, the page size wiil be taken from worksheet page setup.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.Worksheet(System.Int32)">
      <summary>
            Return Worksheet the specified index.
            </summary>
      <param name="Index">The index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.GetAsBytesArray(Bytescout.Spreadsheet.Constants.SpreadsheetFormatType)">
      <summary>
            Gets the bytes of spreadsheet saved as document with specified type.
            </summary>
      <param name="type">The type to use while retrieving bytes.</param>
      <returns>The bytes of spreadsheet saved as document with specified type.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.GetAsBytesArrayXLS">
      <summary>
            Gets the bytes of spreadsheet saved as XLS document.
            </summary>
      <returns>The bytes of spreadsheet saved as XLS document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.GetAsBytesArrayXLSX">
      <summary>
            Gets the bytes of spreadsheet saved as XLSX document.
            </summary>
      <returns>The bytes of spreadsheet saved as XLSX document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.GetAsBytesArrayCSV">
      <summary>
            Gets the bytes of spreadsheet saved as CSV document.
            </summary>
      <returns>The bytes of spreadsheet saved as CSV document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.GetAsBytesArrayTXT">
      <summary>
            Gets the bytes of spreadsheet saved as text document.
            </summary>
      <returns>The bytes of spreadsheet saved as text document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.GetAsBytesArrayXML">
      <summary>
            Gets the bytes of spreadsheet saved as XML document.
            </summary>
      <returns>The bytes of spreadsheet saved as XML document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.GetAsBytesArrayHTML">
      <summary>
            Gets the bytes of spreadsheet saved as HTML document.
            </summary>
      <returns>The bytes of spreadsheet saved as HTML document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.GetAsBytesArrayHTML(System.Int32)">
      <summary>
            Gets the bytes of specified worksheet page saved as HTML document.
            </summary>
      <param name="worksheetIndex">Worksheet index.</param>
      <returns>The bytes of specified worksheet page saved as HTML document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ImportFromList(System.Collections.IList)">
      <summary>
            Import from IList of rows. Each row will contain IList of columns.
            </summary>
      <param name="list">List of rows. Each row should contain an IList of columns</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ImportFromList(System.Collections.IList,System.Int32)">
      <summary>
            Import from IList of rows to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ImportFromList(System.Collections.IList,System.String)">
      <summary>
            Import from IList of rows to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ExportToList(System.Collections.IList)">
      <summary>
            Export rows to provided IList. Each row is String[] array of column values.
            </summary>
      <param name="list">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ExportToList(System.Collections.IList,System.String)">
      <summary>
            Export the named worksheet to the list
            </summary>
      <param name="list">List must be a 2 dimensional string array</param>
      <param name="worksheetName">Name of worksheet to export</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ExportToList(System.Collections.IList,System.Int32)">
      <summary>
            Export the worksheet specified by index to the list
            </summary>
      <param name="list">List must be a 2 dimensional string array</param>
      <param name="worksheetIndex">Index of worksheet to export</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ImportFrom2DArray(System.String[0:,0:])">
      <summary>
            Import from two-dimensional array. 
            </summary>
      <param name="array">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ImportFrom2DArray(System.String[0:,0:],System.Int32)">
      <summary>
            Import from two-dimensional array to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ImportFrom2DArray(System.String[0:,0:],System.String)">
      <summary>
            Import from two-dimensional array to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ExportTo2DArray">
      <summary>
            Return spreadsheet rows and columns as two-dimensional array; 
            </summary>
      <returns>Two dimensional array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ExportTo2DArray(System.String)">
      <summary>
            Return spreadsheet rows and columns as two-dimensional array; 
            </summary>
      <param name="worksheetName">Name of worksheet to export</param>
      <returns>Two dimensional array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ExportTo2DArray(System.Int32)">
      <summary>
            Return spreadsheet rows and columns as two-dimensional array; 
            </summary>
      <param name="worksheetIndex">Index of worksheet to export</param>
      <returns>Two dimensional array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ImportFromDataTable(System.Data.DataTable)">
      <summary>
            Import rows and columns from DataTable to first worksheet.
            </summary>
      <param name="dataTable">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ImportFromDataTable(System.Data.DataTable,System.String)">
      <summary>
            Import rows and columns from DataTable to specified worksheet.
            </summary>
      <param name="dataTable">
      </param>
      <param name="worksheetName">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ImportFromDataTable(System.Data.DataTable,System.Int32)">
      <summary>
            Import rows and columns from DataTable to specified worksheet.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ExportToDataTable">
      <summary>
            Return new DataTable object filled from first worksheet.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ExportToDataTable(System.Int32)">
      <summary>
            Return new DataTable object filled from specified worksheet.
            </summary>
      <param name="worksheetIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ExportToDataTable(System.String)">
      <summary>
            Return new DataTable object filled from specified worksheet.
            </summary>
      <param name="worksheetName">Name of worksheet to export</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ImportFromDataSet(System.Data.DataSet)">
      <summary>
            Import from DataSet. Create a worksheet for every DataTable in DataSet.
            </summary>
      <param name="dataSet">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ExportToDataSet(System.Data.DataSet)">
      <summary>
            Fill provided DataSet with DataTables created from spreedsheet's worksheets.
            </summary>
      <param name="dataSet">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheet.ExportToDataSet">
      <summary>
            Return new DataSet filled from spreadsheet. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheet.Workbook">
      <summary>
            Gets or sets the Workbook.
            </summary>
      <value>The WorkBook.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheet.Worksheets">
      <summary>
            Gets worksheets collection
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheet.SearchOptions">
      <summary>
            Gets the search options.
            </summary>
      <value>The search options.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheet.Options">
      <summary>
            Gets the options.
            </summary>
      <value>The options.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.ISpreadsheetFont">
      <summary>
            Spreadsheet font class 
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheetFont.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
      <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
      <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheetFont.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetFont.Bold">
      <summary>
            Gets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> is bold.
            </summary>
      <value>
        <c>true</c> if bold; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetFont.CharacterSet">
      <summary>
            Gets the character set.
            </summary>
      <value>The character set.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetFont.Escapement">
      <summary>
            Gets the escapement.
            </summary>
      <value>The escapement.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetFont.Font">
      <summary>
            Gets the font.
            </summary>
      <value>The font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetFont.FontColor">
      <summary>
            Gets the color of the font.
            </summary>
      <value>The color of the font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetFont.FontName">
      <summary>
            Gets the name of the font.
            </summary>
      <value>The name of the font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetFont.Height">
      <summary>
            Gets the height.
            </summary>
      <value>The height.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetFont.Italic">
      <summary>
            Gets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> is italic.
            </summary>
      <value>
        <c>true</c> if italic; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetFont.StruckOut">
      <summary>
            Gets a value indicating whether [struck out].
            </summary>
      <value>
        <c>true</c> if [struck out]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetFont.Underline">
      <summary>
            Gets the underline.
            </summary>
      <value>The underline.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.ISpreadsheetOptions">
      <summary>
            Spreadsheet options class
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheetOptions.SetExcel2003Limits">
      <summary>
            Sets Excel2003 compatible limits (string length, max column count, max row count etc)
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheetOptions.SetExcel2007Limits">
      <summary>
            Sets Excel2007 compatible limits (string length, max column count, max row count etc)
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.ISpreadsheetOptions.SetOpenOffice3Limits">
      <summary>
            Sets Open Office 3 Calc compatible limits (string length, max column count, max row count etc)
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetOptions.MaxColumnCountAllowed">
      <summary>
            Gets the max column count allowed for the current format limitations set (see methods .SetExcel2003Limits, .SetExcel2007Limits, .SetOpenOffice3Limits to set current limitations)
            </summary>
      <value>The max columns.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetOptions.MaxRowCountAllowed">
      <summary>
            Gets the max row count allowed for the current format limitations set (see methods .SetExcel2003Limits, .SetExcel2007Limits, .SetOpenOffice3Limits to set current limitations)
            </summary>
      <value>The max row count allowed</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetOptions.MaxStringLengthAllowedPerCell">
      <summary>
            Gets the max string length per cell allowed for the current format limitations set (see methods .SetExcel2003Limits, .SetExcel2007Limits, .SetOpenOffice3Limits to set current limitations)
            </summary>
      <value>The max string length per cell.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetOptions.ThrowExceptionsOnFormatIncompatibilities">
      <summary>
            Throw the exception if data can be corrupted while saving to the file or stream
            (usually this applies, for example, if you save into XLS format while spreadsheet
            contains formatting not supported by XLS format but supported by XLSX format only)
            False by default
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISpreadsheetOptions.ThrowExceptionsOnFormatLimits">
      <summary>
            Gets or sets a value indicating whether [throw exceptions on spreadsheet format limits].
            </summary>
      <value>
        <c>true</c> if [throw exceptions on format limits]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.ISummaryInformation">
      <summary>
            Structure describing SummaryInformation Property Set
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.ApplicationName">
      <summary>
            The name of the application that was used to create the document.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.Author">
      <summary>
            The author of the document.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.CharCount">
      <summary>
            The total number of characters in the document.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.Codepage">
      <summary>
            Codepage for text
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.Comments">
      <summary>
            Comments related the document.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.CreateDateTime">
      <summary>
            Gets or sets the time that the document was created.
            </summary>
      <value>The create date time.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.EditTime">
      <summary>
            Gets or sets the total amount of time that has been spent editing the document.
            </summary>
      <value>The edit time.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.Keywords">
      <summary>
            Keywords related to the document.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.LastAuthor">
      <summary>
            The last author of the document.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.LastPrinted">
      <summary>
            Gets or sets the most recent time the document was printed.
            </summary>
      <value>The last printed.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.LastSavedDateTime">
      <summary>
            Gets or sets the most recent time the document was saved.
            </summary>
      <value>The last saved date time.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.PageCount">
      <summary>
            The total number of pages in the document.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.RevisionNumber">
      <summary>
            An application-specific revision number for this version of the document.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.Security">
      <summary>
            A 32-bit signed integer representing a set of application-suggested access control flags with the following values:
                0x00000001: Password protected
                0x00000002: Read-only recommended
                0x00000004: Read-only enforced
                0x00000008: Locked for annotations
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.Subject">
      <summary>
            The subject of the document.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.Template">
      <summary>
            The application specific template used to create the document.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.Title">
      <summary>
            The title of the document.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.ISummaryInformation.WordCount">
      <summary>
            The total number of words in the document.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IVtHeadingPair">
      <summary>
            Heading Pair struct
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IVtHeadingPair.headerParts">
      <summary>
            heading String
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IVtHeadingPair.headingString">
      <summary>
            Header parts
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IWorkbook">
      <summary>
            Workbook interface
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorkbook.Calculate">
      <summary>
            Calculates the all formulas in the Workbook.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorkbook.Worksheets">
      <summary>
            Gets the worksheets.
            </summary>
      <value>The worksheets.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorkbook.DefaultFont">
      <summary>
            Gets or sets the workbook default font.
            </summary>
      <value>The default font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorkbook.Locale">
      <summary>
            Gets or sets the CultureInfo using in Workbook. This property should be used to set the locale (regional) settings for use in the new workbook (number, currency, time, date formatting). When you load existing spreadsheet then the SDK tries to use the saved locale settings for this file disregarding current Windows regional and language settings. When new workbook is created then the current Windows locale is used by default
            </summary>
      <value>The locale.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorkbook.AddInFunctionsNamesLocale">
      <summary>
            Gets or sets the add in functions names locale.
            </summary>
      <value>The add in functions names locale.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorkbook.RangeSelectionMethod">
      <summary>
            Gets or sets the range selection method.
            </summary>
      <value>The range selection method.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorkbook.ExternalReferenceUpdate">
      <summary>
            Gets or sets a value indicating whether external reference should be updated or not.
            </summary>
      <value>
        <c>true</c> if external reference update; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorkbook.AutoCalculation">
      <summary>
            Gets or sets a value indicating if formula should be re-calculated automatically on change of cells value.
            </summary>
      <value>
        <c>true</c> if calculate formulas automatically; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorkbook.Colors">
      <summary>
            Gets the colors in the user-defined palette. The palette has 56 entries.
            </summary>
      <value>The colors.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorkbook.DocumentProperties">
      <summary>
            Document Properties
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorkbook.Names">
      <summary>
            Gets collection of the <see cref="T:Bytescout.Spreadsheet.DefinedName" /> objects.
            </summary>
      <value>The names.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IWorksheet">
      <summary>
            Worksheet interface
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.Protect(System.String)">
      <summary>
            Protects this <see cref="T:Bytescout.Spreadsheet.Worksheet" /> with the password specified.
            </summary>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.Protect(System.String,Bytescout.Spreadsheet.Constants.EnhancedSheetProtection)">
      <summary>
            Protects this <see cref="T:Bytescout.Spreadsheet.Worksheet" /> with specified password and options.
            </summary>
      <param name="Password">The password.</param>
      <param name="Options">The <see cref="T:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection" /> options.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.UnProtect(System.String)">
      <summary>
            UnProtects this <see cref="T:Bytescout.Spreadsheet.Worksheet" /> with the password.
            </summary>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.Cell(System.Int32,System.Int32)">
      <summary>
            Return cell the specified i and j.
            </summary>
      <param name="row">The index of row.</param>
      <param name="col">The index of column.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.Cell(System.String)">
      <summary>
            Return cell the specified by A1-style reference.
            </summary>
      <param name="A1Ref">The A1-style reference.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.Range(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Return cell range specified by (row1, col1) - top-left cell and (row2, col1) - bottom-right cell
            </summary>
      <param name="row1">The upper row of the range.</param>
      <param name="col1">The left col of the range.</param>
      <param name="row2">The lower row of the range.</param>
      <param name="col2">The right col of the range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.Range(System.String)">
      <summary>
            Return cell range the specified by A1-style reference.
            </summary>
      <param name="A1Ref">The A1-style reference.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsTXT(System.IO.Stream)">
      <summary>
            Saves worksheet in a tab-delimited text file
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsTXT(System.IO.Stream,System.String)">
      <summary>
            Saves worksheet in a text format
            </summary>
      <param name="stream">The stream.</param>
      <param name="Delimiter">Delimiter of values.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsTXT(System.IO.Stream,System.String,System.String)">
      <summary>
            Saves worksheet in a text format.
            </summary>
      <param name="stream">The stream.</param>
      <param name="Delimiter">The delimiter symbol.</param>
      <param name="QuoteSymbol">The quotation symbol.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsTXT(System.IO.Stream,Bytescout.Spreadsheet.ConversionOptions)">
      <summary>
            Saves worksheet in a text format.
            </summary>
      <param name="stream">The stream.</param>
      <param name="options">The format options.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsTXT(System.String)">
      <summary>
            Saves worksheet in a tab-delimited text file format
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsTXT(System.String,System.String)">
      <summary>
            Saves worksheet in a tab-delimited text file format
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Delimiter">Delimiter of values.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsTXT(System.String,System.String,System.String)">
      <summary>
            Saves worksheet in a text format.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Delimiter">The delimiter symbol.</param>
      <param name="QuoteSymbol">The quotation symbol.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsTXT(System.String,Bytescout.Spreadsheet.ConversionOptions)">
      <summary>
            Saves worksheet in a text format.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="options">The format options.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsCSV(System.IO.Stream)">
      <summary>
            Saves worksheet in a CSV format file
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsCSV(System.IO.Stream,System.String)">
      <summary>
            Saves worksheet in a CSV format file
            </summary>
      <param name="stream">The stream.</param>
      <param name="Delimiter">Delimiter of values.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsCSV(System.IO.Stream,System.String,System.String)">
      <summary>
            Saves worksheet in a CSV format file
            </summary>
      <param name="stream">The stream.</param>
      <param name="Delimiter">Delimiter symbol.</param>
      <param name="Quote">Quotation symbol.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsCSV(System.IO.Stream,Bytescout.Spreadsheet.ConversionOptions)">
      <summary>
            Saves worksheet in a CSV format file
            </summary>
      <param name="stream">The stream.</param>
      <param name="options">The format options.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsCSV(System.String)">
      <summary>
            Saves worksheet in a CSV format file
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsCSV(System.String,System.String)">
      <summary>
            Saves worksheet in a CSV format file
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Delimiter">Delimiter of values.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsCSV(System.String,System.String,System.String)">
      <summary>
            Saves worksheet in a CSV format file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Delimiter">Delimiter symbol.</param>
      <param name="Quote">Quotation symbol.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsCSV(System.String,Bytescout.Spreadsheet.ConversionOptions)">
      <summary>
            Saves worksheet in a CSV format file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="options">The format options.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsHTML(System.String)">
      <summary>
            Saves worksheet in a HTML format file
            </summary>
      <param name="FileName">filename of output HTML file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsHTML(System.IO.Stream)">
      <summary>
            Saves worksheet in a HTML format file
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsHTML(System.IO.StreamWriter)">
      <summary>
            Saves worksheet in a HTML format file. Use this overload to specify the encoding for output HTML file. 
            Create StreamWriter instance with required encoding in constructor parameters.
            </summary>
      <param name="streamWriter">The stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsXML(System.String)">
      <summary>
            Saves worksheet in a XML format file
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsXML(System.IO.Stream)">
      <summary>
            Saves worksheet in a XML format file
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.GetAsBytesArrayCSV">
      <summary>
            Gets the bytes of worksheet saved as CSV document.
            </summary>
      <returns>The bytes of worksheet saved as CSV document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.GetAsBytesArrayTXT">
      <summary>
            Gets the bytes of worksheet saved as text document.
            </summary>
      <returns>The bytes of worksheet saved as text document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.GetAsBytesArrayXML">
      <summary>
            Gets the bytes of worksheet saved as XML document.
            </summary>
      <returns>The bytes of worksheet saved as XML document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.GetAsBytesArrayHTML">
      <summary>
            Gets the bytes of worksheet saved as HTML document.
            </summary>
      <returns>The bytes of worksheet saved as HTML document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.Find(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Finds the specified search string on the worksheet.
            </summary>
      <param name="searchString">Search string.</param>
      <param name="caseSensitive">Use case sensitive search.</param>
      <param name="useRegularExpressions">The search string contains a regular expression.</param>
      <param name="searchBackwards">Perform backward search.</param>
      <returns>A cell containing the search string.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.Find">
      <summary>
            Finds the specified search string on the worksheet. Specify the search
            options using <see cref="P:Bytescout.Spreadsheet.Spreadsheet.SearchOptions" /> property.
            </summary>
      <returns>A cell containing the search string.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.FindNext">
      <summary>
            Finds next occurrence of the search string on the worksheet. You should
            initialize the search with the Find() method.
            </summary>
      <returns>A cell containing the search string or <see langword="null" />
            if the string is not found.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.Calculate">
      <summary>
            Calculates the formulas in the Worksheet.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsPDF(System.String)">
      <summary>
             Saves worksheet to PDF file with specified name.
            </summary>
      <param name="fileName">Output PDF file name.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsPDF(System.String,System.Boolean)">
      <summary>
             Saves worksheet to PDF file with specified name.
            </summary>
      <param name="fileName">Output PDF file name.</param>
      <param name="autoSize">Automatic document sizing. If <c>false</c>, the page size wiil be taken from worksheet page setup.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsPDF(System.IO.Stream)">
      <summary>
             Saves worksheet to PDF file with specified name.
            </summary>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheet.SaveAsPDF(System.IO.Stream,System.Boolean)">
      <summary>
             Saves worksheet to PDF file with specified name.
            </summary>
      <param name="stream">Output stream.</param>
      <param name="autoSize">Automatic document sizing. If <c>false</c>, the page size wiil be taken from worksheet page setup.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.Name">
      <summary>
            Gets or sets Worksheet name
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.Active">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.Worksheet" /> is active.
            </summary>
      <value>
        <c>true</c> if active; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.Protected">
      <summary>
            Gets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.Worksheet" /> is protected against modification.
            </summary>
      <value>
        <c>true</c> if protected; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.ProtectionOptions">
      <summary>
            Gets the option flags for sheet protection.
            </summary>
      <value>The <see cref="T:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection" /> options.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.DefaultColumnWidth">
      <summary>
            Gets or sets the default width of the column in 1/256 of the width of the zero character, using default font.
            </summary>
      <value>The width of the default column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.IsEmpty">
      <summary>
            Gets a value indicating whether worksheet is empty.
            </summary>
      <value>
        <c>true</c> if this worksheet is empty; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.UsedRangeRowMin">
      <summary>
            Gets the first used row.
            </summary>
      <value>The first used row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.UsedRangeRowMax">
      <summary>
            Gets the last used row.
            </summary>
      <value>The last used row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.UsedRangeColumnMin">
      <summary>
            Gets the first used column.
            </summary>
      <value>The first used column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.UsedRangeColumnMax">
      <summary>
            Gets the last used column.
            </summary>
      <value>The last used column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.NotEmptyRowMin">
      <summary>
            Gets the first row contains not empty cell.
            </summary>
      <value>The first not empty row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.NotEmptyRowMax">
      <summary>
            Gets the last row contains not empty cell.
            </summary>
      <value>The last not empty row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.NotEmptyColumnMin">
      <summary>
            Gets the first column contains not empty cell.
            </summary>
      <value>The first not empty column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.NotEmptyColumnMax">
      <summary>
            Gets the last column contains not empty cell.
            </summary>
      <value>The last not empty column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.Rows">
      <summary>
            Gets the list of rows.
            </summary>
      <value>The list of rows.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.Columns">
      <summary>
            Gets the list of columns.
            </summary>
      <value>The list of columns.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.Item(System.Int32,System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Cell" /> with the specified row and col.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.Item(System.String)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Cell" /> with the specified by A1-style reference.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.ViewOptions">
      <summary>
            Gets the view optionsfor the worksheet.
            </summary>
      <value>The view options.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.Hyperlinks">
      <summary>
            Returns a <see cref="T:Bytescout.Spreadsheet.HyperLinks" /> collection that represents the hyperlinks for the worksheet.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.BackgroundPicture">
      <summary>
            Gets or sets the sheet background picture.
            </summary>
      <value>The background picture.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.Visible">
      <summary>
            Gets or sets the visible state of the sheet.
            </summary>
      <value>The visible.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.PageSetup">
      <summary>
            Gets or sets the page setup.
            </summary>
      <value>The page setup.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheet.Pictures">
      <summary>
            Gets the pictures.
            </summary>
      <value>The pictures.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IWorksheets">
      <summary>
            Worksheets collection interface
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheets.ByName(System.String)">
      <summary>
            Get Worksheet by name.
            </summary>
      <param name="Name">The name of Worksheet.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheets.IndexOf(System.String)">
      <summary>
            Returns the index of worksheet on her name
            </summary>
      <param name="Name">The name of <see cref="T:Bytescout.Spreadsheet.Worksheet" /> object in the list.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheets.Add(System.String)">
      <summary>
            Adds the worksheet.
            </summary>
      <param name="Name">The name of worksheet.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheets.Add">
      <summary>
            Adds the worksheet with default name "Untitled N".
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheets.Insert(System.Int32,System.String)">
      <summary>
            Inserts the specified index.
            </summary>
      <param name="Index">The zero-based index at which worksheet should be inserted.</param>
      <param name="Name">The name of worksheet.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheets.Move(System.Int32,System.Int32)">
      <summary>
            Moves the specified SourceIndex Worksheet.
            </summary>
      <param name="SourceIndex">Index of the source.</param>
      <param name="DestIndex">Index of the destination.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheets.Copy(System.Int32,System.Int32,System.String)">
      <summary>
            Makes a copy and paste of the worksheet (SourceIndex) into a new worksheet (DestIndex)  with NewSheetName
            </summary>
      <param name="SourceIndex">Index of the source.</param>
      <param name="DestIndex">Index of the dest.</param>
      <param name="NewSheetName">New name of the Worksheet.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheets.Delete(System.Int32)">
      <summary>
            Deletes the worksheet.
            </summary>
      <param name="Index">The index of worksheet.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheets.Delete(System.String)">
      <summary>
            Deletes the worksheet.
            </summary>
      <param name="Name">The name of worksheet.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IWorksheets.DeleteAll">
      <summary>
            Deletes all worksheets.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheets.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Worksheet" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheets.Item(System.String)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Worksheet" /> with the specified name.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.COM.IWorksheets.Count">
      <summary>
            Gets the worksheet count.
            </summary>
      <value>The worksheet count.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.COM.IXLSDocEngine">
      <summary>
            XLSDoc Engine interface
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.COM.IXLSDocEngine.SetParameters(System.String,System.String)">
      <summary>
            Sets the parameters.
            </summary>
      <param name="UserName">Name of the user.</param>
      <param name="Key">The key.</param>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.AlignmentHorizontal">
      <summary>
            Horizontal alignment type enumeration
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.AlignmentHorizontal.General">
      <summary>
            (0) General alignment
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.AlignmentHorizontal.Left">
      <summary>
            (1) Left alignment
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.AlignmentHorizontal.Centered">
      <summary>
            (2) Centered alignment
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.AlignmentHorizontal.Right">
      <summary>
            (3) Right alignment
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.AlignmentHorizontal.Filled">
      <summary>
            (4) Filled alignment
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.AlignmentHorizontal.Justified">
      <summary>
            (5) Justified alignment
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.AlignmentHorizontal.CenteredSelect">
      <summary>
            (6) Centred selecti alignment
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.AlignmentHorizontal.Distributed">
      <summary>
            (7) Distributed alignment
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.AlignmentVertical">
      <summary>
            Vertical alignment
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.AlignmentVertical.Top">
      <summary>
            (0) Top alignment
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.AlignmentVertical.Centered">
      <summary>
            (16) Centered alignment
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.AlignmentVertical.Bottom">
      <summary>
            (32) Bottom alignment
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.AlignmentVertical.Justified">
      <summary>
            (48) Justified alignment
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.AlignmentVertical.Distributed">
      <summary>
            (64) Distributed alignment
            Available in Excel 10.0 (Excel XP) and later only
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.BIFF_VERSION">
      <summary>
            BIFF format version enumeration
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.BIFF_VERSION.BIFF7">
      <summary>
            (1280) BIFF 7
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.BIFF_VERSION.BIFF8">
      <summary>
            (1536) BIFF 8
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.BorderLineStyle">
      <summary>
            Specifies the line style for the border.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.BorderLineStyle.Continuous">
      <summary>
            Continuous line
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.BorderLineStyle.Dash">
      <summary>
            Dashed line
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.BorderLineStyle.DashDot">
      <summary>
            Alternating dashes and dots
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.BorderLineStyle.DashDotDot">
      <summary>
            Dash followed by two dots
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.BorderLineStyle.Dot">
      <summary>
            Dotted line
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.BorderLineStyle.Double">
      <summary>
            Double line
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.BorderLineStyle.LineStyleNone">
      <summary>
            No line
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.BorderLineStyle.SlantDashDot">
      <summary>
            Slanted dashes
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.BorderWeight">
      <summary>
            Specifies the weight of the border around a range.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.BorderWeight.Hairline">
      <summary>
            Hairline (thinnest border)
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.BorderWeight.Medium">
      <summary>
            Medium
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.BorderWeight.Thick">
      <summary>
            Thick (widest border)
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.BorderWeight.Thin">
      <summary>
            Thin
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.BuiltInNames">
      <summary>
            This built-in names that are reserved for specific functionality.
            
            Please take a look at:
                Excel Binary File Format (.xls) Structure Specification,
                    2.4.150 Lbl.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.CellType">
      <summary>
            Cell type 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.CellType.BLANK">
      <summary>
            (513) Blank 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.CellType.BOOLERR">
      <summary>
            (517)Boolean error
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.CellType.FORMULA">
      <summary>
            (6)Formula
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.CellType.NUMBER">
      <summary>
            (531)Number
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.CellType.LABEL">
      <summary>
            (516)Label
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.CellType.LABELSST">
      <summary>
            (253) Label st
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.CellType.RK">
      <summary>
            (638) RK Number type
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.xlColorIndex">
      <summary>
            Specifies the color.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.xlColorIndex.Automatic">
      <summary>
            Automatic color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.xlColorIndex.None">
      <summary>
            No color
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection">
      <summary>
            Enhanced sheet protection option flags
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.Object">
      <summary>
            (1) Enable edit objects
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.Scenario">
      <summary>
            (2) Enable edit scenarios
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.FormatCells">
      <summary>
            (4) Enable change cell formatting
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.FormatColumns">
      <summary>
            (8) Enable change column formatting
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.FormatRows">
      <summary>
            (16) Enable change row formatting
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.InsertColumns">
      <summary>
            (32) Enable insert columns
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.InsertRows">
      <summary>
            (64) Enable insert rows
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.InsertHyperlinks">
      <summary>
            (128) Enable insert hyperlinks
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.DeleteColumns">
      <summary>
            (160) Enable delete columns
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.DeleteRows">
      <summary>
            (320) Enable delete rows
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.SelectLockedCells">
      <summary>
            (1024) (Enable select locked cells
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.Sort">
      <summary>
            (2048) Enable sort a cell range
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.AutoFilter">
      <summary>
            (1600) Enable use Autofilter
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.PivotTables">
      <summary>
            (3200) Enable use PivotTable reports
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection.SelectUnlockedCells">
      <summary>
            (6400) Enable select unlocked cells
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.FontUnderlineStyle">
      <summary>
            Represents font underline type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FontUnderlineStyle.None">
      <summary>
            (0) None 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FontUnderlineStyle.Single">
      <summary>
            (1) Single underline
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FontUnderlineStyle.Double">
      <summary>
            (2) Double underline
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FontUnderlineStyle.SingleAccounting">
      <summary>
            (33) Single accounting underline
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FontUnderlineStyle.DoubleAccounting">
      <summary>
            (34) Double accounting underline
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.FontEscapementType">
      <summary>
            Represents font escapement type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FontEscapementType.None">
      <summary>
            (0) None
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FontEscapementType.Superscript">
      <summary>
            (1) Superscript 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FontEscapementType.Subscript">
      <summary>
            (2) Subscript
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.NumberFormatType">
      <summary>
            Type of the cell according to the analysis of NumberFormat formatting string for the value.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.NumberFormatType.General">
      <summary>
            (0) General formatting type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.NumberFormatType.Decimal">
      <summary>
            (1) Decimal formatting
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.NumberFormatType.Currency">
      <summary>
            (2) Currency formatting type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.NumberFormatType.Percent">
      <summary>
            (3) Percents formatting type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.NumberFormatType.Scientific">
      <summary>
            (4) Scientific formatting type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.NumberFormatType.Fraction">
      <summary>
            (5) Fraction formatting type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.NumberFormatType.DateTime">
      <summary>
            (6) DateTime formatting type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.NumberFormatType.Text">
      <summary>
            (7) Plain text formatting type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.NumberFormatType.Unknown">
      <summary>
            (255) Unknown formatting, check NumberFormatString to check formatting string
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.FORMULAERROR">
      <summary>
            Formula error type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FORMULAERROR.NULL">
      <summary>
             (0) #NULL! error type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FORMULAERROR.DIV0">
      <summary>
            (7) #DIV/0!
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FORMULAERROR.VALUE">
      <summary>
            (15) #VALUE!
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FORMULAERROR.REF">
      <summary>
            (23) #REF!
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FORMULAERROR.NAME">
      <summary>
            (29) #NAME?
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FORMULAERROR.NUM">
      <summary>
            (36) #NUM!
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FORMULAERROR.NA">
      <summary>
            (42) #N/A
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.FormulaFlags">
      <summary>
            Formula flags
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FormulaFlags.AlwaysCalc">
      <summary>
            (1) Always calculate
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FormulaFlags.CalcOnLoad">
      <summary>
            (2) Calculate on load
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FormulaFlags.ShrFmla">
      <summary>
            (8) Shared formula
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.FormulaFlags.ArrayFmla">
      <summary>
            (16) Array formula
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.LineStyle">
      <summary>
            Line style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.LineStyle.None">
      <summary>
            (0) None
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.LineStyle.Thin">
      <summary>
            (1) Thin style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.LineStyle.Medium">
      <summary>
            (2) Medium style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.LineStyle.Dashed">
      <summary>
            (3) Dashed style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.LineStyle.Dotted">
      <summary>
            (4) Dotted style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.LineStyle.Thick">
      <summary>
            (5) Thick style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.LineStyle.Double">
      <summary>
            (6) Double style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.LineStyle.Hair">
      <summary>
            (7) Hair style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.LineStyle.MediumDashed">
      <summary>
            (8) Medium dashed style (BIFF8 and higher only)
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.LineStyle.ThinDashDotted">
      <summary>
            (9) Thin dash dotted style (BIFF8 and higher only)
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.LineStyle.MediumDashDotted">
      <summary>
            (10) Medium dash dotted style (BIFF8 and higher only)
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.LineStyle.ThinDashDotDoted">
      <summary>
            (11) Thin dash dot doted style (BIFF8 and higher only)
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.LineStyle.MediumDashDotDotted">
      <summary>
            (12) Medium dash dot dotted style (BIFF8 and higher only)
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.LineStyle.SlantedMediumDashDotted">
      <summary>
            (13) Slanted medium dash dotted style (BIFF8 and higher only)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.PageOrder">
      <summary>
            Specifies printed page order.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PageOrder.DownThenOver">
      <summary>
            Order pages vertically first, then move horizontally.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PageOrder.OverThenDown">
      <summary>
            Order pages horizontally first, then move vertically.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.PageOrientation">
      <summary>
            Specifies the paper orientation.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PageOrientation.Landscape">
      <summary>
            Landscape orientation.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PageOrientation.Portrait">
      <summary>
            Portrait orientation.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.PaperSize">
      <summary>
            Specifies the paper size.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.Paper10x11">
      <summary>
            10 x 11 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.Paper10x14">
      <summary>
            10 x 14 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.Paper11x17">
      <summary>
            11 x 17 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.Paper12x11">
      <summary>
            12 x 11 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.Paper15x11">
      <summary>
            15 x 11 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.Paper9x11">
      <summary>
            9 x 11 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA2">
      <summary>
            A2 420 x 594 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA3">
      <summary>
            A3 297 x 420 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA3Extra">
      <summary>
            A3 Extra 322 x 445 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA3Rotated">
      <summary>
            A3 Rotated 420 x 297 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA3Transverse">
      <summary>
            A3 Transverse 297 x 420 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA3ExtraTransverse">
      <summary>
            A3 Extra Transverse 322 x 445 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA4">
      <summary>
            A4 210 x 297 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA4Extra">
      <summary>
            A4 Extra 9.27 x 12.69 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA4Plus">
      <summary>
            A4 Plus 210 x 330 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA4Rotated">
      <summary>
            A4 Rotated 297 x 210 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA4Small">
      <summary>
            A4 Small 210 x 297 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA4Transverse">
      <summary>
            A4 Transverse 210 x 297 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA5">
      <summary>
            A5 148 x 210 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA5Extra">
      <summary>
            A5 Extra 174 x 235 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA5Rotated">
      <summary>
            A5 Rotated 210 x 148 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA5Transverse">
      <summary>
            A5 Transverse 148 x 210 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA6">
      <summary>
            A6 105 x 148 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperA6Rotated">
      <summary>
            A6 Rotated 148 x 105 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperB4">
      <summary>
            B4 (JIS) 250 x 354 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperB4ISO">
      <summary>
            B4 (ISO) 250 x 353 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperB4Rotated">
      <summary>
            B4 (JIS) Rotated 364 x 257 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperB5">
      <summary>
            B5 (JIS) 182 x 257 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperB5Extra">
      <summary>
            B5 (ISO) Extra 201 x 276 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperB5Rotated">
      <summary>
            B5 (JIS) Rotated 257 x 182 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperB5Transverse">
      <summary>
            B5 (JIS) Transverse 182 x 257 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperB6">
      <summary>
            B6 (JIS) 128 x 182 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperB6Rotated">
      <summary>
            B6 (JIS) Rotated 182 x 128 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperCsheet">
      <summary>
            C size sheet
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperDsheet">
      <summary>
            D size sheet
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelope09">
      <summary>
            US Envelope #9 3 7/8 x 8 7/8
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelope10">
      <summary>
            US Envelope #10 4 1/8 x 9 1/2
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelope11">
      <summary>
            US Envelope #11 4 1/2 x 10 3/8
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelope12">
      <summary>
            US Envelope #12 4 \276 x 11
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelope14">
      <summary>
            US Envelope #14 5 x 11 1/2
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelopeB4">
      <summary>
            Envelope B4 250 x 353 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelopeB5">
      <summary>
            Envelope B5 176 x 250 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelopeB6">
      <summary>
            Envelope B6 176 x 125 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelopeC3">
      <summary>
            Envelope C3 324 x 458 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelopeC4">
      <summary>
            Envelope C4 229 x 324 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelopeC5">
      <summary>
            Envelope C5 162 x 229 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelopeC6">
      <summary>
            Envelope C6 114 x 162 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelopeC65">
      <summary>
            Envelope C65 114 x 229 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelopeDL">
      <summary>
            Envelope DL 110 x 220mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelopeInvite">
      <summary>
            Envelope Invite 220 x 220 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelopeItaly">
      <summary>
            Envelope 110 x 230 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelopeMonarch">
      <summary>
            US Envelope Monarch 3.875 x 7.5 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEnvelopePersonal">
      <summary>
            6 3/4 US Envelope 3 5/8 x 6 1/2 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperEsheet">
      <summary>
            E size sheet
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperExecutive">
      <summary>
            US Executive 7 1/4 x 10 1/2 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperFanfoldLegalGerman">
      <summary>
            German Legal Fanfold 8 1/2 x 13 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperFanfoldStdGerman">
      <summary>
            German Std Fanfold 8 1/2 x 12 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperFanfoldUS">
      <summary>
            US Std Fanfold 14 7/8 x 11 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperFolio">
      <summary>
            Folio 8 1/2 x 13 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperJapaneseDoublePostcard">
      <summary>
            Japanese Double Postcard 200 x 148 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperJapaneseDoublePostcardRotated">
      <summary>
            Double Japanese Postcard Rotated 148 x 200 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperJapaneseEnvelopeChou3">
      <summary>
            Japanese Envelope Chou #3
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperJapaneseEnvelopeChou3Rotated">
      <summary>
            Japanese Envelope Chou #3 Rotated
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperJapaneseEnvelopeChou4">
      <summary>
            Japanese Envelope Chou #4
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperJapaneseEnvelopeChou4Rotated">
      <summary>
            Japanese Envelope Chou #4 Rotated
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperJapaneseEnvelopeKaku2">
      <summary>
            Japanese Envelope Kaku #2
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperJapaneseEnvelopeKaku2Rotated">
      <summary>
            Japanese Envelope Kaku #2 Rotated
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperJapaneseEnvelopeKaku3">
      <summary>
            Japanese Envelope Kaku #3
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperJapaneseEnvelopeKaku3Rotated">
      <summary>
            Japanese Envelope Kaku #3 Rotated
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperJapaneseEnvelopeYou4">
      <summary>
            Japanese Envelope You #4
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperJapaneseEnvelopeYou4Rotated">
      <summary>
            Japanese Envelope You #4 Rotated
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperJapanesePostcard">
      <summary>
            Japanese Postcard 100 x 148 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperJapanesePostcardRotated">
      <summary>
            Japanese Postcard Rotated 148 x 100 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperLedger">
      <summary>
            US Ledger 17 x 11 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperLegal">
      <summary>
            US Legal 8 1/2 x 14 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperLegalExtra9">
      <summary>
            US Legal Extra 9 \275 x 15 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperLetter">
      <summary>
            US Letter 8 1/2 x 11 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperLetterExtra9">
      <summary>
            US Letter Extra 9 \275 x 12 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperLetterExtraTransverse9">
      <summary>
            Letter Extra Transverse 9\275 x 12 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperLetterPlus">
      <summary>
            US Letter Plus 8.5 x 12.69 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperLetterRotated">
      <summary>
            Letter Rotated 11 x 8 1/2 11 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperLetterSmall">
      <summary>
            US Letter Small 8 1/2 x 11 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperLetterTransverse">
      <summary>
            Letter Transverse 8 \275 x 11 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperNote">
      <summary>
            US Note 8 1/2 x 11 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRC16K">
      <summary>
            PRC 16K 146 x 215 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRC16KRotated">
      <summary>
            PRC 16K Rotated
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRC32K">
      <summary>
            PRC 32K 97 x 151 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRC32KRotated">
      <summary>
            PRC 32K Rotated
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRC32KBig">
      <summary>
            PRC 32K(Big) 97 x 151 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRC32KBigRotated">
      <summary>
            PRC 32K(Big) Rotated
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope1">
      <summary>
            PRC Envelope #1 102 x 165 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope1Rotated">
      <summary>
            PRC Envelope #1 Rotated 165 x 102 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope2">
      <summary>
            PRC Envelope #2 102 x 176 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope2Rotated">
      <summary>
            PRC Envelope #2 Rotated 176 x 102 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope3">
      <summary>
            PRC Envelope #3 125 x 176 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope3Rotated">
      <summary>
            PRC Envelope #3 Rotated 176 x 125 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope4">
      <summary>
            PRC Envelope #4 110 x 208 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope4Rotated">
      <summary>
            PRC Envelope #4 Rotated 208 x 110 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope5">
      <summary>
            PRC Envelope #5 110 x 220 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope5Rotated">
      <summary>
            PRC Envelope #5 Rotated 220 x 110 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope6">
      <summary>
            PRC Envelope #6 120 x 230 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope6Rotated">
      <summary>
            PRC Envelope #6 Rotated 230 x 120 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope7">
      <summary>
            PRC Envelope #7 160 x 230 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope7Rotated">
      <summary>
            PRC Envelope #7 Rotated 230 x 160 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope8">
      <summary>
            PRC Envelope #8 120 x 309 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope8Rotated">
      <summary>
            PRC Envelope #8 Rotated 309 x 120 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope9">
      <summary>
            PRC Envelope #9 229 x 324 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope9Rotated">
      <summary>
            PRC Envelope #9 Rotated 324 x 229 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope10">
      <summary>
            PRC Envelope #10 324 x 458 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperPRCEnvelope10Rotated">
      <summary>
            PRC Envelope #10 Rotated 458 x 324 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperQuarto">
      <summary>
            Quarto 215 x 275 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperStatement">
      <summary>
            US Statement 5 1/2 x 8 1/2 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperSuperA">
      <summary>
            SuperA/SuperA/A4 227 x 356 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperSuperB">
      <summary>
            SuperB/SuperB/A3 305 x 487 mm
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperTabloid">
      <summary>
            US Tabloid 11 x 17 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperTabloidExtra">
      <summary>
            US Tabloid Extra 11.69 x 18 in
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PaperSize.PaperUser">
      <summary>
            User (custom) paper size. 
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.PatternStyle">
      <summary>
            Pattern style enumeration
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.Checker">
      <summary>
            Checkerboard
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.CrissCross">
      <summary>
            Criss-cross lines
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.Down">
      <summary>
            Dark diagonal lines running from the upper left to the lower right
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.Gray16">
      <summary>
            16% gray
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.Gray25">
      <summary>
            25% gray
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.Gray50">
      <summary>
            50% gray
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.Gray75">
      <summary>
            75% gray
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.Gray8">
      <summary>
            8% gray
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.Grid">
      <summary>
            Grid
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.Horizontal">
      <summary>
            Dark horizontal lines
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.LightDown">
      <summary>
            Light diagonal lines running from the upper left to the lower right
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.LightHorizontal">
      <summary>
            Light horizontal lines
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.LightUp">
      <summary>
            Light diagonal lines running from the lower left to the upper right
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.LightVertical">
      <summary>
            Light vertical lines
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.None">
      <summary>
            No pattern
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.SemiGray75">
      <summary>
            75% dark moire
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.Solid">
      <summary>
            Solid color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.Up">
      <summary>
            Dark diagonal lines running from the lower left to the upper right
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PatternStyle.Vertical">
      <summary>
            Dark vertical lines
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.PrintErrors">
      <summary>
            Specifies how to display cells with errors when printing the worksheet.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PrintErrors.Displayed">
      <summary>
            Display cell errors as displayed on screen.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PrintErrors.Blank">
      <summary>
            Display cell errors as blank.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PrintErrors.Dash">
      <summary>
            Display cell errors as dashes ("--").
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PrintErrors.NA">
      <summary>
            Display cell errors as #N/A.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.PrintLocation">
      <summary>
            Specifies printed page order.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PrintLocation.PrintNoComments">
      <summary>
            Do not print comments.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PrintLocation.PrintSheetEnd">
      <summary>
            Print comments at end of document.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.PrintLocation.PrintInPlace">
      <summary>
            Print comments as displayed.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.ReadingOrder">
      <summary>
            Reading order enumeration
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.ReadingOrder.Context">
      <summary>
            (0) Context dependent order
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.ReadingOrder.LeftToRight">
      <summary>
            (64) Left to right order
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.ReadingOrder.RightToLeft">
      <summary>
            (128) Right to left order
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.SHEETVISIBILITY">
      <summary>
            The hidden state of the sheet
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SHEETVISIBILITY.Visible">
      <summary>
            Visible
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SHEETVISIBILITY.Hidden">
      <summary>
            Hidden
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SHEETVISIBILITY.VeryHidden">
      <summary>
            Very Hidden. The sheet is hidden and cannot be displayed using the user interface
            Can only be set programmatically, e.g. with a Visual Basic macro.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.SortDataOption">
      <summary>
            Specifies how to sort text.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SortDataOption.SortNormal">
      <summary>
            Sorts numeric and text data separately.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SortDataOption.SortTextAsNumbers">
      <summary>
            Treat text as numeric data for the sort.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.SortOrder">
      <summary>
            Specifies the sort order
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SortOrder.Ascending">
      <summary>
            Sorts in ascending order
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SortOrder.Descending">
      <summary>
            Sorts in descending order
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.SortOrientation">
      <summary>
            Specifies the sort orientation.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SortOrientation.SortColumns">
      <summary>
            Sorts by column.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SortOrientation.SortRows">
      <summary>
            Sorts by row.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.SpreadsheetFormatType">
      <summary>
            Spreadsheet type by file format 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SpreadsheetFormatType.XLS">
      <summary>
            (1) XLS spreadsheet format
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SpreadsheetFormatType.CSV">
      <summary>
            (2) CSV spreadsheet format
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SpreadsheetFormatType.XLSX">
      <summary>
            (3) XLSX spreadsheet format
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SpreadsheetFormatType.ODS">
      <summary>
            (4) ODS spreadsheet format
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SpreadsheetFormatType.XML">
      <summary>
            (5) XML spreadsheet format
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SpreadsheetFormatType.TXT">
      <summary>
            (6) TXT spreadsheet format
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.SpreadsheetFormatType.HTML">
      <summary>
            (7) HTML spreadsheet format
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.VisibilityTypes">
      <summary>
            This simple type defines the possible states for workbook window visibility.
            Please take a look at:
                Open XML spec, 18.18.89 ST_Visibility (Visibility Types)
                [MS-XLS] 2.4.345 Window1
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.VisibilityTypes.hidden">
      <summary>
            Indicates the workbook window is hidden, but can be
            shown by the user via the user interface.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.VisibilityTypes.veryHidden">
      <summary>
            Indicates the sheet is hidden and cannot be shown in the user
            interface (UI). This state is only available programmatically.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.VisibilityTypes.visible">
      <summary>
            Indicates the workbook window is visible.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.XLSPallette">
      <summary>
            Class representing default colour table
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Black">
      <summary>
            Black color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.White">
      <summary>
            White color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Red">
      <summary>
            Red color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Lime">
      <summary>
            Lime color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Blue">
      <summary>
            Blue color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Yellow">
      <summary>
            Yellow color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Magenta">
      <summary>
            Magenta color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Aqua">
      <summary>
            Aqua color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Maroon">
      <summary>
            Maroon color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Green">
      <summary>
            Green color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Navy">
      <summary>
            Navy color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Olive">
      <summary>
            Olive color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Purple">
      <summary>
            Purple color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Teal">
      <summary>
            Teal color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Silver">
      <summary>
            Silver color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Gray">
      <summary>
            Gray color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Fuchsia">
      <summary>
            Funchsia color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.BlueViolet">
      <summary>
            BlueViolet color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Cherry2">
      <summary>
            Cherry2 color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Coral">
      <summary>
            Coral color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.CornFlower">
      <summary>
            CornFlower color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.DarkViolet">
      <summary>
            DarkViolet color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Ivory">
      <summary>
            Ivory color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.LightTurquois">
      <summary>
            LightTurquois color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.PastelSky">
      <summary>
            Pastel sky color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Sky">
      <summary>
            Sky color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.PaleGreen">
      <summary>
            Pale green color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.LightYellow">
      <summary>
            Light yellow color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.PaleSky">
      <summary>
            Pale sky color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Rose">
      <summary>
            Rose color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Lilac">
      <summary>
            Lilac color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.LightBrown">
      <summary>
            Light brown color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.DarkSky">
      <summary>
            Dark sky color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.DarkTurquois">
      <summary>
            Dark Turquois
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Grass">
      <summary>
            Grass color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Gold">
      <summary>
            Gold color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.LightOrange">
      <summary>
            Light orange color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Orange">
      <summary>
            Orange color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.DarkBlueGrey2">
      <summary>
            Dark blue grey color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Grey40">
      <summary>
            Grey40 color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.DarkBlueGrey">
      <summary>
            Dark blue grey color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Emerald">
      <summary>
            Emerald color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.DarkGreen">
      <summary>
            Dark green color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Olive2">
      <summary>
            Olive2 color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Brown">
      <summary>
            Brown color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Cherry">
      <summary>
            Cherry color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Indigo">
      <summary>
            Indigo color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.XLSPallette.Grey80">
      <summary>
            Grey80 color
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Constants.XLSPallette.Index(System.Drawing.Color)">
      <summary>
            Indexes the specified color.
            </summary>
      <param name="color">The color.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Constants.XLSPallette.Index(System.Drawing.Color,System.Drawing.Color[])">
      <summary>
            Indexes the specified color.
            </summary>
      <param name="color">The color.</param>
      <param name="palette">The palette.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Constants.XLSPallette.Index2(System.Drawing.Color)">
      <summary>
            Indexes the specified color.
            </summary>
      <param name="color">The color.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Constants.XLSPallette.Index2(System.Drawing.Color,System.Drawing.Color[])">
      <summary>
            Indexes the specified color.
            </summary>
      <param name="color">The color.</param>
      <param name="palette">The palette.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Constants.XLSPallette.Colour(System.UInt16)">
      <summary>
            Return color for the specified index.
            </summary>
      <param name="Index">The index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Constants.XLSPallette.Colour(System.UInt16,System.Boolean)">
      <summary>
            Return color for the specified index.
            </summary>
      <param name="Index">The index.</param>
      <param name="isBIFF8">if set to <c>true</c> [is BIFF8].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Constants.XLSPallette.Colour(System.UInt16,System.Drawing.Color[])">
      <summary>
            Return color for the specified index.
            </summary>
      <param name="Index">The index.</param>
      <param name="palette">The color palette.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.ConversionOptions">
      <summary>
            Conversion options for XLS to CSV, TXT and other conversions
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.ConversionOptions.delimiter">
      <summary>
            delimiter
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.ConversionOptions.#ctor(System.String,System.String,Bytescout.Spreadsheet.OutputFormat)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.ConversionOptions" /> class.
            </summary>
      <param name="Delimiter">The delimiter.</param>
      <param name="Quote">The quote.</param>
      <param name="Format">The format.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.ConversionOptions.OutputFormat">
      <summary>
            Gets or sets the output format.
            </summary>
      <value>The output format.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.ConversionOptions.Delimiter">
      <summary>
            Gets or sets the delimiter.
            </summary>
      <value>The delimiter.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.ConversionOptions.Quote">
      <summary>
            Gets or sets the quote.
            </summary>
      <value>The quote.</value>
    </member>
    <member name="T:Bytescout.CSV.CSVDocument">
      <summary>
            Class for read CSV files
            </summary>
    </member>
    <member name="M:Bytescout.CSV.CSVDocument.#ctor(System.String,System.Text.Encoding)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.CSV.CSVDocument" /> class.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Encoding">The character encoding.</param>
    </member>
    <member name="M:Bytescout.CSV.CSVDocument.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.CSV.CSVDocument" /> class.
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:Bytescout.CSV.CSVDocument.ReadToWorkbook(Bytescout.Spreadsheet.Spreadsheet)">
      <summary>
            Reads CSV files to workbook.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.CSV.CSVDocument.ReadToWorksheet(Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Reads CSV files to worksheet.
            </summary>
      <param name="sheet">The sheet.</param>
    </member>
    <member name="M:Bytescout.CSV.CSVDocument.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Bytescout.CSV.CSVDocument.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Bytescout.CSV.CSVDocument.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Bytescout.CSV.CSVDocument" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="P:Bytescout.CSV.CSVDocument.Separator">
      <summary>
            Gets or sets the separator.
            </summary>
      <value>The separator.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Constants.DataType">
      <summary>
            Data type enumeration
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.DataType.BOOLEAN">
      <summary>
            (0) Boolean
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.DataType.EMPTY">
      <summary>
            (1) Empty
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.DataType.ERROR">
      <summary>
            (2) Error 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.DataType.NUMERIC">
      <summary>
            (3) Numeric
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Constants.DataType.STRING">
      <summary>
            (4) String
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MacroType">
      <summary>
            
            Please take a look at:
                XlXLMMacroType in Microsoft Office Excel Visual Basic Reference
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MacroType.Command">
      <summary>
            The name refers to a user-defined macro.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MacroType.Function">
      <summary>
            The name refers to a user-defined function.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MacroType.NotXLM">
      <summary>
            The name doesn't refer to a function or macro.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.DefinedName">
      <summary>
            Represents a defined name
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.DefinedName.Index">
      <summary>
            Returns the zero based index of the defined name in the DefinedNames collection. 
            </summary>
      <value>The index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.DefinedName.Name">
      <summary>
            Gets or sets the name of the defined name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.DefinedName.Comment">
      <summary>
            Gets or sets the comment associated with this defined name. 
            </summary>
      <value>The comment.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.DefinedName.Value">
      <summary>
            Gets or sets the string containing the formula that the name is defined to refer to.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.DefinedName.RefersTo">
      <summary>
            Gets or sets the formula that the name is defined to refer to.
            </summary>
      <value>The refers to.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.DefinedName.Visible">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.DefinedName" /> is visible in the user interface.
            </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.SpreadsheetException">
      <summary>
            Spreadsheet exception
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetException" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="T:Bytescout.Spreadsheet.SpreadsheetChartException">
      <summary>
            Represents errors that occur saving chart to biff stream. 
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetChartException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetChartException" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetChartException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetChartException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetChartException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetChartException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetChartException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetChartException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="T:Bytescout.Spreadsheet.BiffChartSaveException">
      <summary>
            Represents errors that occur saving chart to biff stream. 
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.BiffChartSaveException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BiffChartSaveException" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.BiffChartSaveException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BiffChartSaveException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BiffChartSaveException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BiffChartSaveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BiffChartSaveException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="T:Bytescout.Spreadsheet.SpreadsheetProtectionException">
      <summary>
            Spreadsheet protect exception
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetProtectionException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionException" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetProtectionException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetProtectionException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetProtectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="T:Bytescout.Spreadsheet.InvalidPasswordException">
      <summary>
            Spreadsheet protect exception
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.InvalidPasswordException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionException" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.InvalidPasswordException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.InvalidPasswordException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.InvalidPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="T:Bytescout.Spreadsheet.SpreadsheetProtectionPasswordRequired">
      <summary>
            Exception thrown when spreadsheet is protected with the password
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetProtectionPasswordRequired.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionPasswordRequired" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetProtectionPasswordRequired.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionPasswordRequired" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetProtectionPasswordRequired.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionPasswordRequired" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetProtectionPasswordRequired.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionPasswordRequired" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="T:Bytescout.Spreadsheet.SpreadsheetFormulaException">
      <summary>
            Spreadsheet formula exception
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetFormulaException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetFormulaException" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetFormulaException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetFormulaException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetFormulaException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetFormulaException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetFormulaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetFormulaException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="T:Bytescout.Spreadsheet.SpreadsheetReferenceException">
      <summary>
            Spreadsheet reference exception
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetReferenceException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetReferenceException" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetReferenceException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetReferenceException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetReferenceException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetReferenceException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetReferenceException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="T:Bytescout.Spreadsheet.FormulaReferenceException">
      <summary>
            Formula reference exception
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.FormulaReferenceException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.FormulaReferenceException" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.FormulaReferenceException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.FormulaReferenceException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.FormulaReferenceException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.FormulaReferenceException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.FormulaReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.FormulaReferenceException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="T:Bytescout.Spreadsheet.BuiltInFuncException">
      <summary>
            Built-in function in formula exception
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.BuiltInFuncException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BuiltInFuncException" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.BuiltInFuncException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BuiltInFuncException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BuiltInFuncException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BuiltInFuncException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.BuiltInFuncException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BuiltInFuncException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="T:Bytescout.Spreadsheet.FuncNotSupportedException">
      <summary>
            Built-in function is not supported exception
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.FuncNotSupportedException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BuiltInFuncException" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.FuncNotSupportedException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BuiltInFuncException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.FuncNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BuiltInFuncException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.FuncNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.BuiltInFuncException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXMLParserException">
      <summary>
            Open XML (XLSX) parser exception
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXMLParserException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXMLParserException" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXMLParserException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXMLParserException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXMLParserException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXMLParserException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXMLParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXMLParserException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="T:Bytescout.Spreadsheet.SpreadsheetProtectionXLSSheetLimitationsException">
      <summary>
            Spreadsheet protect exception
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetProtectionXLSSheetLimitationsException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionException" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetProtectionXLSSheetLimitationsException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetProtectionXLSSheetLimitationsException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetProtectionXLSSheetLimitationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetProtectionException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
      <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
    </member>
    <member name="T:Bytescout.Spreadsheet.ExtendedFormat">
      <summary>
            Extended format class
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.ExtendedFormat.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.ExtendedFormat.op_Equality(Bytescout.Spreadsheet.ExtendedFormat,Bytescout.Spreadsheet.ExtendedFormat)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.ExtendedFormat.op_Inequality(Bytescout.Spreadsheet.ExtendedFormat,Bytescout.Spreadsheet.ExtendedFormat)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.ExtendedFormat.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.ExtendedFormat.Equals(Bytescout.Spreadsheet.ExtendedFormat)">
      <summary>
            Equalses the specified ExtendedFormat.
            </summary>
      <param name="xf">The ExtendedFormat.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.ExtendedFormat.Finalize">
      <summary>
            Destructor
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.ExtendedFormat.Dispose">
      <summary>
            Disposes the instance
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.ExtendedFormat.Dispose(System.Boolean)">
      <summary>
            Disposes the object
            </summary>
      <param name="disposeManagedResources">dispose managed resources</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Formula.XLSBuiltInFunc.SEARCH(System.Object[],Bytescout.Spreadsheet.Cell)">
      <summary>
            Performs a case-insensitive search.
            
            Please take a look at:
                Open XML spec, 18.17.7.285
            </summary>
      <param name="arg">The array of arguments.</param>
      <param name="cell">The cell.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Formula.XLSBuiltInFunc.HLOOKUP(System.Object[],Bytescout.Spreadsheet.Cell)">
      <summary>
            Performs a horizontal search for a value in the top row of a table or an array,
            noting the column in which the matching value is found.
            From that column, the value from a given row is returned.
            
            Please take a look at:
                Open XML spec, 18.17.7.143
            </summary>
      <param name="arg">The array of arguments.</param>
      <param name="cell">The cell.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Formula.XLSBuiltInFunc.VLOOKUP(System.Object[],Bytescout.Spreadsheet.Cell)">
      <summary>
            Performs a vertical search for a value in the left-most column of a table or an array,
            noting the row in which the matching value is found.
            From that row, the value from a given column is returned.
            
            Please take a look at:
                Open XML spec, 18.17.7.343
            </summary>
      <param name="arg">The array of arguments.</param>
      <param name="cell">The cell.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Formula.XLSBuiltInFunc.LEFT(System.Object[],Bytescout.Spreadsheet.Cell)">
      <summary>
            Extracts the left-most number-chars characters from string.
            
            Please take a look at:
                Open XML spec, 18.17.7.191
            </summary>
      <param name="arg">The array of arguments.</param>
      <param name="cell">The cell.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Formula.XLSBuiltInFunc.RIGHT(System.Object[],Bytescout.Spreadsheet.Cell)">
      <summary>
            Extracts the right-most number-chars characters from string.
            
            Please take a look at:
                Open XML spec, 18.17.7.275
            </summary>
      <param name="arg">The array of arguments.</param>
      <param name="cell">The cell.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Formula.XLSBuiltInFunc.SUMPRODUCT(System.Object[],Bytescout.Spreadsheet.Cell)">
      <summary>
            Multiplies the corresponding elements in the array arguments in argument-list,
            and returns the sum of those products.
            
            Please take a look at:
                Open XML spec, 18.17.7.309
            </summary>
      <param name="arg">The array of arguments.</param>
      <param name="cell">The cell.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Formula.XLSBuiltInFunc.INDEX(System.Object[],Bytescout.Spreadsheet.Cell)">
      <summary>
            Locates a value or the reference to a value from within a table or range.
            
            Please take a look at:
                Open XML spec, 18.17.7.166
            </summary>
      <param name="arg">The array of arguments.</param>
      <param name="cell">The cell.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Formula.XLSBuiltInFunc.INDIRECT(System.Object[],Bytescout.Spreadsheet.Cell)">
      <summary>
            Locates the reference and evaluates that reference to get to its underlying value.
            
            Please take a look at:
                Open XML spec, 18.17.7.167
            </summary>
      <param name="arg">The array of arguments.</param>
      <param name="cell">The cell.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Formula.XLSBuiltInFunc.FIND(System.Object[],Bytescout.Spreadsheet.Cell)">
      <summary>
            Performs a case-sensitive search using a lexical comparison for the first occurrence.
            
            Please take a look at:
                Open XML spec, 18.17.7.119
            </summary>
      <param name="arg">The array of arguments.</param>
      <param name="cell">The cell.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Formula.XLSBuiltInFunc.SUMIF(System.Object[],Bytescout.Spreadsheet.Cell)">
      <summary>
            Applies selection criteria on the values in one range of cells and sums
            the values of the cells in a corresponding range.
            
            Please take a look at:
                Open XML spec, 18.17.7.307
            </summary>
      <param name="arg">The array of arguments.</param>
      <param name="cell">The cell.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Formula.XLSBuiltInFunc.RANK(System.Object[],Bytescout.Spreadsheet.Cell)">
      <summary>
            Computes the rank of a number in a list of numbers.
            
            Please take a look at:
                Open XML spec, 18.17.7.269
            </summary>
      <param name="arg">The array of arguments.</param>
      <param name="cell">The cell.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Formula.XLSBuiltInFunc.MATCH(System.Object[],Bytescout.Spreadsheet.Cell)">
      <summary>
            Locates the relative position of an array item that matches a specified value in a specified order.
            
            Please take a look at:
                Open XML spec, 18.17.7.204
            </summary>
      <param name="arg">The array of arguments.</param>
      <param name="cell">The cell.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.boolList.Add(System.Boolean)">
      <summary>
            Adds an <see cref="T:System.Boolean" /> to the end of the boolList.
            </summary>
      <param name="item">The <see cref="T:System.Boolean" /> to be added to the end of the boolList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.boolList.ToArray">
      <summary>
            Copies the elements of the <see cref="T:Bytescout.Spreadsheet.Generic.boolList" /> to a new array.
            </summary>
      <returns>An array containing copies of the elements of the boolList</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.boolList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:System.Boolean" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.boolList.Count">
      <summary>
            Gets the number of elements actually contained in the boolList.
            </summary>
      <value>The number of elements actually contained in the boolList.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.boolList.Capacity">
      <summary>
            Gets or sets the number of elements that the boolList can contain.
            </summary>
      <value>The number of elements that the boolList can contain.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.byteArraysList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.byteArraysList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.byteArraysList.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.byteArraysList" /> class that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.byteArraysList.Add(System.Byte[])">
      <summary>
            Adds an byte[] to the end of the byteArraysList.
            </summary>
      <param name="item">The byte[] to be added to the end of the byteArraysList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.byteArraysList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.Generic.byteArraysList" />.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.byteArraysList.Item(System.Int32)">
      <summary>
            Gets or sets the byte[] at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.byteArraysList.Count">
      <summary>
            Gets the number of elements actually contained in the byteArraysList.
            </summary>
      <value>The number of elements actually contained in the byteArraysList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.byteList.Add(System.Byte)">
      <summary>
            Adds an <see cref="T:System.Byte" /> to the end of the byteList.
            </summary>
      <param name="item">The <see cref="T:System.Byte" /> to be added to the end of the byteList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.byteList.AddRange(System.Byte[])">
      <summary>
            Adds the elements of the specified array to the end of the byteList.
            </summary>
      <param name="array">The array whose elements should be added to the end of the <see cref="T:Bytescout.Spreadsheet.Generic.byteList" />"/&gt;.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.byteList.AddRange(Bytescout.Spreadsheet.Generic.byteList)">
      <summary>
            Adds the elements of the <see cref="T:Bytescout.Spreadsheet.Generic.byteList" /> to the end of the byteList.
            </summary>
      <param name="list">The <see cref="T:Bytescout.Spreadsheet.Generic.byteList" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.byteList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.Generic.byteList" />.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.byteList.Insert(System.Int32,System.Byte)">
      <summary>
            Inserts an <see cref="T:System.Byte" /> into the <see cref="T:Bytescout.Spreadsheet.Generic.byteList" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:System.Byte" /> should be inserted.</param>
      <param name="item">The <see cref="T:System.Byte" /> to insert.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.byteList.InsertRange(System.Int32,System.Byte[])">
      <summary>
            Inserts the elements of a array into the byteList at the specified index.
            </summary>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="array">The array whose elements should be inserted into the <see cref="T:Bytescout.Spreadsheet.Generic.byteList" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.byteList.ToArray">
      <summary>
            Copies the elements of the <see cref="T:Bytescout.Spreadsheet.Generic.byteList" /> to a new array.
            </summary>
      <returns>An array containing copies of the elements of the byteList</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.byteList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:System.Byte" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.byteList.Count">
      <summary>
            Gets the number of elements actually contained in the byteList.
            </summary>
      <value>The number of elements actually contained in the byteList.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.byteList.Capacity">
      <summary>
            Gets or sets the number of elements that the byteList can contain.
            </summary>
      <value>The number of elements that the byteList can contain.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.byteStack.Push(System.Byte)">
      <summary>
            Inserts an <see cref="T:System.Byte" /> at the top of the byteStack.
            </summary>
      <param name="item">The <see cref="T:System.Byte" /> to push onto the <see cref="T:Bytescout.Spreadsheet.Generic.byteStack" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.byteStack.Peek">
      <summary>
            Returns the <see cref="T:System.Byte" /> at the top of the <see cref="T:Bytescout.Spreadsheet.Generic.byteStack" /> without removing it.
            </summary>
      <returns>The <see cref="T:System.Byte" /> at the top of the byteStack.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.byteStack.Pop">
      <summary>
            Removes and returns the <see cref="T:System.Byte" /> at the top of the <see cref="T:Bytescout.Spreadsheet.Generic.byteStack" />.
            </summary>
      <returns>The <see cref="T:System.Byte" /> removed from the top of the byteStack</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.byteStack.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:Bytescout.Spreadsheet.Generic.byteStack" />.
            </summary>
      <value>The number of elements contained in the byteStack.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellList.Clone">
      <summary>
            Creates a shallow copy of the <see cref="T:Bytescout.Spreadsheet.Generic.CellList" />.
            </summary>
      <returns>A shallow copy of the CellList.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellList.Add(Bytescout.Spreadsheet.Cell)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Cell" /> to the end of the CellList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Cell" /> to be added to the end of the CellList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellList.AddUnique(Bytescout.Spreadsheet.Cell)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Cell" /> to the end of the CellList, if item is not there in list.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Cell" /> to be added to the end of the CellList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellList.AddRange(Bytescout.Spreadsheet.Generic.CellList)">
      <summary>
            Adds the elements of the <see cref="T:Bytescout.Spreadsheet.Generic.CellList" /> to the end of the CellList.
            </summary>
      <param name="list">The <see cref="T:Bytescout.Spreadsheet.Generic.CellList" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellList.IndexOf(Bytescout.Spreadsheet.Cell)">
      <summary>
            Searches for the specified <see cref="T:Bytescout.Spreadsheet.Cell" /> and returns the zero-based index of the first occurrence within the entire CellList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Cell" /> to locate in the CellList.</param>
      <returns>The zero-based index of the first occurrence of item within the entire CellList, if found; otherwise, –1.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellList.Insert(System.Int32,Bytescout.Spreadsheet.Cell)">
      <summary>
            Inserts an <see cref="T:Bytescout.Spreadsheet.Cell" /> into the <see cref="T:Bytescout.Spreadsheet.Generic.CellList" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Bytescout.Spreadsheet.Cell" /> should be inserted.</param>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Cell" /> to insert.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellList.Remove(Bytescout.Spreadsheet.Cell)">
      <summary>
            Removes the first occurrence of a specific <see cref="T:Bytescout.Spreadsheet.Cell" /> from the <see cref="T:Bytescout.Spreadsheet.Generic.CellList" />.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Cell" /> to remove from the <see cref="T:Bytescout.Spreadsheet.Generic.CellList" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellList.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:Bytescout.Spreadsheet.Generic.CellList" />. 
            </summary>
      <param name="index">The The zero-based index of the element to remove.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.CellList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.Cell" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.CellList.Count">
      <summary>
            Gets the number of elements actually contained in the CellList.
            </summary>
      <value>The number of elements actually contained in the CellList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsCacheDictionary.Add(System.Int32,Bytescout.Spreadsheet.Records.XlsCellsCache)">
      <summary>
            Adds the specified key and value to the dictionary.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsCacheDictionary.ContainsKey(System.Int32)">
      <summary>
            Determines whether the <see cref="T:Bytescout.Spreadsheet.Generic.CellsCacheDictionary" /> contains the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:Bytescout.Spreadsheet.Generic.CellsCacheDictionary" />.</param>
      <returns>
        <c>true</c> if the <see cref="T:Bytescout.Spreadsheet.Generic.CellsCacheDictionary" /> contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.CellsCacheDictionary.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Records.XlsCellsCache" /> associated with the specified key.
            </summary>
      <value>The key of the value to get </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.CellsCacheDictionary.Keys">
      <summary>
            Gets an System.Collections.ICollection containing the keys in the
            stringDictionary.
            </summary>
      <value>An System.Collections.ICollection containing the keys in the
            stringDictionary.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsRange3dList.Add(Bytescout.Spreadsheet.Structures.CellsRange3d)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange3d" /> to the end of the CellsRange3dList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange3d" /> to be added to the end of the CellsRange3dList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsRange3dList.AddUnique(Bytescout.Spreadsheet.Structures.CellsRange3d)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange3d" /> to the end of the CellsRange3dList, if item is not there in list.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange3d" /> to be added to the end of the CellsRange3dList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsRange3dList.AddRange(Bytescout.Spreadsheet.Generic.CellsRange3dList)">
      <summary>
            Adds the elements of the <see cref="T:Bytescout.Spreadsheet.Generic.CellsRange3dList" /> to the end of the CellsRange3dList.
            </summary>
      <param name="list">The <see cref="T:Bytescout.Spreadsheet.Generic.CellsRange3dList" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsRange3dList.IndexOf(Bytescout.Spreadsheet.Structures.CellsRange3d)">
      <summary>
            Searches for the specified <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange3d" /> and returns the zero-based index of the first occurrence within the entire CellsRange3dList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange3d" /> to locate in the CellsRange3dList.</param>
      <returns>The zero-based index of the first occurrence of item within the entire CellsRange3dList, if found; otherwise, –1.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsRange3dList.Remove(Bytescout.Spreadsheet.Structures.CellsRange3d)">
      <summary>
            Removes the first occurrence of a specific <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange3d" /> from the <see cref="T:Bytescout.Spreadsheet.Generic.CellsRange3dList" />.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange3d" /> to remove from the <see cref="T:Bytescout.Spreadsheet.Generic.CellsRange3dList" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsRange3dList.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:Bytescout.Spreadsheet.Generic.CellsRange3dList" />. 
            </summary>
      <param name="index">The The zero-based index of the element to remove.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.CellsRange3dList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange3d" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.CellsRange3dList.Count">
      <summary>
            Gets the number of elements actually contained in the CellsRange3dList.
            </summary>
      <value>The number of elements actually contained in the CellsRange3dList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsRangeList.Clone">
      <summary>
            Creates a shallow copy of the <see cref="T:Bytescout.Spreadsheet.Generic.CellsRangeList" />.
            </summary>
      <returns>A shallow copy of the CellsRangeList.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsRangeList.Add(Bytescout.Spreadsheet.Structures.CellsRange)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> to the end of the CellsRangeList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> to be added to the end of the CellsRangeList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsRangeList.AddUnique(Bytescout.Spreadsheet.Structures.CellsRange)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> to the end of the CellsRangeList, if item is not there in list.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> to be added to the end of the CellsRangeList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsRangeList.AddRange(Bytescout.Spreadsheet.Generic.CellsRangeList)">
      <summary>
            Adds the elements of the <see cref="T:Bytescout.Spreadsheet.Generic.CellsRangeList" /> to the end of the CellsRangeList.
            </summary>
      <param name="list">The <see cref="T:Bytescout.Spreadsheet.Generic.CellsRangeList" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsRangeList.IndexOf(Bytescout.Spreadsheet.Structures.CellsRange)">
      <summary>
            Searches for the specified <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> and returns the zero-based index of the first occurrence within the entire CellsRangeList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> to locate in the CellsRangeList.</param>
      <returns>The zero-based index of the first occurrence of item within the entire CellsRangeList, if found; otherwise, –1.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsRangeList.Insert(System.Int32,Bytescout.Spreadsheet.Structures.CellsRange)">
      <summary>
            Inserts an <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> into the <see cref="T:Bytescout.Spreadsheet.Generic.CellsRangeList" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> should be inserted.</param>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> to insert.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsRangeList.Remove(Bytescout.Spreadsheet.Structures.CellsRange)">
      <summary>
            Removes the first occurrence of a specific <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> from the <see cref="T:Bytescout.Spreadsheet.Generic.CellsRangeList" />.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> to remove from the <see cref="T:Bytescout.Spreadsheet.Generic.CellsRangeList" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.CellsRangeList.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:Bytescout.Spreadsheet.Generic.CellsRangeList" />. 
            </summary>
      <param name="index">The The zero-based index of the element to remove.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.CellsRangeList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.CellsRangeList.Count">
      <summary>
            Gets the number of elements actually contained in the CellsRangeList.
            </summary>
      <value>The number of elements actually contained in the CellsRangeList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.ColumnList.Add(Bytescout.Spreadsheet.Column)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Column" /> to the end of the ColumnList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Column" /> to be added to the end of the ColumnList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.ColumnList.AddUnique(Bytescout.Spreadsheet.Column)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Column" /> to the end of the ColumnList, if item is not there in list.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Column" /> to be added to the end of the ColumnList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.ColumnList.Insert(System.Int32,Bytescout.Spreadsheet.Column)">
      <summary>
            Inserts an <see cref="T:Bytescout.Spreadsheet.Column" /> into the <see cref="T:Bytescout.Spreadsheet.Generic.ColumnList" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Bytescout.Spreadsheet.Column" /> should be inserted.</param>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Column" /> to insert.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.ColumnList.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:Bytescout.Spreadsheet.Generic.ColumnList" />. 
            </summary>
      <param name="index">The The zero-based index of the element to remove.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.ColumnList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.Column" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.ColumnList.Count">
      <summary>
            Gets the number of elements actually contained in the ColumnList.
            </summary>
      <value>The number of elements actually contained in the ColumnList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.controlList.Add(Bytescout.Spreadsheet.embeddedControl)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.embeddedControl" /> to the end of the controlList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.embeddedControl" /> to be added to the end of the controlList.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.controlList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.embeddedControl" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.controlList.Count">
      <summary>
            Gets the number of elements actually contained in the ControlList.
            </summary>
      <value>The number of elements actually contained in the ControlList.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Generic.DefinedNameList">
      <summary>
            A collection of defined names in a workbook.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.DefinedNameList.Add(Bytescout.Spreadsheet.DefinedName)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.DefinedName" /> to the end of the DefinedNameList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.DefinedName" /> to be added to the end of the DefinedNameList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.DefinedNameList.Add(System.String,System.String)">
      <summary>
            Adds a name to the collection, or modifies the name if it already exists.
            </summary>
      <param name="name">The name of the defined name.</param>
      <param name="formula">The formula to assign to the defined name.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.DefinedNameList.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:Bytescout.Spreadsheet.DefinedName" />. 
            </summary>
      <param name="index">The The zero-based index of the element to remove.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.DefinedNameList.IndexOf(System.String)">
      <summary>
            Searches for the specified string and returns the zero-based index of the first occurrence within the entire DefinedNameList. 
            </summary>
      <param name="name">The name.</param>
      <returns>The zero-based index of the first occurrence of name within the entire DefinedNameList, if found; otherwise, –1. </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.DefinedNameList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.DefinedName" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.DefinedNameList.Item(System.String)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.DefinedName" /> with the specified name.
            </summary>
      <value>The specified name of the element to ge</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.DefinedNameList.Count">
      <summary>
            Gets the number of elements actually contained in the DefinedNameList.
            </summary>
      <value>The number of elements actually contained in the DefinedNameList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.DirectoryEntryList.Add(Bytescout.MSCompoundFile.DirectoryEntry)">
      <summary>
            Adds an <see cref="T:Bytescout.MSCompoundFile.DirectoryEntry" /> to the end of the RowList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.MSCompoundFile.DirectoryEntry" /> to be added to the end of the DirectoryEntryList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.DirectoryEntryList.IndexOf(System.String)">
      <summary>
            Searches for the specified DirectoryEntry by his EntryName and returns
            the zero-based index of the first occurrence within the entire list.
            </summary>
      <param name="value">The SpreadsheetFont to locate in the list. 
            The value can be null.</param>
      <returns>The zero-based index of the first occurrence of value 
            within the entire list, if found; otherwise, -1.</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.DirectoryEntryList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.MSCompoundFile.DirectoryEntry" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.DirectoryEntryList.Count">
      <summary>
            Gets the number of elements actually contained in the DirectoryEntryList.
            </summary>
      <value>The number of elements actually contained in the DirectoryEntryList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.doubleList.Add(System.Double)">
      <summary>
            Adds an <see cref="T:System.Double" /> to the end of the doubleList.
            </summary>
      <param name="item">The <see cref="T:System.Double" /> to be added to the end of the doubleList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.doubleList.AddRange(System.Double[])">
      <summary>
            Adds the elements of the specified array to the end of the doubleList.
            </summary>
      <param name="array">The array whose elements should be added to the end of the <see cref="T:Bytescout.Spreadsheet.Generic.doubleList" />"/&gt;.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.doubleList.ToArray">
      <summary>
            Copies the elements of the <see cref="T:Bytescout.Spreadsheet.Generic.doubleList" /> to a new array.
            </summary>
      <returns>An array containing copies of the elements of the doubleList</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.doubleList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:System.Double" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.doubleList.Count">
      <summary>
            Gets the number of elements actually contained in the doubleList.
            </summary>
      <value>The number of elements actually contained in the doubleList.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.doubleList.Capacity">
      <summary>
            Gets or sets the number of elements that the doubleList can contain.
            </summary>
      <value>The number of elements that the doubleList can contain.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.ExtendedFormatList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.ExtendedFormat" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.ExtendedFormatList.Count">
      <summary>
            Gets the number of elements actually contained in the CellFormats.
            </summary>
      <value>The count.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.FormattingRunList.Add(Bytescout.Spreadsheet.Records.FormattingRun)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Records.FormattingRun" /> to the end of the FormattingRunList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Records.FormattingRun" /> to be added to the end of the FormattingRunList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.FormattingRunList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.Generic.FormattingRunList" />.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.FormattingRunList.ToArray">
      <summary>
            Copies the elements of the <see cref="T:Bytescout.Spreadsheet.Generic.FormattingRunList" /> to a new array.
            </summary>
      <returns>An array containing copies of the elements of the FormattingRunList</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.FormattingRunList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.Records.FormattingRun" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.FormattingRunList.Count">
      <summary>
            Gets the number of elements actually contained in the FormattingRunList.
            </summary>
      <value>The number of elements actually contained in the FormattingRunList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.ArrayFormulaDictionary.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.ArrayFormulaDictionary" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.ArrayFormulaDictionary.#ctor(Bytescout.Spreadsheet.Generic.ArrayFormulaDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.ArrayFormulaDictionary" /> class that contains elements copied from the specified <see cref="T:Bytescout.Spreadsheet.Generic.ArrayFormulaDictionary" />.
            </summary>
      <param name="dictionary">The dictionary.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.ArrayFormulaDictionary.Add(System.String,Bytescout.Spreadsheet.Records.XlsBiffArray)">
      <summary>
            Adds the specified key and value to the dictionary.
            </summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.ArrayFormulaDictionary.ContainsKey(System.String)">
      <summary>
            Determines whether the <see cref="T:Bytescout.Spreadsheet.Generic.ArrayFormulaDictionary" /> contains the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:Bytescout.Spreadsheet.Generic.ArrayFormulaDictionary" />.</param>
      <returns>
        <c>true</c> if the <see cref="T:Bytescout.Spreadsheet.Generic.ArrayFormulaDictionary" /> contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.ArrayFormulaDictionary.Item(System.String)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffArray" /> associated with the specified key.
            </summary>
      <value>The key of the value to get </value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.TableFormulaDictionary.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.TableFormulaDictionary" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.TableFormulaDictionary.#ctor(Bytescout.Spreadsheet.Generic.TableFormulaDictionary)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.TableFormulaDictionary" /> class that contains elements copied from the specified <see cref="T:Bytescout.Spreadsheet.Generic.TableFormulaDictionary" />.
            </summary>
      <param name="dictionary">The dictionary.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.TableFormulaDictionary.Add(System.String,Bytescout.Spreadsheet.Records.XlsBiffTableop)">
      <summary>
            Adds the specified key and value to the dictionary.
            </summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.TableFormulaDictionary.ContainsKey(System.String)">
      <summary>
            Determines whether the <see cref="T:Bytescout.Spreadsheet.Generic.TableFormulaDictionary" /> contains the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:Bytescout.Spreadsheet.Generic.TableFormulaDictionary" />.</param>
      <returns>
        <c>true</c> if the <see cref="T:Bytescout.Spreadsheet.Generic.TableFormulaDictionary" /> contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.TableFormulaDictionary.Item(System.String)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffTableop" /> associated with the specified key.
            </summary>
      <value>The key of the value to get </value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.intList.Add(System.Int32)">
      <summary>
            Adds an <see cref="T:System.Int32" /> to the end of the intList.
            </summary>
      <param name="item">The <see cref="T:System.Int32" /> to be added to the end of the intList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.intList.IndexOf(System.Int32)">
      <summary>
            Searches for the specified <see cref="T:System.Int32" /> and returns the zero-based index of the first occurrence within the entire intList.
            </summary>
      <param name="item">The <see cref="T:System.Int32" /> to locate in the intList.</param>
      <returns>The zero-based index of the first occurrence of item within the entire intList, if found; otherwise, –1.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.intList.Remove(System.Int32)">
      <summary>
            Removes the first occurrence of a specific <see cref="T:System.Int32" /> from the <see cref="T:Bytescout.Spreadsheet.Generic.intList" />.
            </summary>
      <param name="item">The <see cref="T:System.Int32" /> to remove from the <see cref="T:Bytescout.Spreadsheet.Generic.intList" />.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.intList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:System.Int32" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.intList.Count">
      <summary>
            Gets the number of elements actually contained in the intList.
            </summary>
      <value>The number of elements actually contained in the intList.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.intList.Capacity">
      <summary>
            Gets or sets the number of elements that the intList can contain.
            </summary>
      <value>The number of elements that the intList can contain.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Generic.IPictures">
      <summary>
            IPictures interface
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.IPictures.Add(System.Int32,System.Int32,System.String)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="topRow">The top row.</param>
      <param name="leftColumn">The left column.</param>
      <param name="ImageFileName">The image filename.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.IPictures.Add(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="topRow">The top row.</param>
      <param name="leftColumn">The left column.</param>
      <param name="ImageFileName">The image filename.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.IPictures.AddAndFitInto(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="topRow">The top row.</param>
      <param name="leftColumn">The left column.</param>
      <param name="bottomRow">The bottom row.</param>
      <param name="rightColumn">The right column.</param>
      <param name="ImageFileName">The image.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.IPictures.Add(System.String,System.Int32,System.Int32)">
      <summary>
            Adds the specified image from filename. Returns PictureShape object.
            </summary>
      <param name="ImageFileName">The image filename.</param>
      <param name="left">The left in pixels.</param>
      <param name="top">The top in pixels.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.IPictures.Add(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="ImageFileName">The image filename.</param>
      <param name="left">The left in pixels.</param>
      <param name="top">The top in pixels.</param>
      <param name="width">The width in pixels.</param>
      <param name="height">The height in pixels.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.IPictures.Add(System.Double,System.Double,System.String)">
      <summary>
            Adds the specified left. Returns PictureShape object.
            </summary>
      <param name="left">The left in points.</param>
      <param name="top">The top in points.</param>
      <param name="ImageFileName">The image filename.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.IPictures.AddAndFitInto(System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="top">The top in points.</param>
      <param name="left">The left in points.</param>
      <param name="bottom">The bottom  in points.</param>
      <param name="right">The right in points.</param>
      <param name="ImageFileName">The image.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.IPictures.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.MSODrawing.PictureShape" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.IPictures.Count">
      <summary>
            Gets the number of elements actually contained in the PictureShapeList.
            </summary>
      <value>The number of elements actually contained in the PictureShapeList.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Generic.Pictures">
      <summary>
            Pictures
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.#ctor(Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Pictures collection to store pictures for the worksheet
            </summary>
      <param name="worksheet">parent Worksheet</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.Add(System.Int32,System.Int32,System.String)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="topRow">The top row.</param>
      <param name="leftColumn">The left column.</param>
      <param name="ImageFileName">The image filename.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.Add(System.Int32,System.Int32,System.Drawing.Image)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="topRow">The top row.</param>
      <param name="leftColumn">The left column.</param>
      <param name="image">The image.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.Add(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="topRow">The top row.</param>
      <param name="leftColumn">The left column.</param>
      <param name="ImageFileName">The image filename.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.Add(System.Int32,System.Int32,System.Drawing.Image,System.Int32,System.Int32)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="topRow">The top row.</param>
      <param name="leftColumn">The left column.</param>
      <param name="image">The image.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.AddAndFitInto(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="topRow">The top row.</param>
      <param name="leftColumn">The left column.</param>
      <param name="bottomRow">The bottom row.</param>
      <param name="rightColumn">The right column.</param>
      <param name="ImageFileName">The image.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.AddAndFitInto(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Image)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="topRow">The top row.</param>
      <param name="leftColumn">The left column.</param>
      <param name="bottomRow">The bottom row.</param>
      <param name="rightColumn">The right column.</param>
      <param name="image">The image.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.Add(System.String,System.Int32,System.Int32)">
      <summary>
            Adds the specified image from filename. Returns PictureShape object.
            </summary>
      <param name="ImageFileName">The image filename.</param>
      <param name="left">The left in pixels.</param>
      <param name="top">The top in pixels.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.Add(System.Drawing.Image,System.Int32,System.Int32)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="image">The image.</param>
      <param name="left">The left in pixels.</param>
      <param name="top">The top in pixels.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.Add(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="ImageFileName">The image filename.</param>
      <param name="left">The left in pixels.</param>
      <param name="top">The top in pixels.</param>
      <param name="width">The width in pixels.</param>
      <param name="height">The height in pixels.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.Add(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="image">The image in pixels.</param>
      <param name="left">The left in pixels.</param>
      <param name="top">The top in pixels.</param>
      <param name="width">The width in pixels.</param>
      <param name="height">The height in pixels.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.Add(System.Double,System.Double,System.String)">
      <summary>
            Adds the specified left. Returns PictureShape object.
            </summary>
      <param name="left">The left in points.</param>
      <param name="top">The top in points.</param>
      <param name="ImageFileName">The image filename.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.Add(System.Double,System.Double,System.Drawing.Image)">
      <summary>
            Adds the specified left. Returns PictureShape object.
            </summary>
      <param name="left">The left in points.</param>
      <param name="top">The top in points.</param>
      <param name="image">The image.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.AddAndFitInto(System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="top">The top in points.</param>
      <param name="left">The left in points.</param>
      <param name="bottom">The bottom  in points.</param>
      <param name="right">The right in points.</param>
      <param name="ImageFileName">The image.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.AddAndFitInto(System.Drawing.Image,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="top">The top in points.</param>
      <param name="left">The left in points.</param>
      <param name="bottom">The bottom in points.</param>
      <param name="right">The right in points.</param>
      <param name="image">The image.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.Pictures.Add(System.Drawing.Image)">
      <summary>
            Adds the specified image. Returns PictureShape object.
            </summary>
      <param name="image">The image.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.Pictures.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.MSODrawing.PictureShape" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.Pictures.Count">
      <summary>
            Gets the number of elements actually contained in the PictureShapeList.
            </summary>
      <value>The number of elements actually contained in the PictureShapeList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.RowList.Add(Bytescout.Spreadsheet.Row)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Row" /> to the end of the RowList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Row" /> to be added to the end of the RowList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.RowList.AddUnique(Bytescout.Spreadsheet.Row)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Row" /> to the end of the RowList, if item is not there in list.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Row" /> to be added to the end of the RowList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.RowList.Insert(System.Int32,Bytescout.Spreadsheet.Row)">
      <summary>
            Inserts an <see cref="T:Bytescout.Spreadsheet.Row" /> into the <see cref="T:Bytescout.Spreadsheet.Generic.RowList" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Bytescout.Spreadsheet.Row" /> should be inserted.</param>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Row" /> to insert.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.RowList.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:Bytescout.Spreadsheet.Generic.RowList" />. 
            </summary>
      <param name="index">The The zero-based index of the element to remove.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.RowList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.Row" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.RowList.Count">
      <summary>
            Gets the number of elements actually contained in the RowList.
            </summary>
      <value>The number of elements actually contained in the RowList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.ShapePropertiesList.Add(Bytescout.Spreadsheet.MSODrawing.ShapeProperties)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.MSODrawing.ShapeProperties" /> to the end of the ShapePropertiesList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.MSODrawing.ShapeProperties" /> to be added to the end of the ShapePropertiesList.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.ShapePropertiesList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.MSODrawing.ShapeProperties" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.ShapePropertiesList.Count">
      <summary>
            Gets the number of elements actually contained in the ShapePropertiesList.
            </summary>
      <value>The number of elements actually contained in the ShapePropertiesList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.SpreadsheetFontList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.SpreadsheetFontList.IndexOf(Bytescout.Spreadsheet.SpreadsheetFont)">
      <summary>
            Searches for the specified SpreadsheetFont and returns the zero-based 
            index of the first occurrence within the entire list.
            </summary>
      <param name="value">The SpreadsheetFont to locate in the list. 
            The value can be null.</param>
      <returns>The zero-based index of the first occurrence of value 
            within the entire list, if found; otherwise, -1.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.SpreadsheetFontList.Add(Bytescout.Spreadsheet.SpreadsheetFont)">
      <summary>
            Adds a SpreadsheetFont object to the end of the list.
            </summary>
      <param name="value">The SpreadsheetFont object to be added to the end 
            of the list. The value can be null.</param>
      <returns>The index at which the value has been added.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.SpreadsheetFontList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.Generic.SpreadsheetFontList" />.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.SpreadsheetFontList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> at the specified index.
            </summary>
      <value>The <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> at the specified index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.SpreadsheetFontList.Count">
      <summary>
            Gets the number of elements actually contained in the <see cref="T:Bytescout.Spreadsheet.Generic.SpreadsheetFontList" />.
            </summary>
      <value>The number of elements actually contained in the SpreadsheetFontList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.SpreadsheetFontStack.Push(Bytescout.Spreadsheet.SpreadsheetFont)">
      <summary>
            Inserts an <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> at the top of the SpreadsheetFontStack.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> to push onto the <see cref="T:Bytescout.Spreadsheet.Generic.SpreadsheetFontStack" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.SpreadsheetFontStack.Peek">
      <summary>
            Returns the <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> at the top of the <see cref="T:Bytescout.Spreadsheet.Generic.SpreadsheetFontStack" /> without removing it.
            </summary>
      <returns>The <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> at the top of the SpreadsheetFontStack.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.SpreadsheetFontStack.Pop">
      <summary>
            Removes and returns the <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> at the top of the <see cref="T:Bytescout.Spreadsheet.Generic.SpreadsheetFontStack" />.
            </summary>
      <returns>The <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> removed from the top of the SpreadsheetFontStack</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.SpreadsheetFontStack.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:Bytescout.Spreadsheet.Generic.SpreadsheetFontStack" />.
            </summary>
      <value>The number of elements contained in the SpreadsheetFontStack.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.StrigByteArrayDictionary.Add(System.String,System.Byte[])">
      <summary>
            Adds the specified key and value to the dictionary.
            </summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.StrigByteArrayDictionary.ContainsKey(System.String)">
      <summary>
            Determines whether the <see cref="T:Bytescout.Spreadsheet.Generic.StrigByteArrayDictionary" /> contains the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:Bytescout.Spreadsheet.Generic.StrigByteArrayDictionary" />.</param>
      <returns>
        <c>true</c> if the <see cref="T:Bytescout.Spreadsheet.Generic.StrigByteArrayDictionary" /> contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.StrigByteArrayDictionary.Item(System.String)">
      <summary>
            Gets the byte array with the specified key.
            </summary>
      <value>array of bytes</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.stringList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.stringList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.stringList.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.stringList" /> class that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.stringList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.stringList.Reverse">
      <summary>
            Reverses the order of the elements in the entire stringList.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.stringList.Add(System.String)">
      <summary>
            Adds an <see cref="T:System.String" /> to the end of the stringList.
            </summary>
      <param name="item">The <see cref="T:System.String" /> to be added to the end of the stringList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.stringList.IndexOf(System.String)">
      <summary>
            Searches for the specified string and returns the zero-based index of the first occurrence within the entire stringList.
            </summary>
      <param name="value">The string to locate in the stringList.</param>
      <returns>The zero-based index of the first occurrence of value within the entire stringList, if found; otherwise, -1.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.stringList.ToArray">
      <summary>
            Copies the elements of the list to a new string array.
            </summary>
      <returns>A string array containing copies of the elements of the list.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.stringList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.Generic.stringList" />.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.stringList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:System.String" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.stringList.Count">
      <summary>
            Gets the number of elements actually contained in the stringList.
            </summary>
      <value>The number of elements actually contained in the stringList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.tokenList.Add(Bytescout.Spreadsheet.Formula.Token)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Formula.Token" /> to the end of the TokenList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Formula.Token" /> to be added to the end of the TokenList.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.tokenList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.Formula.Token" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.tokenList.Count">
      <summary>
            Gets the number of elements actually contained in the TokenList.
            </summary>
      <value>The number of elements actually contained in the TokenList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.TokenOperatorStack.Push(Bytescout.Spreadsheet.Formula.TokenOperator)">
      <summary>
            Inserts an <see cref="T:Bytescout.Spreadsheet.Formula.TokenOperator" /> at the top of the TokenOperatorStack.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Formula.TokenOperator" /> to push onto the <see cref="T:Bytescout.Spreadsheet.Generic.TokenOperatorStack" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.TokenOperatorStack.Peek">
      <summary>
            Returns the <see cref="T:Bytescout.Spreadsheet.Formula.TokenOperator" /> at the top of the <see cref="T:Bytescout.Spreadsheet.Generic.TokenOperatorStack" /> without removing it.
            </summary>
      <returns>The <see cref="T:Bytescout.Spreadsheet.Formula.TokenOperator" /> at the top of the TokenOperatorStack.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.TokenOperatorStack.Pop">
      <summary>
            Removes and returns the <see cref="T:Bytescout.Spreadsheet.Formula.TokenOperator" /> at the top of the <see cref="T:Bytescout.Spreadsheet.Generic.TokenOperatorStack" />.
            </summary>
      <returns>The <see cref="T:Bytescout.Spreadsheet.Formula.TokenOperator" /> removed from the top of the TokenOperatorStack</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.TokenOperatorStack.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:Bytescout.Spreadsheet.Generic.TokenOperatorStack" />.
            </summary>
      <value>The number of elements contained in the TokenOperatorStack.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.uintList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.uintList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.uintList.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.uintList" /> class that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.uintList.Add(System.UInt32)">
      <summary>
            Adds an <see cref="T:System.UInt32" /> to the end of the uintList.
            </summary>
      <param name="item">The <see cref="T:System.UInt32" /> to be added to the end of the uintList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.uintList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.Generic.uintList" />.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.uintList.ToArray">
      <summary>
            Copies the elements of the <see cref="T:Bytescout.Spreadsheet.Generic.uintList" /> to a new array.
            </summary>
      <returns>An array containing copies of the elements of the byteList</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.uintList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:System.UInt32" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.uintList.Capacity">
      <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
      <value>The number of elements that the <see cref="T:Bytescout.Spreadsheet.Generic.uintList" /> can contain before resizing is required.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.uintList.Count">
      <summary>
            Gets the number of elements actually contained in the uintList.
            </summary>
      <value>The number of elements actually contained in the uintList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.ushortList.IndexOf(System.UInt16)">
      <summary>
            Searches for the specified ushort and returns the zero-based 
            index of the first occurrence within the entire list.
            </summary>
      <param name="value">The ushort to locate in the list. 
            The value can be null.</param>
      <returns>The zero-based index of the first occurrence of value 
            within the entire list, if found; otherwise, -1.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.ushortList.Add(System.UInt16)">
      <summary>
            Adds an <see cref="T:System.UInt16" /> to the end of the ushortList.
            </summary>
      <param name="item">The <see cref="T:System.UInt16" /> to be added to the end of the ushortList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.ushortList.ToArray">
      <summary>
            Copies the elements of the <see cref="T:Bytescout.Spreadsheet.Generic.ushortList" /> to a new array.
            </summary>
      <returns>An array containing copies of the elements of the ushortList</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.ushortList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:System.UInt16" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.ushortList.Count">
      <summary>
            Gets the number of elements actually contained in the ushortList.
            </summary>
      <value>The number of elements actually contained in the ushortList.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.ushortList.Capacity">
      <summary>
            Gets or sets the number of elements that the ushortList can contain.
            </summary>
      <value>The number of elements that the ushortList can contain.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.WorksheetList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.WorksheetList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.WorksheetList.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.WorksheetList" /> class that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.WorksheetList.#ctor(Bytescout.Spreadsheet.Worksheet[])">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.WorksheetList" /> class that contains elements copied from the specified array and has sufficient capacity to accommodate the number of elements copied.
            </summary>
      <param name="array">The array with worksheets whose elements are copied to the new list.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.WorksheetList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.WorksheetList.Add(Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Worksheet" /> to the end of the WorksheetList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Worksheet" /> to be added to the end of the WorksheetList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.WorksheetList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.Generic.WorksheetList" />.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.WorksheetList.Contains(Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Determines whether an <see cref="T:Bytescout.Spreadsheet.Worksheet" /> is in the WorksheetList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Worksheet" /> to locate in the <see cref="T:Bytescout.Spreadsheet.Generic.WorksheetList" />.</param>
      <returns>
        <c>true</c> if item is found in the WorksheetList; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.WorksheetList.Insert(System.Int32,Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Inserts an <see cref="T:Bytescout.Spreadsheet.Worksheet" /> into the <see cref="T:Bytescout.Spreadsheet.Generic.WorksheetList" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Bytescout.Spreadsheet.Worksheet" /> should be inserted.</param>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Worksheet" /> to insert.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.WorksheetList.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:Bytescout.Spreadsheet.Generic.WorksheetList" />. 
            </summary>
      <param name="index">The The zero-based index of the element to remove.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.WorksheetList.ToArray">
      <summary>
            Copies the elements of the <see cref="T:Bytescout.Spreadsheet.Generic.WorksheetList" /> to a new array.
            </summary>
      <returns>An array containing copies of the elements of the WorksheetList</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.WorksheetList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Worksheet" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.WorksheetList.Count">
      <summary>
            Gets the number of elements actually contained in the WorksheetList.
            </summary>
      <value>The number of elements actually contained in the WorksheetList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.XlsBiffCRNList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.XlsBiffCRNList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.XlsBiffCRNList.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.XlsBiffCRNList" /> class that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.XlsBiffCRNList.Add(Bytescout.Spreadsheet.Records.XlsBiffCRN)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffCRN" /> to the end of the XlsBiffCRNList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffCRN" /> to be added to the end of the XlsBiffCRNList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.XlsBiffCRNList.Insert(System.Int32,Bytescout.Spreadsheet.Records.XlsBiffCRN)">
      <summary>
            Inserts an <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffCRN" /> into the <see cref="T:Bytescout.Spreadsheet.Generic.XlsBiffCRNList" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffCRN" /> should be inserted.</param>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffCRN" /> to insert.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.XlsBiffCRNList.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:Bytescout.Spreadsheet.Generic.XlsBiffCRNList" />. 
            </summary>
      <param name="index">The zero-based index of the element to remove.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.XlsBiffCRNList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffCRN" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.XlsBiffCRNList.Count">
      <summary>
            Gets the number of elements actually contained in the XlsBiffCRNList.
            </summary>
      <value>The number of elements actually contained in the XlsBiffCRNList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.XlsBiffExternNameList.Add(Bytescout.Spreadsheet.Records.XlsBiffExternName)">
      <summary>
            Adds an item of <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffExternName" /> to the end of the XlsBiffExternNameList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffExternName" /> to be added to the end of the XlsBiffExternNameList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.XlsBiffExternNameList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.Generic.XlsBiffExternNameList" />.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.XlsBiffExternNameList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffExternName" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.XlsBiffExternNameList.Capacity">
      <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
      <value>The number of elements that the <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffExternName" /> can contain before resizing is required.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.XlsBiffExternNameList.Count">
      <summary>
            Gets the number of elements actually contained in the XlsBiffExternNameList.
            </summary>
      <value>The number of elements actually contained in the XlsBiffExternNameList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.XlsFormattedUnicodeStringList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.XlsFormattedUnicodeStringList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.XlsFormattedUnicodeStringList.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Generic.XlsFormattedUnicodeStringList" /> class that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.XlsFormattedUnicodeStringList.Add(Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString" /> to the end of the XlsFormattedUnicodeStringList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString" /> to be added to the end of the XlsFormattedUnicodeStringList.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.XlsFormattedUnicodeStringList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.XlsFormattedUnicodeStringList.Count">
      <summary>
            Gets the number of elements actually contained in the XlsFormattedUnicodeStringList.
            </summary>
      <value>The number of elements actually contained in the XlsFormattedUnicodeStringList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.XLSImageList.Add(System.Drawing.Image)">
      <summary>
            Adds an <see cref="T:System.Drawing.Image" /> to the end of the ImageList.
            </summary>
      <param name="item">The <see cref="T:System.Drawing.Image" /> to be added to the end of the ImageList.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.XLSImageList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:System.Drawing.Image" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.XLSImageList.Count">
      <summary>
            Gets the number of elements actually contained in the ImageList.
            </summary>
      <value>The number of elements actually contained in the ImageList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.XlsUnicodeStringList.IndexOfKey(Bytescout.Spreadsheet.Records.XlsUnicodeString)">
      <summary>
            Indexes the of key.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Generic.XlsUnicodeStringList.IndexOfValue(Bytescout.Spreadsheet.Records.XlsUnicodeString)">
      <summary>
            Returns the zero-based index of the first occurrence of the 
            specified value.
            </summary>
      <param name="value">The value to locate. The value can be null.</param>
      <returns>The zero-based index of the first occurrence of the 
            value parameter, if value is found; otherwise, -1.</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.XlsUnicodeStringList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Records.XlsUnicodeString" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Generic.XlsUnicodeStringList.Count">
      <summary>
            Gets the number of elements actually contained in the XlsUnicodeStringList.
            </summary>
      <value>The number of elements actually contained in the XlsUnicodeStringList.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.HTMLTemplate">
      <summary>
            HTML Template
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.HTMLTemplate.SaveHTML(Bytescout.Spreadsheet.Worksheet,System.IO.StreamWriter)">
      <summary>
            Saves the HTML.
            </summary>
      <param name="sheet">The sheet.</param>
      <param name="file">The file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.HTMLTemplate.SaveAsHTML(Bytescout.Spreadsheet.Worksheet,System.IO.Stream)">
      <summary>
            Saves as HTML.
            </summary>
      <param name="sheet">The sheet.</param>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.HTMLTemplate.SaveAsHTML(Bytescout.Spreadsheet.Worksheet,System.String)">
      <summary>
            Saves as HTML.
            </summary>
      <param name="sheet">The sheet.</param>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.HTMLTemplate.TableHeader">
      <summary>
            Gets or sets the table header.
            </summary>
      <value>The table header.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.HTMLTemplate.CellHeader">
      <summary>
            Gets or sets the cell header.
            </summary>
      <value>The cell header.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.HyperLink">
      <summary>
            Represents a hyperlink
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.HyperLink.#ctor(Bytescout.Spreadsheet.Structures.CellsRange,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.HyperLink" /> class.
            </summary>
      <param name="Range">The cells range.</param>
      <param name="Address">The hyperlink address.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.HyperLink.#ctor(Bytescout.Spreadsheet.Structures.CellsRange,System.String,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.HyperLink" /> class.
            </summary>
      <param name="Range">The cells range.</param>
      <param name="Address">The hyperlink address.</param>
      <param name="SubAddress">The sub address.</param>
      <param name="ScreenTip">The screen tip.</param>
      <param name="TextToDisplay">The text to display.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.HyperLink.Address">
      <summary>
            Gets or sets the address of this hyperlink.
            </summary>
      <value>The address.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.HyperLink.Range">
      <summary>
            Gets the range which this hyperlink is attached to.
            </summary>
      <value>The range.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.HyperLink.ScreenTip">
      <summary>
            Gets or sets the ScreenTip text for the specified hyperlink.
            </summary>
      <value>The screen tip.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.HyperLink.SubAddress">
      <summary>
            Gets or sets the the location within the document associated with the hyperlink.
            </summary>
      <value>The sub address.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.HyperLink.TextToDisplay">
      <summary>
            Gets or sets the text to be displayed for the specified hyperlink. The default value is the address of the hyperlink.
            <value>The text to display.</value></summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.HyperLinks">
      <summary>
            Hyperlinks 
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.HyperLinks.#ctor(Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.HyperLinks" /> class.
            </summary>
      <param name="Worksheet">The worksheet.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.HyperLinks.Add(Bytescout.Spreadsheet.HyperLink)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.HyperLink" /> to the end of the HyperLinks.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.HyperLink" /> to be added to the end of the HyperLinks.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.HyperLinks.Add(Bytescout.Spreadsheet.Structures.CellsRange,System.String,System.String,System.String,System.String)">
      <summary>
            Adds the hyperlink.
            </summary>
      <param name="Anchor">The cells range.</param>
      <param name="Address">The hyperlink address.</param>
      <param name="SubAddress">The sub address.</param>
      <param name="ScreenTip">The screen tip.</param>
      <param name="TextToDisplay">The text to display.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.HyperLinks.RemoveAt(System.Int32)">
      <summary>
            Removes the element at the specified index of the <see cref="T:Bytescout.Spreadsheet.HyperLink" />. 
            </summary>
      <param name="index">The The zero-based index of the element to remove.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.HyperLinks.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.HyperLink" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.HyperLinks.Count">
      <summary>
            Gets the number of elements actually contained in the HyperLinks.
            </summary>
      <value>The number of elements actually contained in the HyperLinks.</value>
    </member>
    <member name="T:Bytescout.MSCompoundFile.CompoundFileHeader">
      <summary>
            Represents compound file file header
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.CompoundFileHeader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.CompoundFileHeader" /> class.
            </summary>
      <param name="stream">The compound file.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.CompoundFileHeader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.CompoundFileHeader" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.CompoundFileHeader.GetSignature">
      <summary>
            Returns file signature
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.CompoundFileHeader.ClassId">
      <summary>
            Returns header CLSID
            Typically filled with zeroes
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.CompoundFileHeader.MinorVersion">
      <summary>
            Minor Version
            Must be 0x003E for Excell
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.CompoundFileHeader.MajorVersion">
      <summary>
            Major Version
            Must be 0x0003 for Excell
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.CompoundFileHeader.ByteOrder">
      <summary>
            Returns byte order
            Must be 0xFFFE
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.CompoundFileHeader.SectorSize">
      <summary>
            Sector Shift
            Typically 512
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.CompoundFileHeader.MiniSectorSize">
      <summary>
            Mini Sector Shift
            Typically 64
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.CompoundFileHeader.FatSectorCount">
      <summary>
            Number of FAT sectors
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.CompoundFileHeader.RootDirectoryEntryStart">
      <summary>
            Number of first Root Directory Entry (Property Set Storage, FAT Directory) sector
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.CompoundFileHeader.MiniStreamCutoff">
      <summary>
            Maximum size for small stream, typically 4096 bytes
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.CompoundFileHeader.MiniFatFirstSector">
      <summary>
            First sector of Mini FAT, FAT_EndOfChain if there's no one
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.CompoundFileHeader.MiniFatSectorCount">
      <summary>
            Number of sectors in Mini FAT, 0 if there's no one
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.CompoundFileHeader.DifFirstSector">
      <summary>
            First sector of DIF, FAT_EndOfChain if there's no one
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.CompoundFileHeader.DifSectorCount">
      <summary>
            Number of sectors in DIF, 0 if there's no one
            </summary>
    </member>
    <member name="T:Bytescout.MSCompoundFile.DirectoryEntry">
      <summary>
            Represents single Root Directory record
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.DirectoryEntry.Length">
      <summary>
            Length of structure in bytes
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.DirectoryEntry.#ctor(System.Byte[],System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.DirectoryEntry" /> class.
            </summary>
      <param name="bytes">byte array representing current object.</param>
      <param name="offset">The offset.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.DirectoryEntry.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.DirectoryEntry" /> class.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.EntryName">
      <summary>
            Name of directory entry
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.EntryLength">
      <summary>
            Returns size in bytes of entry's name (with terminating zero)
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.EntryType">
      <summary>
            Entry type
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.EntryColor">
      <summary>
            Entry "color" in directory tree
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.LeftSiblingSid">
      <summary>
            SID of left sibling
            </summary>
      <remarks>0xFFFFFFFF if there's no one</remarks>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.LeftSibling">
      <summary>
            Returns left sibling
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.RightSiblingSid">
      <summary>
            SID of right sibling
            </summary>
      <remarks>0xFFFFFFFF if there's no one</remarks>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.RightSibling">
      <summary>
            Returns right sibling
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.ChildSid">
      <summary>
            SID of first child (if EntryType is STGTY_STORAGE)
            </summary>
      <remarks>0xFFFFFFFF if there's no one</remarks>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.Child">
      <summary>
            Returns child
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.ClassId">
      <summary>
            CLSID of container (if EntryType is STGTY_STORAGE)
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.UserFlags">
      <summary>
            User flags of container (if EntryType is STGTY_STORAGE)
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.CreationTime">
      <summary>
            Creation time of entry
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.LastWriteTime">
      <summary>
            Returns last modification time of entry
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.StreamFirstSector">
      <summary>
            First sector of data stream (if EntryType is STGTY_STREAM)
            </summary>
      <remarks>if EntryType is STGTY_ROOT, this can be first sector of MiniStream</remarks>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.StreamSize">
      <summary>
            Size of data stream (if EntryType is STGTY_STREAM)
            </summary>
      <remarks>if EntryType is STGTY_ROOT, this can be size of MiniStream</remarks>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DirectoryEntry.PropType">
      <summary>
            Reserved, must be 0
            </summary>
    </member>
    <member name="T:Bytescout.MSCompoundFile.VtHeadingPair">
      <summary>
            Heading Pair struct
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.VtHeadingPair.headingString">
      <summary>
            heading String
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.VtHeadingPair.headerParts">
      <summary>
            Header parts
            </summary>
    </member>
    <member name="T:Bytescout.MSCompoundFile.DocumentSummaryInformation">
      <summary>
            Structure describing SummaryInformation Property Set
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Codepage">
      <summary>
            Codepage for text
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Category">
      <summary>
            Category name for the document
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Presformat">
      <summary>
            Presentation format type of the document
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Bytecount">
      <summary>
            An estimate of the size of the document in bytes. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Linecount">
      <summary>
            An estimate of the number of text lines in the document. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Paracount">
      <summary>
            An estimate or an exact count of the number of paragraphs in the document. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Slidecount">
      <summary>
            Specifies the number of slides in the document. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Notecount">
      <summary>
            Specifies the number of notes in the document. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Hiddencount">
      <summary>
            Specifies the number of hidden slides in the document. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Mmclipcount">
      <summary>
            Specifies the number of multimedia clips in the document. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Scale">
      <summary>
            The value of the property must be FALSE.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Headingpair">
      <summary>
            heading pair
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Docparts">
      <summary>
            docparts
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Manager">
      <summary>
            specifies the manager associated with the document.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Company">
      <summary>
            Specifies the company associated with the document‘s authoring.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Linksdirty">
      <summary>
            Links dirty
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Cchwithspaces">
      <summary>
            Specifies an estimate of the number of characters in the document including whitespace. May be ignored.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Shareddoc">
      <summary>
            The property value MUST be FALSE (0x00000000).
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Hyperlinkschanged">
      <summary>
            hyperlinks changed
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Version">
      <summary>
            Specifies the version of the application that wrote the property set storage.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Contenttype">
      <summary>
            Specifies the content type of the file. May be absent.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Contentstatus">
      <summary>
            specifies the document status. May be absent.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Language">
      <summary>
            Should be absent.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.DocumentSummaryInformation.Docversion">
      <summary>
            Should be absent.
            </summary>
    </member>
    <member name="T:Bytescout.MSCompoundFile.DocumentSummaryInformationStream">
      <summary>
            DocumentSummaryInformation Property Set stream
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.PropertySetStream.#ctor(System.IO.Stream,Bytescout.MSCompoundFile.AFat,System.UInt32,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.PropertySetStream" /> class.
            </summary>
      <param name="FileStream">Compound file stream.</param>
      <param name="FAT">Compound file FAT.</param>
      <param name="SectorSize">Sector Size of FAT.</param>
      <param name="StartSector">First Sector of Storage stream.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.PropertySetStream.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.PropertySetStream" /> class.
            </summary>
      <param name="bytes">The bytes.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.DocumentSummaryInformationStream.#ctor(System.IO.Stream,Bytescout.MSCompoundFile.AFat,System.UInt32,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.DocumentSummaryInformationStream" /> class.
            </summary>
      <param name="FileStream">Compound file stream.</param>
      <param name="FAT">Compound file FAT.</param>
      <param name="SectorSize">Sector Size of FAT.</param>
      <param name="StartSector">First Sector of Storage stream.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.DocumentSummaryInformationStream.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.DocumentSummaryInformationStream" /> class.
            </summary>
      <param name="bytes">The bytes.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.DocumentSummaryInformationStream.#ctor(Bytescout.MSCompoundFile.DocumentSummaryInformation)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.DocumentSummaryInformationStream" /> class.
            </summary>
      <param name="dsi">The DocumentSummaryInformation structure.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.DocumentSummaryInformationStream.Property">
      <summary>
            Reads properties this instance.
            </summary>
      <returns>Structure with DocumentSummaryInformation Property Set</returns>
    </member>
    <member name="M:Bytescout.MSCompoundFile.DocumentSummaryInformationStream.GetStream(Bytescout.MSCompoundFile.DocumentSummaryInformation)">
      <summary>
            Builds and gets the SummaryInformation Property Set stream.
            </summary>
      <param name="dsi">The structure with SummaryInformation Property Set.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Bytescout.MSCompoundFile.EncryptedPackage">
      <summary>
            The EncryptedPackage stream is an encrypted stream of bytes containing the entire [ECMA-376] source file in compressed form.
            
            Please take a look at:
                MS-OFFCRYPTO, 2.3.4.4
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.EncryptedPackage.#ctor(System.IO.Stream,Bytescout.MSCompoundFile.AFat,System.UInt32,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.EncryptedPackage" /> class.
            </summary>
      <param name="FileStream">Compound file stream.</param>
      <param name="FAT">Compound file FAT.</param>
      <param name="SectorSize">Sector Size of FAT.</param>
      <param name="StartSector">First Sector of Storage stream.</param>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptedPackage.StreamSize">
      <summary>
            Gets the the number of bytes used by data encrypted within the EncryptedData field.
            </summary>
      <value>The number of bytes used by data encrypted within the EncryptedData field.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptedPackage.EncryptedData">
      <summary>
            Gets the data encrypted using the algorithm specified within the <see cref="T:Bytescout.MSCompoundFile.EncryptionInfo" /> stream.
            </summary>
      <value>The encrypted data.</value>
    </member>
    <member name="T:Bytescout.MSCompoundFile.Version">
      <summary>
            The version structure specifies the version of a product or feature
            
            Please take a look at:
                MS-OFFCRYPTO, 2.1.4
            </summary>
    </member>
    <member name="T:Bytescout.MSCompoundFile.EncryptionHeaderFlags">
      <summary>
            The EncryptionHeaderFlags structure specifies properties of the encryption algorithm used.
            
            Please take a look at:
                MS-OFFCRYPTO, 2.3.1
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.EncryptionHeaderFlags.fCryptoAPI">
      <summary>
            A flag that specifies whether CryptoAPI RC4 or [ECMA-376] encryption is used.
            MUST be 1 unless fExternal is 1. If fExternal is 1, MUST be 0.
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.EncryptionHeaderFlags.fDocProps">
      <summary>
            MUST be 0 if document properties are encrypted.
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.EncryptionHeaderFlags.fExternal">
      <summary>
            If extensible encryption is used, MUST be 1.
            If this field is 1, all other fields in this structure MUST be 0.
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.EncryptionHeaderFlags.fAES">
      <summary>
            If the protected content is an [ECMA-376] document, MUST be 1.
            If the fAES bit is 1, the fCryptoAPI bit MUST also be 1.
            </summary>
    </member>
    <member name="T:Bytescout.MSCompoundFile.EncryptionInfo">
      <summary>
            The EncryptionInfo stream contains detailed information used to initialize the cryptography used to encrypt the <see cref="T:Bytescout.MSCompoundFile.EncryptedPackage" /> stream
            
            Please take a look at:
                MS-OFFCRYPTO, 2.3.4.5
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.EncryptionInfo.#ctor(System.IO.Stream,Bytescout.MSCompoundFile.AFat,System.UInt32,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.EncryptionInfo" /> class.
            </summary>
      <param name="FileStream">Compound file stream.</param>
      <param name="FAT">Compound file FAT.</param>
      <param name="SectorSize">Sector Size of FAT.</param>
      <param name="StartSector">First Sector of Storage stream.</param>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionInfo.EncryptionVersionInfo">
      <summary>
            Gets the <see cref="T:Bytescout.MSCompoundFile.Version" /> structure defines version <see cref="T:Bytescout.MSCompoundFile.EncryptionInfo" /> Stream
            
            Version.vMajor = 0x0003 or 0x0004 , and Version.vMinor = 0x0002 =&gt; Standard Encryption.
            Version.vMajor = 0x0003 or 0x0004 , and Version.vMinor = 0x0003 =&gt; Extensible Encryption.
            Version.vMajor = 0x0004 , and Version.vMinor = 0x0004 =&gt; Agile Encryption.
            </summary>
      <value>The <see cref="T:Bytescout.MSCompoundFile.EncryptionInfo" /> Stream version info.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionInfo.EncryptionHeaderFlags">
      <summary>
            Gets the copy of the Flags stored in the EncryptionHeader field of this structure.
            </summary>
      <value>The encryption header flags.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionInfo.EncryptionHeaderSize">
      <summary>
            Gets the size in bytes of the EncryptionHeader field of this structure.
            </summary>
      <value>The size in bytes of the EncryptionHeader field of this structure.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionInfo.EncryptionHeader">
      <summary>
            Gets the encryption header.
            </summary>
      <value>The encryption header.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionInfo.EncryptionVerifier">
      <summary>
            Gets the encryption verifier.
            </summary>
      <value>The encryption verifier.</value>
    </member>
    <member name="T:Bytescout.MSCompoundFile.EncryptionHeader">
      <summary>
            The EncryptionHeader structure specify encryption properties for an encrypted stream.
            
            Please take a look at:
                MS-OFFCRYPTO, 2.3.2
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.EncryptionHeader.#ctor(System.Byte[],System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.EncryptionHeader" /> class.
            </summary>
      <param name="bytes">The bytes.</param>
      <param name="offset">The offset.</param>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionHeader.EncryptionHeaderFlags">
      <summary>
            Gets the <see cref="P:Bytescout.MSCompoundFile.EncryptionHeader.EncryptionHeaderFlags" /> structure that specifies properties of the encryption algorithm used.
            </summary>
      <value>
        <see cref="P:Bytescout.MSCompoundFile.EncryptionHeader.EncryptionHeaderFlags" />.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionHeader.AlgID">
      <summary>
            Gets the value that specifies the encryption algorithm.
            </summary>
      <value>The <see cref="T:Bytescout.MSCompoundFile.AlgorithmID" />.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionHeader.AlgIDHash">
      <summary>
            Gets the value that specifies the hashing algorithm.
            </summary>
      <value>The <see cref="T:Bytescout.MSCompoundFile.HashAlgorithmID" />.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionHeader.KeySize">
      <summary>
            Gets the value that specifies the number of bits in the encryption key. MUST be a multiple of 8.
            </summary>
      <value>The size of the encryption key.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionHeader.ProviderType">
      <summary>
            Gets the value which corresponds to constants accepted by the specified cryptographic service provider (CSP).
            </summary>
      <value>The type of the CSP.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionHeader.CSPName">
      <summary>
            Gets the string that specifies the cryptographic service provider (CSP) name.
            </summary>
      <value>The name of the CSP.</value>
    </member>
    <member name="T:Bytescout.MSCompoundFile.EncryptionVerifier">
      <summary>
            
            
            Please take a look at:
                MS-OFFCRYPTO, 2.3.3
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionVerifier.SaltSize">
      <summary>
            Gets the size of the Salt field. MUST be 0x00000010.
            </summary>
      <value>The size of the Salt field.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionVerifier.Salt">
      <summary>
            Gets the array of bytes that specifies the salt value used during password hash generation.
            </summary>
      <value>The array of bytes that specifies the salt value.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionVerifier.VerifierHashSize">
      <summary>
            Gets the value that specifies the number of bytes needed to contain the hash of the data used to generate the EncryptedVerifier field.
            </summary>
      <value>The size of the verifier hash.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.EncryptionVerifier.EncryptedVerifierHash">
      <summary>
            Gets the array of bytes that contains the encrypted form of the hash of the randomly generated Verifier value.
            </summary>
      <value>The encrypted verifier hash.</value>
    </member>
    <member name="T:Bytescout.MSCompoundFile.FAT">
      <summary>
            Represents compound file FAT table
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.FAT.#ctor(System.IO.Stream,Bytescout.MSCompoundFile.CompoundFileHeader)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.FAT" /> class.
            </summary>
      <param name="file">The compound file.</param>
      <param name="header">The file header.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.FAT.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.FAT" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.FAT.GetNextSector(System.UInt32)">
      <summary>
            Returns next data sector using FAT
            </summary>
      <param name="sector">Current data sector</param>
      <returns>Next data sector</returns>
    </member>
    <member name="P:Bytescout.MSCompoundFile.FAT.SectorsForFat">
      <summary>
            Resurns number of sectors used by FAT itself
            </summary>
    </member>
    <member name="T:Bytescout.MSCompoundFile.MiniFAT">
      <summary>
            Represents compound file mini FAT table
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.MiniFAT.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.MiniFAT" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.MiniFAT.#ctor(Bytescout.MSCompoundFile.StorageStream)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.MiniFAT" /> class.
            </summary>
      <param name="sectors">The sectors.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.MiniFAT.GetNextSector(System.UInt32)">
      <summary>
            Returns next data sector using miniFAT
            </summary>
      <param name="sector">Current data sector</param>
      <returns>Next data sector</returns>
    </member>
    <member name="M:Bytescout.MSCompoundFile.MiniFAT.FatSectorsCount">
      <summary>
            Returns number of sectors described by miniFAT
            </summary>
    </member>
    <member name="T:Bytescout.MSCompoundFile.AlgorithmID">
      <summary>
            Algorithm type
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.AlgorithmID.ByFlags">
      <summary>
            (0) By Flags
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.AlgorithmID.RC4">
      <summary>
            (2665) RC4
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.AlgorithmID.AES128">
      <summary>
            (26126) AES 128
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.AlgorithmID.AES192">
      <summary>
            (26127) ARS 192
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.AlgorithmID.AES256">
      <summary>
            (26128) AES 256
            </summary>
    </member>
    <member name="T:Bytescout.MSCompoundFile.HashAlgorithmID">
      <summary>
            Hash Algorithm
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.HashAlgorithmID.ByFlags">
      <summary>
            (0) By Flags
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.HashAlgorithmID.SHA1">
      <summary>
            (32772) SHA 1
            </summary>
    </member>
    <member name="T:Bytescout.MSCompoundFile.ProviderType">
      <summary>
            Provider type
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.ProviderType.Any">
      <summary>
            (0) Any
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.ProviderType.RC4">
      <summary>
            (1) RC4
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.ProviderType.AES">
      <summary>
            (18) AES
            </summary>
    </member>
    <member name="T:Bytescout.MSCompoundFile.RootDirectoryEntry">
      <summary>
            Represents Root Directory Entry record
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.RootDirectoryEntry.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.RootDirectoryEntry" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.RootDirectoryEntry.#ctor(System.IO.Stream,Bytescout.MSCompoundFile.FAT,System.UInt32,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.RootDirectoryEntry" /> class.
            </summary>
      <param name="FileStream">Compound file stream.</param>
      <param name="FAT">Compound file FAT.</param>
      <param name="SectorSize">Sector Size of FAT.</param>
      <param name="StartSector">First Sector of Storage stream.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.RootDirectoryEntry.FindEntry(System.String)">
      <summary>
            Searches for first matching entry by its name
            </summary>
      <param name="EntryName">String name of entry</param>
      <returns>Entry if found, null otherwise</returns>
    </member>
    <member name="M:Bytescout.MSCompoundFile.RootDirectoryEntry.AddEntry(Bytescout.MSCompoundFile.StorageStream,System.String,Bytescout.Spreadsheet.Constants.STGTY)">
      <summary>
            Adds the entry.
            </summary>
      <param name="StStream">The entry stream.</param>
      <param name="EntryName">Name of the entry.</param>
      <param name="EntryType">Type of the entry.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.MSCompoundFile.RootDirectoryEntry.CreateMiniStream(Bytescout.MSCompoundFile.MiniFAT@,System.UInt32,System.UInt16)">
      <summary>
            Creates the mini stream.
            </summary>
      <param name="mFat">The miniFAT.</param>
      <param name="MiniStreamCutoff">The mini stream cutoff.</param>
      <param name="ShortSectorSize">Size of the short sector.</param>
    </member>
    <member name="P:Bytescout.MSCompoundFile.RootDirectoryEntry.RootEntry">
      <summary>
            Gets the root entry.
            </summary>
      <value>The root entry.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.RootDirectoryEntry.SummaryInformation">
      <summary>
            Gets the SummaryInformation entry.
            </summary>
      <value>The SummaryInformation entry.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.RootDirectoryEntry.DocumentSummaryInformation">
      <summary>
            Gets the DocumentSummaryInformation entry.
            </summary>
      <value>The DocumentSummaryInformation entry.</value>
    </member>
    <member name="T:Bytescout.MSCompoundFile.FileTime">
      <summary>
            File time structure
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.FileTime.dwHighDateTime">
      <summary>
            High date time
            </summary>
    </member>
    <member name="F:Bytescout.MSCompoundFile.FileTime.dwLowDateTime">
      <summary>
            Low date time
            </summary>
    </member>
    <member name="T:Bytescout.MSCompoundFile.SummaryInformation">
      <summary>
            Structure describing SummaryInformation Property Set
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.Codepage">
      <summary>
            Codepage for text
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.Title">
      <summary>
            The title of the document.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.Subject">
      <summary>
            The subject of the document.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.Author">
      <summary>
            The author of the document.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.Keywords">
      <summary>
            Keywords related to the document.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.Comments">
      <summary>
            Comments related the document.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.Template">
      <summary>
            The application specific template used to create the document.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.LastAuthor">
      <summary>
            The last author of the document.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.RevisionNumber">
      <summary>
            An application-specific revision number for this version of the document.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.PageCount">
      <summary>
            The total number of pages in the document.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.WordCount">
      <summary>
            The total number of words in the document.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.CharCount">
      <summary>
            The total number of characters in the document.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.ApplicationName">
      <summary>
            The name of the application that was used to create the document.
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.Security">
      <summary>
            A 32-bit signed integer representing a set of application-suggested access control flags with the following values:
                0x00000001: Password protected
                0x00000002: Read-only recommended
                0x00000004: Read-only enforced
                0x00000008: Locked for annotations
            </summary>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.EditTime">
      <summary>
            Gets or sets the total amount of time that has been spent editing the document.
            </summary>
      <value>The edit time.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.LastPrinted">
      <summary>
            Gets or sets the most recent time the document was printed.
            </summary>
      <value>The last printed.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.CreateDateTime">
      <summary>
            Gets or sets the time that the document was created.
            </summary>
      <value>The create date time.</value>
    </member>
    <member name="P:Bytescout.MSCompoundFile.SummaryInformation.LastSavedDateTime">
      <summary>
            Gets or sets the most recent time the document was saved.
            </summary>
      <value>The last saved date time.</value>
    </member>
    <member name="T:Bytescout.MSCompoundFile.SummaryInformationStream">
      <summary>
            SummaryInformation Property Set stream
            </summary>
    </member>
    <member name="M:Bytescout.MSCompoundFile.SummaryInformationStream.#ctor(System.IO.Stream,Bytescout.MSCompoundFile.AFat,System.UInt32,System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.SummaryInformationStream" /> class.
            </summary>
      <param name="FileStream">Compound file stream.</param>
      <param name="FAT">Compound file FAT.</param>
      <param name="SectorSize">Sector Size of FAT.</param>
      <param name="StartSector">First Sector of Storage stream.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.SummaryInformationStream.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.SummaryInformationStream" /> class.
            </summary>
      <param name="bytes">The bytes.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.SummaryInformationStream.#ctor(Bytescout.MSCompoundFile.SummaryInformation)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.MSCompoundFile.SummaryInformationStream" /> class.
            </summary>
      <param name="si">The SummaryInformation structure.</param>
    </member>
    <member name="M:Bytescout.MSCompoundFile.SummaryInformationStream.Property">
      <summary>
            Reads properties this instance.
            </summary>
      <returns>Structure with SummaryInformation Property Set</returns>
    </member>
    <member name="M:Bytescout.MSCompoundFile.SummaryInformationStream.GetStream(Bytescout.MSCompoundFile.SummaryInformation)">
      <summary>
            Builds and gets the SummaryInformation Property Set stream.
            </summary>
      <param name="si">The structure with SummaryInformation Property Set.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.FillFormat">
      <summary>
            Fill format
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.IFillFormat">
      <summary>
            IFillFormat interface
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.MSODrawing.IFillFormat.OneColorGradient(Bytescout.Spreadsheet.MSODrawing.GradientStyle,System.Int32,System.Double)">
      <summary>
            One color gradient
            </summary>
      <param name="GradientStyle">Gradient style</param>
      <param name="Variant">Variant</param>
      <param name="Degree">Degreee</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.MSODrawing.IFillFormat.TwoColorGradient(Bytescout.Spreadsheet.MSODrawing.GradientStyle,System.Int32)">
      <summary>
            Twoes the color gradient.
            </summary>
      <param name="GradientStyle">The gradient style.</param>
      <param name="Variant">The variant.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.MSODrawing.IFillFormat.Solid">
      <summary>
            Solids this instance.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IFillFormat.BackColor">
      <summary>
            Back color
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IFillFormat.ForeColor">
      <summary>
            Fore color
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IFillFormat.GradientColorType">
      <summary>
            Gradient color type
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IFillFormat.GradientDegree">
      <summary>
            Gets the gradient degree.
            </summary>
      <value>The gradient degree.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IFillFormat.GradientStyle">
      <summary>
            Gradient style
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IFillFormat.GradientVariant">
      <summary>
            Gets the gradient variant.
            </summary>
      <value>The gradient variant.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IFillFormat.Transparency">
      <summary>
            Transparency
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IFillFormat.Visible">
      <summary>
            Gets or sets a value indicating whether the fill is visible.
            </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.MSODrawing.FillFormat.OneColorGradient(Bytescout.Spreadsheet.MSODrawing.GradientStyle,System.Int32,System.Double)">
      <summary>
            One color gradient
            </summary>
      <param name="GradientStyle">Gradient style</param>
      <param name="Variant">Variant</param>
      <param name="Degree">Degreee</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.MSODrawing.FillFormat.TwoColorGradient(Bytescout.Spreadsheet.MSODrawing.GradientStyle,System.Int32)">
      <summary>
            Twoes the color gradient.
            </summary>
      <param name="GradientStyle">The gradient style.</param>
      <param name="Variant">The variant.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.MSODrawing.FillFormat.Solid">
      <summary>
            Solids this instance.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.FillFormat.BackColor">
      <summary>
            Back color
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.FillFormat.ForeColor">
      <summary>
            Fore color
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.FillFormat.Type">
      <summary>
            Fill type
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.FillFormat.GradientColorType">
      <summary>
            Gradient color type
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.FillFormat.GradientDegree">
      <summary>
            Gets the gradient degree.
            </summary>
      <value>The gradient degree.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.FillFormat.GradientStyle">
      <summary>
            Gradient style
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.FillFormat.GradientVariant">
      <summary>
            Gets the gradient variant.
            </summary>
      <value>The gradient variant.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.FillFormat.Transparency">
      <summary>
            Transparency
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.FillFormat.Visible">
      <summary>
            Gets or sets a value indicating whether the fill is visible.
            </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.FillType">
      <summary>
            The enumeration specifies the fill types.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.FillType.Solid">
      <summary>
            (0) The shape is filled with a single solid color.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.FillType.Pattern">
      <summary>
            (1) The shape is filled with a single repeatable pattern.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.FillType.Texture">
      <summary>
            (2) The shape is filled with a repeatable image.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.FillType.Picture">
      <summary>
            (3) An image is scaled to fit entirely within the shape.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.FillType.Shade">
      <summary>
            (4) The shape is filled with a gradient that starts and ends with defined endpoints.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.FillType.ShadeCenter">
      <summary>
            (5) The shape is filled with a gradient that starts and ends based on the bounds of the shape.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.FillType.ShadeShape">
      <summary>
            (6) The shape is filled with a gradient that starts on the outline and ends at a point defined within the shape.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.FillType.ShadeScale">
      <summary>
            (7) The shape is filled with a gradient that starts on the outline and ends at a point defined within the shape. The fill angle is scaled by the aspect ratio of the shape.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.FillType.ShadeTitle">
      <summary>
            (8) The shape is filled with a gradient. This style is intended for slide titles.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.FillType.Background">
      <summary>
            (9) The shape is filled using the fill properties of the background, simulating transparency.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.GradientColorType">
      <summary>
            Gradient color type 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.GradientColorType.ColorMixed">
      <summary>
            (1) Mixed colors
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.GradientColorType.OneColor">
      <summary>
            (2) One color
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.GradientColorType.PresetColors">
      <summary>
            (3) Preset colors
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.GradientColorType.TwoColors">
      <summary>
            (4) Two colors
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.GradientStyle">
      <summary>
            Gradient shading style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.GradientStyle.DiagonalDown">
      <summary>
            (1) Diagonal down
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.GradientStyle.DiagonalUp">
      <summary>
            (2) Diagonal up
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.GradientStyle.FromCenter">
      <summary>
            (3) From center
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.GradientStyle.FromCorner">
      <summary>
            (4) From corner
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.GradientStyle.FromTitle">
      <summary>
            (5) From title
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.GradientStyle.Horizontal">
      <summary>
            (6) Horizontal
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.GradientStyle.Mixed">
      <summary>
            (7) Mixed
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.GradientStyle.Vertical">
      <summary>
            (8) Vertical
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.ILineFormat">
      <summary>
            ILineFormat interface
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.ILineFormat.ForeColor">
      <summary>
            Fore color for line
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.ILineFormat.DashStyle">
      <summary>
            Gets or sets the dash style of the line.
            </summary>
      <value>The dash style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.ILineFormat.Style">
      <summary>
            Gets or sets the style of the line.
            </summary>
      <value>The style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.ILineFormat.Weight">
      <summary>
            Gets or sets the weight of the line in points.
            </summary>
      <value>The weight in points.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.ILineFormat.Visible">
      <summary>
            Gets or sets a value indicating whether the line is visible.
            </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.IPictureShape">
      <summary>
            IPictureShape interface
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.MSODrawing.IPictureShape.ScaleHeight(System.Double,System.Boolean)">
      <summary>
            Scales the height of the picture by a specified factor.
            </summary>
      <param name="factor">Specifies the ratio between the height of the shape after you resize it and the current or original height.</param>
      <param name="relativeToOriginalSize">if set to <c>true</c> [to scale the picture relative to its original size];
            if set to <c>false</c> [to scale it relative to its current size].</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.MSODrawing.IPictureShape.ScaleWidth(System.Double,System.Boolean)">
      <summary>
            Scales the width of the picture by a specified factor.
            </summary>
      <param name="factor">Specifies the ratio between the width of the shape after you resize it and the current or original width.</param>
      <param name="relativeToOriginalSize">if set to <c>true</c> [to scale the picture relative to its original size];
            if set to <c>false</c> [to scale it relative to its current size].</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.Picture">
      <summary>
            Gets the picture.
            </summary>
      <value>The picture.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.TopRow">
      <summary>
            Gets or sets the top row.
            </summary>
      <value>The top row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.LeftColumn">
      <summary>
            Gets or sets the left column.
            </summary>
      <value>The left column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.Top">
      <summary>
            Gets or sets the position of the top edge of this picture in pixels.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.Left">
      <summary>
            Gets or sets the position of the left edge of this picture in pixels.
            </summary>
      <value>The left.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.Height">
      <summary>
            Gets or sets the height of this picture in pixels.
            </summary>
      <value>The height.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.Width">
      <summary>
            Gets or sets the width of this picture in pixels.
            </summary>
      <value>The width.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.Rotation">
      <summary>
            Gets or sets the rotation  of the picture, in degrees.
            </summary>
      <value>The rotation.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.Name">
      <summary>
            Name of the picture
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.PlacementType">
      <summary>
            Gets or sets the Placement setting of this picture, which specifies how changes to the sheet will affect the placement of this picture.
            </summary>
      <value>The placement.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.Locked">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.MSODrawing.PictureShape" /> is locked.
            </summary>
      <value>
        <c>true</c> if locked; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.Print">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.MSODrawing.PictureShape" /> is printable.
            </summary>
      <value>
        <c>true</c> if printable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.CropFromTop">
      <summary>
            Gets or sets the value specified how much to crop the image from the top down as a fraction of picture size.
            </summary>
      <value>The crop from top.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.CropFromBottom">
      <summary>
            Gets or sets the value specified how much to crop the image from the bottom up as a fraction of picture size.
            </summary>
      <value>The crop from bottom.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.CropFromLeft">
      <summary>
            Gets or sets the value specified how much to crop the image from the left in as a fraction of picture size.
            </summary>
      <value>The crop from left.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.CropFromRight">
      <summary>
            Gets or sets the value specified how much to crop the image from the right in as a fraction of picture size.
            </summary>
      <value>The crop from right.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.Contrast">
      <summary>
            Gets or sets the contrast of the picture.
            The minimum value of 0.0 specifies that the picture is rendered with no contrast.
            The maximum value of 1.0 specifies that the picture is rendered with maximum contrast.
            The default value for this property is 0.5 and specifies no change to the contrast of the picture.
            </summary>
      <value>The contrast.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.Brightness">
      <summary>
            Gets or sets the brightness of the picture.
            The minimum value of 0.0 specifies that the picture is rendered with the minimum brightness (dimmest).
            The maximum value of 1.0 specifies that the picture is rendered with the maximum brightness (brightest).
            The default value for this property is 0.5 and specifies no change to the brightness of the picture.
            </summary>
      <value>The brightness.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.ColorType">
      <summary>
            Gets or sets the type of color transformation applied to the picture.
            </summary>
      <value>The type of the color.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.LockAspectRatio">
      <summary>
            Gets or sets a value indicating whether the aspect ratio of this picture is locked.
            </summary>
      <value>
        <c>true</c> if [lock aspect ratio]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.Line">
      <summary>
            Gets or sets the LineFormat object represents the border.
            </summary>
      <value>The line.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.IPictureShape.Fill">
      <summary>
            Fill format
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.LineDashStyle">
      <summary>
            Specifies preset line dash values
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.LineDashStyle.Solid">
      <summary>
            (0) Solid style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.LineDashStyle.Dash">
      <summary>
            (1) Dash style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.LineDashStyle.Dot">
      <summary>
            (2) Dot style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.LineDashStyle.DashDot">
      <summary>
            (3) Dash dot style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.LineDashStyle.DashDotDot">
      <summary>
            (4) Dash dot dot style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.LineDashStyle.SquareDot">
      <summary>
            (5) Square dot style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.LineDashStyle.DashStyleMixed">
      <summary>
            (6) Dash style mixed
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.LineDashStyle.DashLongDash">
      <summary>
            (7) Dash long dash style
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.LineDashStyle.DashLongDashDot">
      <summary>
            (8) Dash long dash dot style
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.LineFormat">
      <summary>
            Line format class for pictures
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.LineFormat.ForeColor">
      <summary>
            Fore color for line
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.LineFormat.DashStyle">
      <summary>
            Gets or sets the dash style of the line.
            </summary>
      <value>The dash style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.LineFormat.Style">
      <summary>
            Gets or sets the style of the line.
            </summary>
      <value>The style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.LineFormat.Weight">
      <summary>
            Gets or sets the weight of the line in points.
            </summary>
      <value>The weight in points.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.LineFormat.Visible">
      <summary>
            Gets or sets a value indicating whether the line is visible.
            </summary>
      <value>
        <c>true</c> if visible; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.LineStyle">
      <summary>
            Specifies the line style type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.LineStyle.Single">
      <summary>
            (0) One line.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.LineStyle.Double">
      <summary>
            (1) Two lines of equal width.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.LineStyle.ThickThin">
      <summary>
            (2) Two lines: one thick, one thin.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.LineStyle.ThinThick">
      <summary>
            (3) Two lines: one thin, one thick.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.LineStyle.Triple">
      <summary>
            (4) Three lines: thin, thick, thin.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.rotation">
      <summary>
            Specifies the rotation on a shape.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.cropFromTop">
      <summary>
            Specifies the location of the top of the crop rectangle.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.cropFromBottom">
      <summary>
            Specifies the location of the bottom of the crop rectangle.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.cropFromLeft">
      <summary>
            Specifies the location of the left of the crop rectangle.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.cropFromRight">
      <summary>
            Specifies the location of the right of the crop rectangle.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.pictureContrast">
      <summary>
            Specifies the contrast modification for the picture.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.pictureBrightness">
      <summary>
            Specifies the brightness modification for the picture.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.ProtectionBooleanProperties">
      <summary>
            Specifies a 32-bit field of Boolean properties for the protection of the shape.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.ShadowStyleBooleanProperties">
      <summary>
            Specifies a 32-bit field of Boolean properties for the state of the shadow.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.ShapeBooleanProperties">
      <summary>
            Specifies a 32-bit field of boolean properties for a shape
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.PatternType">
      <summary>
            Pattern type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Percent5">
      <summary>
            (0) 5 percents
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Percent10">
      <summary>
            (1) 10 percents
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Percent20">
      <summary>
            (2) 20 percents
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Percent25">
      <summary>
            (3) 25 percents
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Percent30">
      <summary>
            (4) 30 percents
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Percent40">
      <summary>
            (5) 40 percents
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Percent50">
      <summary>
            (6) 50 percents
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Percent60">
      <summary>
            (7) 60 percents
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Percent70">
      <summary>
            (8) 70 percents
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Percent75">
      <summary>
            (9) 75 percents
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Percent80">
      <summary>
            (10) 80 percents
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Percent90">
      <summary>
            (11) 90 percents
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.DarkDownwardDiagonal">
      <summary>
            (12) Dark downward diagonal
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.DarkHorizontal">
      <summary>
            (13) Dark horizontal
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.DarkUpwardDiagonal">
      <summary>
            (14) Dark upward diagonal
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.DarkVertical">
      <summary>
            (11) Dark vertical
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.DashedDownwardDiagonal">
      <summary>
            (15) Dashed downward diagonal
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.DashedHorizontal">
      <summary>
            (16) Dashed horizontal
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.DashedUpwardDiagonal">
      <summary>
            (17) Dashed upward diagonal
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.DashedVertical">
      <summary>
            (18) Dashed vertical
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.DiagonalBrick">
      <summary>
            (19) Diagonal brick
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Divot">
      <summary>
            (20) Divot
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.DottedDiamond">
      <summary>
            (21) Dotted diamond
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.DottedGrid">
      <summary>
            (22) Dotted grid
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.HorizontalBrick">
      <summary>
            (23) Horizontal brick
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.LargeCheckerBoard">
      <summary>
            (24) Large checker board
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.LargeConfetti">
      <summary>
            (25) Large confetti
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.LargeGrid">
      <summary>
            (26) Large grid
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.LightDownwardDiagonal">
      <summary>
            (27) Light downward diagonal
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.LightHorizontal">
      <summary>
            (28) Light horizontal
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.LightUpwardDiagonal">
      <summary>
            (29) Light upward diagonal
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.LightVertical">
      <summary>
            (30) Light vertical
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Mixed">
      <summary>
            (31) Mixed
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.NarrowHorizontal">
      <summary>
            (32) Narrow horizontal
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.NarrowVertical">
      <summary>
            (33) Narrow vertical
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.OutlinedDiamond">
      <summary>
            (34) Outlined diamond
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Plaid">
      <summary>
            (35) Plaid
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Shingle">
      <summary>
            (36) Shingle
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.SmallCheckerBoard">
      <summary>
            (37) Small checker board
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.SmallConfetti">
      <summary>
            (38) Small confetti
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.SmallGrid">
      <summary>
            (39) Small grid
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.SolidDiamond">
      <summary>
            (40) Solid diamond
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Sphere">
      <summary>
            (41) Sphere
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Trellis">
      <summary>
            (42) Trellis
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Wave">
      <summary>
            (43) Wave
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.Weave">
      <summary>
            (44) Weave
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.WideDownwardDiagonal">
      <summary>
            (45) Wide downward diagonal
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.WideUpwardDiagonal">
      <summary>
            (46) Wide upward diagonal
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PatternType.ZigZag">
      <summary>
            (47) Zig zag
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.PictureColorType">
      <summary>
            Color transformation type fot the picture
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PictureColorType.Automatic">
      <summary>
            (1) Use original settings (Contrast = 0.5 and Brightness = 0.5)
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PictureColorType.BlackAndWhite">
      <summary>
            (2) Picture will be displayed in two-color mode (black and white colors only)
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PictureColorType.Grayscale">
      <summary>
            (3) Picture will be displayed in the grayscale color type 
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PictureColorType.Mixed">
      <summary>
            (4) Unused type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PictureColorType.Watermark">
      <summary>
            (5) Watermark-like color transformation. (Contrast = 0.15 and Brightness = 0.85)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.PictureShape">
      <summary>
            Picture shape
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.MSODrawing.PictureShape.#ctor(System.Drawing.Image,Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.MSODrawing.PictureShape" /> class.
            </summary>
      <param name="image">The image.</param>
      <param name="worksheet">The parent worksheet.</param>/// 
        </member>
    <member name="M:Bytescout.Spreadsheet.MSODrawing.PictureShape.ScaleHeight(System.Double,System.Boolean)">
      <summary>
            Scales the height of the picture by a specified factor.
            </summary>
      <param name="factor">Specifies the ratio between the height of the shape after you resize it and the current or original height.</param>
      <param name="relativeToOriginalSize">if set to <c>true</c> [to scale the picture relative to its original size];
            if set to <c>false</c> [to scale it relative to its current size].</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.MSODrawing.PictureShape.ScaleWidth(System.Double,System.Boolean)">
      <summary>
            Scales the width of the picture by a specified factor.
            </summary>
      <param name="factor">Specifies the ratio between the width of the shape after you resize it and the current or original width.</param>
      <param name="relativeToOriginalSize">if set to <c>true</c> [to scale the picture relative to its original size];
            if set to <c>false</c> [to scale it relative to its current size].</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.Picture">
      <summary>
            Gets the picture.
            </summary>
      <value>The picture.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.TopRow">
      <summary>
            Gets or sets the top row.
            </summary>
      <value>The top row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.LeftColumn">
      <summary>
            Gets or sets the left column.
            </summary>
      <value>The left column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.BottomRow">
      <summary>
            Gets or sets the bottom row.
            </summary>
      <value>The bottom row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.RightColumn">
      <summary>
            Gets or sets the right column.
            </summary>
      <value>The right column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.Top">
      <summary>
            Gets or sets the position of the top edge of this picture in pixels.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.Left">
      <summary>
            Gets or sets the position of the left edge of this picture in pixels.
            </summary>
      <value>The left.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.Height">
      <summary>
            Gets or sets the height of this picture in pixels.
            </summary>
      <value>The height.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.Width">
      <summary>
            Gets or sets the width of this picture in pixels.
            </summary>
      <value>The width.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.Rotation">
      <summary>
            Gets or sets the rotation  of the picture, in degrees.
            </summary>
      <value>The rotation.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.Name">
      <summary>
            Name of the picture
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.PlacementType">
      <summary>
            Gets or sets the Placement setting of this picture, which specifies how changes to the sheet will affect the placement of this picture.
            </summary>
      <value>The placement.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.Locked">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.MSODrawing.PictureShape" /> is locked.
            </summary>
      <value>
        <c>true</c> if locked; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.Print">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.MSODrawing.PictureShape" /> is printable.
            </summary>
      <value>
        <c>true</c> if printable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.CropFromTop">
      <summary>
            Gets or sets the value specified how much to crop the image from the top down as a fraction of picture size.
            </summary>
      <value>The crop from top.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.CropFromBottom">
      <summary>
            Gets or sets the value specified how much to crop the image from the bottom up as a fraction of picture size.
            </summary>
      <value>The crop from bottom.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.CropFromLeft">
      <summary>
            Gets or sets the value specified how much to crop the image from the left in as a fraction of picture size.
            </summary>
      <value>The crop from left.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.CropFromRight">
      <summary>
            Gets or sets the value specified how much to crop the image from the right in as a fraction of picture size.
            </summary>
      <value>The crop from right.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.Contrast">
      <summary>
            Gets or sets the contrast of the picture.
            The minimum value of 0.0 specifies that the picture is rendered with no contrast.
            The maximum value of 1.0 specifies that the picture is rendered with maximum contrast.
            The default value for this property is 0.5 and specifies no change to the contrast of the picture.
            </summary>
      <value>The contrast.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.Brightness">
      <summary>
            Gets or sets the brightness of the picture.
            The minimum value of 0.0 specifies that the picture is rendered with the minimum brightness (dimmest).
            The maximum value of 1.0 specifies that the picture is rendered with the maximum brightness (brightest).
            The default value for this property is 0.5 and specifies no change to the brightness of the picture.
            </summary>
      <value>The brightness.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.ColorType">
      <summary>
            Gets or sets the type of color transformation applied to the picture.
            </summary>
      <value>The type of the color.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.LockAspectRatio">
      <summary>
            Gets or sets a value indicating whether the aspect ratio of this picture is locked.
            </summary>
      <value>
        <c>true</c> if [lock aspect ratio]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.Line">
      <summary>
            Gets or sets the LineFormat object represents the border.
            </summary>
      <value>The line.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.MSODrawing.PictureShape.Fill">
      <summary>
            Fill format
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.Placement">
      <summary>
            Specifies how changes to a worksheet will affect the
            placement of a shape.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.Placement.MoveAndSize">
      <summary>
            (1) Shapes are move and size with Cells
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.Placement.Move">
      <summary>
            (2) Shapes are move but don't size with cells
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.Placement.FreeFloating">
      <summary>
            (3) Shapes are don't move or size with cells
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.PresetGradientType">
      <summary>
            Preset gradient type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Brass">
      <summary>
            (1) Brass
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Chrome">
      <summary>
            (2) Chrome
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Daybreak">
      <summary>
            (3) Day break
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.EarlySunset">
      <summary>
            (4) Early sunset
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Fog">
      <summary>
            (5) Fog
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.GoldII">
      <summary>
            (6) Gold II
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.LateSunset">
      <summary>
            (7) Late sunset
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Moss">
      <summary>
            (8) Moss
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Ocean">
      <summary>
            (9) Ocean
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Peacock">
      <summary>
            (10) Peacock
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.RainbowII">
      <summary>
            (11) Rainbow II
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Silver">
      <summary>
            (12) Silver
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Wheat">
      <summary>
            (13) Wheat
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Mixed">
      <summary>
            (14) Mixed
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.CalmWater">
      <summary>
            (15) Calm water
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.ChromeII">
      <summary>
            (16) Chrome II
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Desert">
      <summary>
            (17) Desert
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Fire">
      <summary>
            (18) Fire
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Gold">
      <summary>
            (19) Gold
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Horizon">
      <summary>
            (20) Horizon
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Mahogany">
      <summary>
            (21) Mahogany
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Nightfall">
      <summary>
            (22) Night fall
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Parchment">
      <summary>
            (23) Parchment
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Rainbow">
      <summary>
            (24) Rainbow
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetGradientType.Sapphire">
      <summary>
            (25) Sapphire
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.MSODrawing.PresetTexture">
      <summary>
            Preset texture
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.Mixed">
      <summary>
            (1) Mixed
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.Bouquet">
      <summary>
            (2) Boouqet
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.Canvas">
      <summary>
            (3) Canvas
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.Denim">
      <summary>
            (4) Denim
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.Granite">
      <summary>
            (5) Granite
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.MediumWood">
      <summary>
            (6) Medium wood
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.Oak">
      <summary>
            (7) Oak
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.Papyrus">
      <summary>
            (8) Papyrus
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.PinkTissuePaper">
      <summary>
            (9) Pink tissue paper
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.RecycledPaper">
      <summary>
            (10) Recycled paper
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.Stationery">
      <summary>
            (11) Stationary
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.WaterDroplets">
      <summary>
            (12) Water droplets
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.WovenMat">
      <summary>
            (13) Woven mat
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.BlueTissuePaper">
      <summary>
            (14) Blue tissue paper
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.BrownMarble">
      <summary>
            (15) Brown marble
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.Cork">
      <summary>
            (16) Cork
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.FishFossil">
      <summary>
            (17) Fish fossil
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.GreenMarble">
      <summary>
            (18) Green marble
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.Newsprint">
      <summary>
            (19) Newsprint
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.PaperBag">
      <summary>
            (20) Paper bag
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.Parchment">
      <summary>
            (21) Parchment
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.PurpleMesh">
      <summary>
            (22) Purple mesh
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.Sand">
      <summary>
            (23) Sand
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.Walnut">
      <summary>
            (24) Walnut
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.MSODrawing.PresetTexture.WhiteMarble">
      <summary>
            (25) White marble
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.NumberFormating">
      <summary>
            Please take a look at:
                Open XML spec, 18.8.31
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.NumberFormating.Get(System.Object,System.String)">
      <summary>
            Gets the specified number.
            </summary>
      <param name="Number">The number.</param>
      <param name="Format">The format.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.NumberFormating.Get(System.Object,System.String,System.Boolean)">
      <summary>
            Gets the specified number.
            </summary>
      <param name="Number">The number.</param>
      <param name="Format">The format.</param>
      <param name="dt1904">if set to <c>true</c> [DT1904].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.NumberFormating.Get(System.Object,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>
            Gets the specified number.
            </summary>
      <param name="Number">The number.</param>
      <param name="Format">The format.</param>
      <param name="dt1904">if set to <c>true</c> [DT1904].</param>
      <param name="Locale">The locale.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.NumberFormating.NumericFormat(System.Double,System.String,System.Globalization.CultureInfo)">
      <summary>
            Numerics the format.
            </summary>
      <param name="Number">The number.</param>
      <param name="Format">The format.</param>
      <param name="Locale">The locale.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.NumberFormating.DateTimeFormat(System.Double,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>
            Dates the time format.
            </summary>
      <param name="Number">The number.</param>
      <param name="Format">The format.</param>
      <param name="dt1904">if set to <c>true</c> [DT1904].</param>
      <param name="Locale">The locale.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.NumberFormats">
      <summary>
            Represents number formats table of Workbook
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.NumberFormats.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.NumberFormats" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.NumberFormats.AddFormat(System.UInt16,System.String)">
      <summary>
            Adds new the number format string.
            </summary>
      <param name="index">The index.</param>
      <param name="formatstring">The number format string.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.NumberFormats.AddFormat(System.String)">
      <summary>
            Adds new the number format string.
            </summary>
      <param name="format">The number format string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.NumberFormats.GetFormatString(System.UInt16)">
      <summary>
            Gets the number format string on its index.
            </summary>
      <param name="index">The index.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Anchor">
      <summary>
            Describes an anchor placeholder (of any type) for a shape or group of shapes.
            
            Please take a look at:
                Open XML spec, 20.5.2.1 absoluteAnchor (Absolute Anchor Shape Size),
                               20.5.2.24 oneCellAnchor (One Cell Anchor Shape Size),
                               20.5.2.33 twoCellAnchor (Two Cell Anchor Shape Size)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.AnchorClientData">
      <summary>
            Certain properties related to a drawing element on the client spreadsheet.
            
            Please take a look at:
                Open XML spec, 20.5.2.3 clientData (Client Data)
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OpenXML.AnchorClientData.fLocksWithSheet">
      <summary>
            This attribute indicates whether to disable selection on 
            drawing elements when the sheet is protected.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OpenXML.AnchorClientData.fPrintsWithSheet">
      <summary>
            This attribute indicates whether to print drawing elements when
            printing the sheet.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.AnchorPoint">
      <summary>
            Specifies an anchor point for the drawing element.
            
            Please take a look at:
                Open XML spec, 20.5.2.15 from (Starting Anchor Point), 
                               20.5.2.32 to (Ending Anchor Point)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.BookViews">
      <summary>
            Specifies the collection of workbook views.
            
            Please take a look at:
                Open XML spec, 18.2.1 bookViews (Workbook Views)
                Open XML spec, 18.2.30 workbookView (Workbook View)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.CellAlignment">
      <summary>
            Formatting information pertaining to text alignment in cells.
            
            Please take a look at:
                Open XML spec, 18.8.1 alignment (Alignment)
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.CellAlignment.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.CellBorder">
      <summary>
            Specifies the color and line style for a border of a cell.
            
            Please take a look at:
                Open XML spec, 18.8.6, 18.8.13, 18.8.16, 18.8.25, 18.8.37, 18.8.43, 18.8.44
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.CellBorders">
      <summary>
            Expresses a single set of cell border formats
            
            Please take a look at:
                Open XML spec, 18.8.4 border (Border)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.CellProtection">
      <summary>
            Contains protection properties associated with the cell.
            
            Please take a look at:
                Open XML spec, 18.8.33 protection (Protection Properties)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.CellStyle">
      <summary>
            Represents the name and related formatting records for a named cell style in this workbook.
            
            Please take a look at:
                Open XML spec, 18.8.7 cellStyle (Cell Style)
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.AnchorList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.AnchorList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.AnchorList.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.AnchorList" /> class that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.AnchorList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.AnchorList.Add(Bytescout.Spreadsheet.OpenXML.Anchor)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.OpenXML.Anchor" /> to the end of the stringList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.Anchor" /> to be added to the end of the AnchorList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.AnchorList.ToArray">
      <summary>
            Copies the elements of the list to a new AnchorList.
            </summary>
      <returns>An array containing copies of the elements of the list.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.AnchorList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.AnchorList" />.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.AnchorList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.OpenXML.Anchor" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.AnchorList.Count">
      <summary>
            Gets the number of elements actually contained in the stringList.
            </summary>
      <value>The number of elements actually contained in the stringList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.CellBorderList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.CellBorderList.IndexOf(Bytescout.Spreadsheet.OpenXML.CellBorders)">
      <summary>
            Searches for the specified CellBorders and returns the zero-based 
            index of the first occurrence within the entire list.
            </summary>
      <param name="value">The CellBorders to locate in the list. 
            The value can be null.</param>
      <returns>The zero-based index of the first occurrence of value 
            within the entire list, if found; otherwise, -1.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.CellBorderList.Add(Bytescout.Spreadsheet.OpenXML.CellBorders)">
      <summary>
            Adds a CellBorders object to the end of the list.
            </summary>
      <param name="value">The CellBorders object to be added to the end 
            of the list. The value can be null.</param>
      <returns>The index at which the value has been added.</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.CellBorderList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.CellBorders" /> at the specified index.
            </summary>
      <value>
            The <see cref="T:Bytescout.Spreadsheet.OpenXML.CellBorders" /> at the specified index.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.CellBorderList.Count">
      <summary>
            Gets the number of elements actually contained in the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.CellBorderList" />.
            </summary>
      <value>The number of elements actually contained in the SpreadsheetFontList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.CellStyleList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.CellStyleList.IndexOf(Bytescout.Spreadsheet.OpenXML.CellStyle)">
      <summary>
            Searches for the specified CellStyle and returns the zero-based 
            index of the first occurrence within the entire list.
            </summary>
      <param name="value">The CellStyle to locate in the list. 
            The value can be null.</param>
      <returns>The zero-based index of the first occurrence of value 
            within the entire list, if found; otherwise, -1.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.CellStyleList.Add(Bytescout.Spreadsheet.OpenXML.CellStyle)">
      <summary>
            Adds a CellStyle object to the end of the list.
            </summary>
      <param name="value">The CellStyle object to be added to the end 
            of the list. The value can be null.</param>
      <returns>The index at which the value has been added.</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.CellStyleList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.CellStyle" /> at the specified index.
            </summary>
      <value>The <see cref="T:Bytescout.Spreadsheet.OpenXML.CellStyle" /> at the specified index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.CellStyleList.Count">
      <summary>
            Gets the number of elements actually contained in the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.CellStyleList" />.
            </summary>
      <value>The number of elements actually contained in the SpreadsheetFontList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ColorSchemeElementList.Add(Bytescout.Spreadsheet.OpenXML.ColorSchemeElement)">
      <summary>
            Adds the <see cref="T:Bytescout.Spreadsheet.OpenXML.ColorSchemeElement" /> to the end of the ColorSchemeElementList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.ColorSchemeElement" /> to be added to the end of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ColorSchemeElementList" />.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ColorSchemeElementList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ColorSchemeElementList" />.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.ColorSchemeElementList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.ColorSchemeElement" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.ColorSchemeElementList.Count">
      <summary>
            Gets the number of elements actually contained in the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ColorSchemeElementList" />.
            </summary>
      <value>The number of elements actually contained in the ColorSchemeElementList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ControlList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ControlList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ControlList.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ControlList" /> class that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ControlList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ControlList.Add(Bytescout.Spreadsheet.OpenXML.OpenXMLControl)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.OpenXML.OpenXMLControl" /> to the end of the ControlList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.OpenXMLControl" /> to be added to the end of the ControlList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ControlList.ToArray">
      <summary>
            Copies the elements of the list to a new ControlList.
            </summary>
      <returns>An array containing copies of the elements of the list.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ControlList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ControlList" />.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.ControlList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.OpenXML.OpenXMLControl" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.ControlList.Count">
      <summary>
            Gets the number of elements actually contained in the ControlList.
            </summary>
      <value>The number of elements actually contained in the ControlList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ExternalCellDictionary.Add(Bytescout.Spreadsheet.OpenXML.ExternalLink.ExternalCell)">
      <summary>
            Adds the specified key and value to the dictionary.
            </summary>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ExternalCellDictionary.ContainsKey(System.String)">
      <summary>
            Determines whether the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ExternalCellDictionary" /> contains the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ExternalCellDictionary" />.</param>
      <returns>
        <c>true</c> if the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ExternalCellDictionary" /> contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.ExternalCellDictionary.Item(System.String)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.ExternalCell" /> associated with the specified key.
            </summary>
      <value>The key of the value to get </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.ExternalCellDictionary.Keys">
      <summary>
            Gets an System.Collections.ICollection containing the keys in the
            stringDictionary.
            </summary>
      <value>An System.Collections.ICollection containing the keys in the
            stringDictionary.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ExternalLinkPartList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ExternalLinkPartList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ExternalLinkPartList.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ExternalLinkPartList" /> class that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ExternalLinkPartList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ExternalLinkPartList.Add(Bytescout.Spreadsheet.OpenXML.Parts.ExternalLinkPart)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.OpenXML.Parts.ExternalLinkPart" /> to the end of the ExternalLinkPartList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.Parts.ExternalLinkPart" /> to be added to the end of the ExternalLinkPartList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ExternalLinkPartList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ExternalLinkPartList" />.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.ExternalLinkPartList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.OpenXML.Parts.ExternalLinkPart" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.ExternalLinkPartList.Count">
      <summary>
            Gets the number of elements actually contained in the ExternalLinkPartList.
            </summary>
      <value>The number of elements actually contained in the ExternalLinkPartList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ExternalRowDictionary.Add(Bytescout.Spreadsheet.OpenXML.ExternalLink.ExternalRow)">
      <summary>
            Adds the specified key and value to the dictionary.
            </summary>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ExternalRowDictionary.ContainsKey(System.Int32)">
      <summary>
            Determines whether the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ExternalRowDictionary" /> contains the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ExternalRowDictionary" />.</param>
      <returns>
        <c>true</c> if the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ExternalRowDictionary" /> contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.ExternalRowDictionary.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.ExternalRow" /> associated with the specified key.
            </summary>
      <value>The key of the value to get </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.ExternalRowDictionary.Keys">
      <summary>
            Gets an System.Collections.ICollection containing the keys in the
            stringDictionary.
            </summary>
      <value>An System.Collections.ICollection containing the keys in the
            stringDictionary.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.HyperlinkList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.HyperlinkList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.HyperlinkList.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.HyperlinkList" /> class
            that contains elements copied from the specified collection.
            </summary>
      <param name="collection">The <see cref="T:System.Collections.ICollection" /> whose
            elements are copied to the new list.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.HyperlinkList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.HyperlinkList.Add(Bytescout.Spreadsheet.OpenXML.Hyperlink)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.OpenXML.Hyperlink" /> to the end of the list.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.Hyperlink" /> to be added to the
            end of the list.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.HyperlinkList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.Hyperlink" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.HyperlinkList.Count">
      <summary>
            Gets the number of elements actually contained in the HyperlinkList.
            </summary>
      <value>The number of elements actually contained in the HyperlinkList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ImagePartList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ImagePartList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ImagePartList.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ImagePartList" /> class
            that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">The number of elements that the new list
            can initially store.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ImagePartList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ImagePartList.Add(Bytescout.Spreadsheet.OpenXML.Parts.ImagePart)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.OpenXML.Parts.ImagePart" /> to the end of the ImagePartList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.Parts.ImagePart" /> to be added to
            the end of the ImagePartList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ImagePartList.ToArray">
      <summary>
            Copies the elements of the list to a new ImagePartList.
            </summary>
      <returns>An array containing copies of the elements of the list.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.ImagePartList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.ImagePartList" />.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.ImagePartList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.OpenXML.Parts.ImagePart" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.ImagePartList.Count">
      <summary>
            Gets the number of elements actually contained in the ImagePartList.
            </summary>
      <value>The number of elements actually contained in the ImagePartList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.MergeCellList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.MergeCellList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.MergeCellList.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.MergeCellList" /> class
            that contains elements copied from the specified collection.
            </summary>
      <param name="collection">The <see cref="T:System.Collections.ICollection" /> whose
            elements are copied to the new list.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.MergeCellList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.MergeCellList.Add(Bytescout.Spreadsheet.OpenXML.MergeCell)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.OpenXML.MergeCell" /> to the end of the list.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.MergeCell" /> to be added to the
            end of the list.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.MergeCellList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.MergeCell" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.MergeCellList.Count">
      <summary>
            Gets the number of elements actually contained in the MergeCellList.
            </summary>
      <value>The number of elements actually contained in the MergeCellList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.PatternFillList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.PatternFillList.IndexOf(Bytescout.Spreadsheet.OpenXML.PatternFill)">
      <summary>
            Searches for the specified PatternFill and returns the zero-based 
            index of the first occurrence within the entire list.
            </summary>
      <param name="value">The PatternFill to locate in the list. 
            The value can be null.</param>
      <returns>The zero-based index of the first occurrence of value 
            within the entire list, if found; otherwise, -1.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.PatternFillList.Add(Bytescout.Spreadsheet.OpenXML.PatternFill)">
      <summary>
            Adds a PatternFill object to the end of the list.
            </summary>
      <param name="value">The PatternFill object to be added to the end 
            of the list. The value can be null.</param>
      <returns>The index at which the value has been added.</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.PatternFillList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.PatternFill" /> at the specified index.
            </summary>
      <value>The <see cref="T:Bytescout.Spreadsheet.OpenXML.PatternFill" /> at the specified index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.PatternFillList.Count">
      <summary>
            Gets the number of elements actually contained in the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.PatternFillList" />.
            </summary>
      <value>The number of elements actually contained in the SpreadsheetFontList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.RelationshipList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.RelationshipList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.RelationshipList.Add(Bytescout.Spreadsheet.OpenXML.Relationship)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.OpenXML.Relationship" /> to the end of the list.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.Relationship" /> to be added to the end of the list.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.RelationshipList.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.RelationshipList" /> class
            that contains elements copied from the specified collection.
            </summary>
      <param name="collection">The <see cref="T:System.Collections.ICollection" /> whose elements
            are copied to the new list.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.RelationshipList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.RelationshipList.Item(System.String)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.Relationship" /> associated with the specified key.
            </summary>
      <value>The key of the value to get </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.RelationshipList.Count">
      <summary>
            Gets the number of elements actually contained in the RelationshipList.
            </summary>
      <value>The number of elements actually contained in the RelationshipList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.RichTextRunList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.RichTextRunList.IndexOf(Bytescout.Spreadsheet.OpenXML.RichTextRun)">
      <summary>
            Searches for the specified RichTextRun and returns the zero-based 
            index of the first occurrence within the entire list.
            </summary>
      <param name="value">The RichTextRun to locate in the list. 
            The value can be null.</param>
      <returns>The zero-based index of the first occurrence of value 
            within the entire list, if found; otherwise, -1.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.RichTextRunList.Add(Bytescout.Spreadsheet.OpenXML.RichTextRun)">
      <summary>
            Adds a RichTextRun object to the end of the list.
            </summary>
      <param name="value">The RichTextRun object to be added to the end 
            of the list. The value can be null.</param>
      <returns>The index at which the value has been added.</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.RichTextRunList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.RichTextRun" /> at the specified index.
            </summary>
      <value>
            The <see cref="T:Bytescout.Spreadsheet.OpenXML.RichTextRun" /> at the specified index.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.RichTextRunList.Count">
      <summary>
            Gets the number of elements actually contained in the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.RichTextRunList" />.
            </summary>
      <value>The number of elements actually contained in the SpreadsheetFontList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SharedFormulaDictionary.Add(System.Int32,Bytescout.Spreadsheet.OpenXML.Types.SharedFormula)">
      <summary>
            Adds the specified key and value to the dictionary.
            </summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SharedFormulaDictionary.ContainsKey(System.Int32)">
      <summary>
            Determines whether the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.SharedFormulaDictionary" /> contains the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.SharedFormulaDictionary" />.</param>
      <returns>
        <c>true</c> if the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.SharedFormulaDictionary" /> contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.SharedFormulaDictionary.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.Types.SharedFormula" /> associated with the specified key.
            </summary>
      <value>The key of the value to get </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.SharedFormulaDictionary.Keys">
      <summary>
            Gets an System.Collections.ICollection containing the keys in the
            stringDictionary.
            </summary>
      <value>An System.Collections.ICollection containing the keys in the
            stringDictionary.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetCellList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.SheetCellList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetCellList.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.SheetCellList" /> class
            that contains elements copied from the specified collection.
            </summary>
      <param name="collection">The <see cref="T:System.Collections.ICollection" /> whose
            elements are copied to the new list.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetCellList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetCellList.Add(Bytescout.Spreadsheet.OpenXML.SheetCell)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.OpenXML.SheetCell" /> to the end of the list.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.SheetCell" /> to be added to the
            end of the list.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.SheetCellList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.SheetCell" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.SheetCellList.Count">
      <summary>
            Gets the number of elements actually contained in the SheetCellList.
            </summary>
      <value>The number of elements actually contained in the SheetCellList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetColumnList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.SheetColumnList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetColumnList.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.SheetColumnList" /> class
            that contains elements copied from the specified collection.
            </summary>
      <param name="collection">The <see cref="T:System.Collections.ICollection" /> whose
            elements are copied to the new list.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetColumnList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetColumnList.Add(Bytescout.Spreadsheet.OpenXML.SheetColumn)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.OpenXML.SheetColumn" /> to the end of the list.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.SheetColumn" /> to be added to the
            end of the list.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.SheetColumnList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.SheetColumn" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.SheetColumnList.Count">
      <summary>
            Gets the number of elements actually contained in the SheetColumnList.
            </summary>
      <value>The number of elements actually contained in the SheetColumnList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetDataList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.SheetDataList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetDataList.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.SheetDataList" /> class
            that contains elements copied from the specified collection.
            </summary>
      <param name="collection">The <see cref="T:System.Collections.ICollection" /> whose
            elements are copied to the new list.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetDataList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetDataList.Add(Bytescout.Spreadsheet.OpenXML.ExternalLink.SheetData)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.SheetData" /> to the end of the list.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.SheetData" /> to be added to the
            end of the list.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.SheetDataList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.SheetData" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.SheetDataList.Count">
      <summary>
            Gets the number of elements actually contained in the SheetDataList.
            </summary>
      <value>The number of elements actually contained in the SheetDataList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetRowList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.SheetRowList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetRowList.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.SheetRowList" /> class
            that contains elements copied from the specified collection.
            </summary>
      <param name="collection">The <see cref="T:System.Collections.ICollection" /> whose
            elements are copied to the new list.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetRowList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetRowList.Add(Bytescout.Spreadsheet.OpenXML.SheetRow)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.OpenXML.SheetRow" /> to the end of the list.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.SheetRow" /> to be added to the
            end of the list.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.SheetRowList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.SheetRow" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.SheetRowList.Count">
      <summary>
            Gets the number of elements actually contained in the SheetRowList.
            </summary>
      <value>The number of elements actually contained in the SheetRowList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetViewList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.SheetViewList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetViewList.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.SheetViewList" /> class
            that contains elements copied from the specified collection.
            </summary>
      <param name="collection">The <see cref="T:System.Collections.ICollection" /> whose
            elements are copied to the new list.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetViewList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.SheetViewList.Add(Bytescout.Spreadsheet.OpenXML.SheetView)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.OpenXML.SheetView" /> to the end of the list.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.SheetView" /> to be added to the
            end of the list.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.SheetViewList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.SheetView" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.SheetViewList.Count">
      <summary>
            Gets the number of elements actually contained in the SheetViewList.
            </summary>
      <value>The number of elements actually contained in the SheetViewList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.stringDictionary.Add(System.String,System.String)">
      <summary>
            Adds the specified key and value to the dictionary.
            </summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.stringDictionary.ContainsKey(System.String)">
      <summary>
            Determines whether the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.stringDictionary" /> contains the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.stringDictionary" />.</param>
      <returns>
        <c>true</c> if the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.stringDictionary" /> contains an element with the specified key; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.stringDictionary.ContainsValue(System.String)">
      <summary>
            Determines whether the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.stringDictionary" /> contains the specified value.
            </summary>
      <param name="value">The value to locate in the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.stringDictionary" />.</param>
      <returns>
        <c>true</c> if the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.stringDictionary" /> contains an element with the specified value; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.stringDictionary.Item(System.String)">
      <summary>
            Gets the <see cref="T:System.String" /> associated with the specified key.
            </summary>
      <value>The key of the value to get </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.stringDictionary.Keys">
      <summary>
            Gets an System.Collections.ICollection containing the keys in the
            stringDictionary.
            </summary>
      <value>An System.Collections.ICollection containing the keys in the
            stringDictionary.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.StringItemList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.StringItemList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.StringItemList.IndexOf(Bytescout.Spreadsheet.OpenXML.StringItem)">
      <summary>
            Searches for the specified string and returns the zero-based index
            of the first occurrence within the entire StringItemList.
            </summary>
      <param name="value">The string to locate in the StringItemList. The
            value can be null.</param>
      <returns>The zero-based index of the first occurrence of value within
            the entire StringItemList, if found; otherwise, -1.</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.StringItemList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.StringItem" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.StringItemList.Count">
      <summary>
            Gets the number of elements actually contained in the StringItemList.
            </summary>
      <value>The number of elements actually contained in the StringItemList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.WorksheetPartList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.WorksheetPartList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.WorksheetPartList.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.WorksheetPartList" /> class that is empty and has the specified initial capacity.
            </summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.WorksheetPartList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.WorksheetPartList.Add(Bytescout.Spreadsheet.OpenXML.Parts.WorksheetPart)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.OpenXML.Parts.WorksheetPart" /> to the end of the WorksheetPartList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.Parts.WorksheetPart" /> to be added to the end of the WorksheetPartList.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.WorksheetPartList.ToArray">
      <summary>
            Copies the elements of the list to a new WorksheetPartList.
            </summary>
      <returns>An array containing copies of the elements of the list.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.WorksheetPartList.Clear">
      <summary>
            Removes all elements from the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.WorksheetPartList" />.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.WorksheetPartList.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Bytescout.Spreadsheet.OpenXML.Parts.WorksheetPart" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.WorksheetPartList.Count">
      <summary>
            Gets the number of elements actually contained in the WorksheetPartList.
            </summary>
      <value>The number of elements actually contained in the WorksheetPartList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.XFList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.XFList.IndexOf(Bytescout.Spreadsheet.OpenXML.XF)">
      <summary>
            Searches for the specified XF and returns the zero-based 
            index of the first occurrence within the entire list.
            </summary>
      <param name="value">The XF to locate in the list. 
            The value can be null.</param>
      <returns>The zero-based index of the first occurrence of value 
            within the entire list, if found; otherwise, -1.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.XFList.Add(Bytescout.Spreadsheet.OpenXML.XF)">
      <summary>
            Adds a XF object to the end of the list.
            </summary>
      <param name="value">The XF object to be added to the end 
            of the list. The value can be null.</param>
      <returns>The index at which the value has been added.</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.XFList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.XF" /> at the specified index.
            </summary>
      <value>The <see cref="T:Bytescout.Spreadsheet.OpenXML.XF" /> at the specified index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.XFList.Count">
      <summary>
            Gets the number of elements actually contained in the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.XFList" />.
            </summary>
      <value>The number of elements actually contained in the SpreadsheetFontList.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.xmlDefinedNameList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.xmlDefinedNameList" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.xmlDefinedNameList.#ctor(System.Collections.ICollection)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.OpenXML.Collections.xmlDefinedNameList" /> class
            that contains elements copied from the specified collection.
            </summary>
      <param name="collection">The <see cref="T:System.Collections.ICollection" /> whose
            elements are copied to the new list.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.xmlDefinedNameList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Collections.xmlDefinedNameList.Add(Bytescout.Spreadsheet.OpenXML.xmlDefinedName)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.OpenXML.Hyperlink" /> to the end of the list.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.OpenXML.xmlDefinedName" /> to be added to the
            end of the list.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.xmlDefinedNameList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.OpenXML.xmlDefinedName" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Collections.xmlDefinedNameList.Count">
      <summary>
            Gets the number of elements actually contained in the xmlDefinedNameList.
            </summary>
      <value>The number of elements actually contained in the xmlDefinedNameList.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ColorSchemeElement">
      <summary>
            Describes a color scheme element
            
            Please take a look at:
                Open XML spec, 20.1.6.2 clrScheme (Color Scheme)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ConnectionPoint">
      <summary>
            Specifies the starting or ending connection that should be made by the 
            corresponding connector shape.
            
            Please take a look at:
                Open XML spec, 20.1.2.2.13 endCxn (Connection End),
                               20.1.2.2.36 stCxn (Connection Start)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ConnectionShape">
      <summary>
            The properties for a connection shape drawing element.
            
            Please take a look at:
                Open XML spec, 20.5.2.13 cxnSp (Connection Shape)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ConnectionShapeLocks">
      <summary>
            All locking properties for a connection shape.
            
            Please take a look at:
                Open XML spec, 20.1.2.2.11 cxnSpLocks (Connection Shape Locks)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ContentTypes">
      <summary>
            Content types for relationship parts, the Workbook part, and at least
            one Sheet part of the worksheet.
            
            Please take a look at:
                Open XML spec, 12.2 Package Structure
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.EverOpenMemoryStream">
      <summary>
            The purpose of this class is to provide a stream that can't get closed. 
            We need such un-closable stream only because 1.1 version of XmlWriter
            can not be used without closing underlaying stream and we do not
            want underlaying stream to be closed (i.e. we do not want to close
            zip file entry's stream)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Extents">
      <summary>
            Describes the size of the bounding box enclosing the referenced object.
            
            Please take a look at:
                Open XML spec, 20.1.7.3 ext (Extents)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.DDEItem">
      <summary>
            Represents represents a DDE item.
            
            Please take a look at:
                Open XML spec, 18.14.2 ddeItem (DDE Item definition)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.DDELink">
      <summary>
            Represents a connection to an external Dynamic Data Exchange (DDE) server.
            
            Please take a look at:
                Open XML spec, 18.14.4 ddeLink (DDE Connection)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.DDENameValues">
      <summary>
            Collection of values associated with DDE item.
            
            Please take a look at:
                Open XML spec, 18.14.19 values (DDE Name Values)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.DDEValue">
      <summary>
            Value associated with a particular DDE item.
            
            Please take a look at:
                Open XML spec, 18.14.18 value (Value)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.DdeValueType">
      <summary>
            Type indicates the type of the DDE value.
            
            Please take a look at:
                Open XML spec, 18.18.23 ST_DdeValueType (DDE Value Types)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.ExtDefinedName">
      <summary>
            A named range in an external workbook
            
            Please take a look at:
                Open XML spec, 18.14.5 definedName (Defined Name)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.ExtDefinedNames">
      <summary>
            This element is a collection of the defined names associated with the supporting workbook.
            
            Please take a look at:
                Open XML spec, 18.14.6 definedNames (Named Links)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.ExternalBook">
      <summary>
            External workbook which is supplying data to the current workbook.
            
            Please take a look at:
                Open XML spec, 18.14.7 externalBook (External Workbook)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.ExternalCell">
      <summary>
            Stores cached values from external sources.
            
            Please take a look at:
                Open XML spec, 18.14.1 cell (External Cell Data)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.ExternalRow">
      <summary>
            Contains data for an external worksheet row.
            
            Please take a look at:
                Open XML spec, 18.14.12 row (Row)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.OLEItem">
      <summary>
            Represents represents a DDE item.
            
            Please take a look at:
                Open XML spec, oleItem (Object Link Item)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.OLELink">
      <summary>
            Represents an external link to an embedded object, specified by a progID/object pair.
            
            Please take a look at:
                Open XML spec, 18.14.11 oleLink (Generic Object Link Connection)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ExternalLink.SheetData">
      <summary>
            The cached worksheet data associated with a supporting workbook
            
            Please take a look at:
                Open XML spec, 18.14.13 sheetData (External Sheet Data Set)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.FileSharing">
      <summary>
            File sharing settings for the workbook.
            
            Please take a look at:
                Open XML spec, 18.2.12 fileSharing (File Sharing)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.FontReader">
      <summary>
            Reads Font element of Styles part.
            
            Please take a look at:
                Open XML spec, 18.8.22 font (Font)
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.FontReader.underlineFromNode(System.Xml.XmlReader)">
      <summary>
            Reads font underline style from XML node
            </summary>
      <param name="reader">XmlReader to read the style from.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.FontReader.escapementFromNode(System.Xml.XmlReader)">
      <summary>
            Reads font escapement style from XML node.
            </summary>
      <param name="reader">XmlReader to read the style from.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Formula">
      <summary>
            Formula for the cell.
            
            Please take a look at:
                Open XML spec, 18.3.1.40 f (Formula)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.GraphicObject">
      <summary>
            Describes a single graphic object within the spreadsheet.
            
            Please take a look at:
                Open XML spec, 20.1.2.2.16 graphic (Graphic Object)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Hyperlink">
      <summary>
            Defines single hyperlink. 
            
            Please take a look at:
                Open XML spec, 18.3.1.47 hyperlink (Hyperlink)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Hyperlinks">
      <summary>
            Collection of hyperlinks.
            
            Please take a look at:
                Open XML spec, 18.3.1.48 hyperlinks (Hyperlinks)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.MergeCell">
      <summary>
            A single merged cell
            
            Please take a look at:
                Open XML spec, 18.3.1.54 mergeCell (Merged Cell)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.MergeCells">
      <summary>
            All the merged cells in the sheet.
            
            Please take a look at:
                Open XML spec, 18.3.1.55 mergeCells (Merge Cells)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.NonVisualCanvasProperties">
      <summary>
            Describes non-visual canvas properties
            
            Please take a look at:
                Open XML spec, 19.3.1.12 cNvPr (Non-Visual Drawing Properties)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.NonVisualConnectionShapeDrawingProperties">
      <summary>
            The non-visual properties for a connector shape.
            
            Please take a look at:
                Open XML spec, 20.5.2.4 cNvCxnSpPr (Non-Visual Connector Shape Drawing Properties)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.NonVisualConnectionShapeProperties">
      <summary>
            All non-visual properties for a connection shape.
            
            Please take a look at:
                Open XML spec, 20.5.2.19 nvCxnSpPr (Non-Visual Properties for a Connection Shape)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.NonVisualDrawingProperties">
      <summary>
            Specifies the set of non-visual properties for the parent element. These
            properties specify all the data about the parent which does not affect 
            its display within the spreadsheet.
            
            Please take a look at:
                Open XML spec, 20.5.2.8 cNvPr (Non-Visual Drawing Properties)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.NonVisualGraphicFrameDrawingProperties">
      <summary>
            Describes non visual drawing properties for a graphic frame
            
            Please take a look at:
                Open XML spec, 19.3.1.9 cNvGraphicFramePr (Non-Visual Graphic Frame Drawing Properties)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.NonVisualGraphicFrameProperties">
      <summary>
            Describes non visual properties for a graphic frame.
            
            Please take a look at:
                Open XML spec, 19.3.1.30 nvGraphicFramePr (Non-Visual Properties for a Graphic Frame)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.NonVisualPictureDrawingProperties">
      <summary>
            Describes the non-visual properties of a picture within a spreadsheet.
            
            Please take a look at:
                Open XML spec, 20.5.2.7 cNvPicPr (Non-Visual Picture Drawing Properties)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.NonVisualPictureProperties">
      <summary>
            Describes non visual properties for a picture.
            
            Please take a look at:
                Open XML spec, 20.5.2.22 nvPicPr (Non-Visual Properties for a Picture)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Offset">
      <summary>
            Describes the location of the bounding box of an object.
            
            Please take a look at:
                Open XML spec, 20.1.7.4 off (Offset)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.OpenXMLBlip">
      <summary>
            Describes image (binary large image or picture).
            
            Please take a look at:
                Open XML spec, 20.1.8.13 blip (Blip)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.OpenXMLBlipFill">
      <summary>
            Specifies the type of picture fill that the picture object has.
            
            Please take a look at:
                Open XML spec, 20.5.2.2 blipFill (Picture Fill)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.OpenXMLControl">
      <summary>
            A single embedded control.
            
            Please take a look at:
                Open XML spec, 18.3.1.19 control (Embedded Control)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.OpenXmlGraphicFrame">
      <summary>
            Describes a graphics frame within the spreadsheet.
            
            Please take a look at:
                Open XML spec, 19.3.1.21 graphicFrame (Graphic Frame)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.OpenXmlPackage">
      <summary>
            SpreadsheetML package.
            
            Please take a look at:
                Open XML spec, 12.2 Package Structure
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.OpenXMLPageSetup">
      <summary>
            The sheet protection options to enforce when the sheet is protected.
            
            Please take a look at:
                Open XML spec, 18.3.1.63 pageSetup (Page Setup Settings)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.OpenXMLPicture">
      <summary>
            Describes a picture object within the spreadsheet.
            
            Please take a look at:
                Open XML spec, 20.5.2.25 pic (Picture)
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.OpenXmlUtils.ColorFromHSL(System.UInt32,System.UInt32,System.UInt32)">
      <summary>
            Conversion from HSL to RGB (http://en.wikipedia.org/wiki/HSL_color_space).
            </summary>
      <param name="h">h - Hue, expressed in 1/6000ths of a degree.</param>
      <param name="s">s - Saturation, expressed in 1000ths of a percent.</param>
      <param name="l">l - Luminance, expressed in 1000ths of a percent.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.OutlineStyle">
      <summary>
            Specifies an outline style that can be applied to a number of different
            objects such as shapes and text. The line allows for the specifying of
            many different types of outlines including even line dashes and bevels.
            
            Please take a look at:
                Open XML spec, 20.1.2.2.24 ln (Outline)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.PageMargins">
      <summary>
            The sheet protection options to enforce when the sheet is protected.
            
            Please take a look at:
                Open XML spec, 18.3.1.62 pageMargins (Page Margins)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Pane">
      <summary>
            Worksheet view pane.
            
            Please take a look at:
                Open XML spec, 18.3.1.66 pane (View Pane)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Parts.ChartPart">
      <summary>
            Chart (DrawingML) part of a Spreadsheet package.
            
            Please take a look at:
                Open XML spec, 14.2.1 Chart Part
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Parts.ChartSheetPart">
      <summary>
            Chart Sheet (DrawingML) part of a Spreadsheet package.
            
            Please take a look at:
                Open XML spec, 18.3.1.12 chartsheet (Chart Sheet)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Parts.DrawingsPart">
      <summary>
            Drawings (DrawingML) part of a Spreadsheet package.
            
            Please take a look at:
                Open XML spec, 12.3.8 Drawings Part, 
                               20.5 DrawingML - SpreadsheetML Drawing
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Parts.ExternalLinkPart">
      <summary>
            External links Part of a SpreadsheetML package.
            
            Please take a look at:
                Open XML spec, 18.14 Supplementary Workbook Data
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Parts.ImagePart">
      <summary>
            Image part of a Spreadsheet package.
            
            Please take a look at:
                Open XML spec, 15.2.14 Image Part
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Parts.SharedStringTablePart">
      <summary>
            Shared String Table Part of SpreadsheetML package.
            
            Please take a look at:
                Open XML spec, 12.3.15 Shared String Table Part
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Parts.SharedStringTablePart.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:System.String" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get or set</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.OpenXML.Parts.SharedStringTablePart.ItemCount">
      <summary>
            Gets the item count.
            </summary>
      <value>The item count.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Parts.StylesPart">
      <summary>
            Styles Part of a SpreadsheetML package.
            
            Please take a look at:
                Open XML spec, 12.3.20 Styles Part
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Parts.ThemePart">
      <summary>
            Theme Part of a SpreadsheetML package.
            
            Please take a look at:
                Open XML spec, 14.2.7 Theme Part
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Parts.WorkbookPart">
      <summary>
            Workbook Part of a SpreadsheetML package.
            
            Please take a look at:
                Open XML spec, 12.3.23 Workbook Part, 18.2 Workbook
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Parts.WorksheetPart">
      <summary>
            Worksheet Part of a SpreadsheetML package.
            
            Please take a look at:
                Open XML spec, 12.3.24 Worksheet Part,
                               18.3.1 Worksheets,
                               18.3.1.99 worksheet (Worksheet)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.PatternFill">
      <summary>
            Pattern element of Styles part.
            
            Please take a look at:
                Open XML spec, 18.8.32 patternFill (Pattern)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.PictureLocks">
      <summary>
            Specifies all locking properties for a graphic frame. These properties 
            inform the generating application about specific properties that have 
            been previously locked and thus should not be changed.
            
            Please take a look at:
                Open XML spec, 20.1.2.2.31 picLocks (Picture Locks)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Relationship">
      <summary>
            A Relationship in a SpreadheetML package
            
            Please take a look at:
                Open XML spec, 9.2 Relationships in Office Open XML
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.Relationship.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Relationships">
      <summary>
            Relationships in a SpreadheetML package
            
            Please take a look at:
                Open XML spec, 9.2 Relationships in Office Open XML
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.RichTextRun">
      <summary>
            Represents a run of rich text.
            
            Please take a look at:
                Open XML spec, 18.4.4 r (Rich Text Run)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.RichTextRunProps">
      <summary>
            A set of properties to apply to the contents of rich text run.
            
            Please take a look at:
                Open XML spec, 18.4.7 rPr (Run Properties)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Selection">
      <summary>
            Worksheet view selection.
            
            Please take a look at:
                Open XML spec, 18.3.1.78 selection (Selection)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ShapeProperties">
      <summary>
            Specifies the visual shape properties that can be applied to a special 
            shape such as a connector shape or picture.
            
            Please take a look at:
                Open XML spec, 20.5.2.30 spPr (Shape Properties)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.ShapeStyle">
      <summary>
            The style that is applied to a shape.
            
            Please take a look at:
                Open XML spec, 20.5.2.31 style (Shape Style)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.SheetCell">
      <summary>
            A cell in the worksheet
            
            Please take a look at:
                Open XML spec, 18.3.1.4 c (Cell)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.SheetColumn">
      <summary>
            Defines column width and column formatting for one or more columns 
            of the worksheet.
            
            Please take a look at:
                Open XML spec, 18.3.1.13 col (Column Width and Formatting)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.SheetColumns">
      <summary>
            Information about whole columns of the worksheet.
            
            Please take a look at:
                Open XML spec, 18.3.1.17 cols (Column Information)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.SheetFormat">
      <summary>
            Sheet Format Properties of a Worksheet.
            
            Please take a look at:
                Open XML spec, 18.3.1.81 sheetFormatPr (Sheet Format Properties)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.SheetProtection">
      <summary>
            The sheet protection options to enforce when the sheet is protected.
            
            Please take a look at:
                Open XML spec, 18.3.1.85 sheetProtection (Sheet Protection Options)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.SheetRow">
      <summary>
            Information about an entire row of a worksheet
            
            Please take a look at:
                Open XML spec, 18.3.1.73 row (Row)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.SheetView">
      <summary>
            A single sheet view definition.
            
            Please take a look at:
                Open XML spec, 18.3.1.87 sheetView (Worksheet View)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.SheetViews">
      <summary>
            Worksheet views collection.
            
            Please take a look at:
                Open XML spec, 18.3.1.88 sheetViews (Sheet Views)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.StringItem">
      <summary>
            Representation of an individual string in the Shared String table.
            
            Please take a look at:
                Open XML spec, 18.4.8 si (String Item)
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.StringItem.buildFromCell(Bytescout.Spreadsheet.Cell)">
      <summary>
            Builds string item from cell data.
            Cell data may be a plain or html-like string. For a html-like strings
            the following tags are supported:
            &lt;b&gt; - italic
            &lt;i&gt; - bold
            &lt;u&gt; - underline
            &lt;u double&gt; - double underline
            &lt;s&gt; - strikethrough
            &lt;sup&gt; - superscript
            &lt;sub&gt; - subscript
            &lt;font color= face= size=&gt; - font color, font name, font size
            </summary>
      <param name="cell">The cell to retrieve data from.</param>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Transform2DForGraphicFrame">
      <summary>
            Describes a transform to be applied to the corresponding graphic frame.
            
            Please take a look at:
                Open XML spec, 19.3.1.53 xfrm (2D Transform for Graphic Frame)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Types.AnchorEditType">
      <summary>
            This simple type specifies all possible settings for how DrawingML 
            contents shall be resized when the rows and columns between its start
            and ending anchor (the from and to child elements) are resized, or 
            have additional rows/columns inserted within them.
            
            Please take a look at:
                Open XML spec, 20.5.3.2 ST_EditAs simple type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OpenXML.Types.AnchorEditType.absolute">
      <summary>
            Do Not Move or Resize With Underlying Rows/Columns
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OpenXML.Types.AnchorEditType.oneCell">
      <summary>
            Move With Cells but Do Not Resize
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OpenXML.Types.AnchorEditType.twoCell">
      <summary>
            Move and Resize With Anchor Cells
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OpenXML.Types.AnchorType.AbsoluteAnchor">
      <summary>
            This element is used as an anchor placeholder for a shape or group
            of shapes. It anchors the object in the same position relative to
            sheet position and its extents are in EMU units.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OpenXML.Types.AnchorType.OneCellAnchor">
      <summary>
            This element specifies a one cell anchor placeholder for a group, a
            shape, or a drawing element. It moves with the cell and its extents
            is in EMU units.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OpenXML.Types.AnchorType.TwoCellAnchor">
      <summary>
            This element specifies a two cell anchor placeholder for a group, a 
            shape, or a drawing element. It moves with cells and its extents are
            in EMU units.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Types.BlackWhiteMode">
      <summary>
            Possible values for Black and White Mode attribute of Connection Shape,
            Picture or Shape.
            
            Please take a look at:
                Open XML spec, §20.1.10.10 ST_BlackWhiteMode simple type
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Types.CellFormulaType">
      <summary>
            The type of formula in the cell.
            
            Please take a look at:
                Open XML spec, 18.18.6 ST_CellFormulaType (Formula Type)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Types.CellDataType">
      <summary>
            Cell's data type.
            
            Please take a look at:
                Open XML spec, 18.18.11 ST_CellType (Cell Type)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Types.PaneState">
      <summary>
            This simple type defines the possible states of the sheet's pane.
            Please take a look at:
                Open XML spec, 18.18.53 ST_PaneState (Pane State)
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OpenXML.Types.PaneState.frozen">
      <summary>
            Panes are frozen, but were not split being frozen.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OpenXML.Types.PaneState.frozenSplit">
      <summary>
            Panes are frozen and were split before being frozen.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OpenXML.Types.PaneState.split">
      <summary>
            Panes are split, but not frozen.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Types.SheetState">
      <summary>
            This simple type defines the possible states for sheet visibility.
            Please take a look at:
                Open XML spec, 18.18.68 ST_SheetState (Sheet Visibility Types)
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OpenXML.Types.SheetState.hidden">
      <summary>
            Indicates the workbook window is hidden, but can be shown by the
            user via the user interface.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OpenXML.Types.SheetState.veryHidden">
      <summary>
            Indicates the sheet is hidden and cannot be shown in the user
            interface (UI). This state is only available programmatically.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OpenXML.Types.SheetState.visible">
      <summary>
            Indicates the sheet is visible.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Types.SheetViewType">
      <summary>
            View setting of the sheet.
            
            Please take a look at:
                Open XML spec, 18.18.69 ST_SheetViewType (Sheet View Type)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.Types.VerticalAlignRun">
      <summary>
            Vertical position of the text relative to the text's default appearance.
            
            Please take a look at:
                Open XML spec, 18.4.14 vertAlign (Vertical Alignment)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.WorkbookProtection">
      <summary>
            Options for protecting data in the Workbook
            
            Please take a look at:
                Open XML spec, 18.2.29 workbookProtection (Workbook Protection)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.XF">
      <summary>
            Describes all of the formatting for a cell.
            
            Please take a look at:
                Open XML spec, 18.8.45 xf (Format)
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.OpenXML.XF.Clone">
      <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
      <returns>
            A new object that is a copy of this instance.
            </returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.OpenXML.xmlDefinedName">
      <summary>
            Defined names are descriptive text that is used to represents a cell, range of cells, formula, or constant value
            
            Please take a look at:
                Open XML spec, 18.2.5 definedName (Defined Name)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OSHARED.FileMoniker">
      <summary>
            This structure specifies a file moniker.
            
            Please take a look at:
                [MS-OSHARED], 2.3.7.8 FileMoniker
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OSHARED.HyperlinkMoniker">
      <summary>
            This structure specifies a hyperlink moniker
            
            Please take a look at:
                [MS-OSHARED], 2.3.7.2 HyperlinkMoniker
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OSHARED.URLMoniker">
      <summary>
            This structure specifies a URL moniker.
            
            Please take a look at:
                [MS-OSHARED], 2.3.7.6 URLMoniker
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.OutputFormat">
      <summary>
            Output format type
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OutputFormat.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OutputFormat.AsExcel">
      <summary>
            As Excel do
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.OutputFormat.OnlyDataTime">
      <summary>
            format DateTime only
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Protection.ECMA376Crypt.GeneratePasswordHashUsingSHA1(System.String,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Generates the password hash using SHA-1.
            
            Please take a look at:
                MS-OFFCRYPTO, 2.3.4.7
            </summary>
      <param name="password">The password used to decode the stream</param>
      <param name="salt">A salt (taken from the EncrptionInfo stream)</param>
      <param name="verifierHashSize">Size of the hash (taken from theEncrptionInfo stream)</param>
      <param name="keySize">The keysize (taken from theEncrptionInfo stream)</param>
      <returns>The derived encryption key byte array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Protection.ECMA376Crypt.PasswordVerifier(System.Byte[],System.Int32,System.Byte[],System.Byte[])">
      <summary>
            Implements the password verifier process
            </summary>
      <param name="key">
      </param>
      <param name="keySize">
      </param>
      <param name="encryptedVerifier">An array of the encryptedVerifier bytes</param>
      <param name="encryptedVerifierHash">An array of the encryptedVerifierHash bytes</param>
      <returns>True if the password is a match</returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.Protection.EncryptionType">
      <summary>
            Encryption method
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Protection.EncryptionType.XOR">
      <summary>
            XOR obfuscation
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Protection.EncryptionType.RC4">
      <summary>
            RC4 CryptoAPI encryption
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Protection.EncryptionType.RC4Compatible">
      <summary>
            RC4 encryption, Excel 97-2000 Compatible
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.CellsSelectionMethod">
      <summary>
            Cells celection method
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.CellsSelectionMethod.ExcelLikeExtendToMergedCellsIfAny">
      <summary>
            (0) Excel like style: the selection extends to merged cells if there are any part of merged cells are included into the selection
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.CellsSelectionMethod.ErrorOnIntersectionWithMergedCells">
      <summary>
            (1) Do not extend to merged cells but through an exception if the selection intersects with merged cells (if any)
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.CellsSelectionMethod.NoErrorOnIntersectionWithMergedCells">
      <summary>
            (2) Do not extend to merged cells but do NOT through an exception if the selection intersects with merged cell (if any)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Range">
      <summary>
            Range class 
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Range.CopyInto(System.Int32,System.Int32)">
      <summary>
            Makes a copy and paste of this range into a new range specified by top left cell (row, col indexes) 
            </summary>
      <param name="row">The top row of destination range.</param>
      <param name="col">The left col of destination range.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Range.CopyInto(System.String)">
      <summary>
            Makes a copy and paste of this range into a new range specified by top left cell (referenced by A1-style name, for example: A1, F3 or C4)
            </summary>
      <param name="A1Ref">The A1-style top left cell reference of destination range.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Range.Merge">
      <summary>
            Merges cells in the range.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Range.UnMerge">
      <summary>
            Unmerges cells in the range.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Range.Calculate">
      <summary>
            Calculates the formulas in the Range.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Range.Sort(System.String,Bytescout.Spreadsheet.Constants.SortOrder,System.Boolean,Bytescout.Spreadsheet.Constants.SortOrientation,Bytescout.Spreadsheet.Constants.SortDataOption)">
      <summary>
            Sorts a range.
            </summary>
      <param name="Key">The sort field.</param>
      <param name="Order">The sort order.</param>
      <param name="MatchCase">if set to <c>true</c> to do a case-sensitive sort.</param>
      <param name="Orientation">The sort orientation.</param>
      <param name="DataOption">Specifies how to sort text in Key.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Range.Sort(System.String,Bytescout.Spreadsheet.Constants.SortOrder,System.String,Bytescout.Spreadsheet.Constants.SortOrder,System.String,Bytescout.Spreadsheet.Constants.SortOrder,System.Boolean,Bytescout.Spreadsheet.Constants.SortOrientation,Bytescout.Spreadsheet.Constants.SortDataOption,Bytescout.Spreadsheet.Constants.SortDataOption,Bytescout.Spreadsheet.Constants.SortDataOption)">
      <summary>
            Sorts a range.
            </summary>
      <param name="Key1">The first sort field.</param>
      <param name="Order1">The sort order for the field specified in Key1.</param>
      <param name="Key2">The second sort field.</param>
      <param name="Order2">The sort order for the field specified in Key2.</param>
      <param name="Key3">The third sort field.</param>
      <param name="Order3">The sort order for the field specified in Key3.</param>
      <param name="MatchCase">if set to <c>true</c> to do a case-sensitive sort.</param>
      <param name="Orientation">The sort orientation.</param>
      <param name="DataOption1">Specifies how to sort text in Key1.</param>
      <param name="DataOption2">Specifies how to sort text in Key2.</param>
      <param name="DataOption3">Specifies how to sort text in Key3.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.Value">
      <summary>
            Sets the value of range.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.ValueAsHTML">
      <summary>
            Sets the formatted text (Rich-Text) in HTML coded format
            </summary>
      <value>The like html presentation of formatted text.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.Formula">
      <summary>
            Sets the formula for the range.
            </summary>
      <value>The formula.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.TopRowIndex">
      <summary>
            Index of the top row of the range.
            </summary>
      <value>Top row index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.BottomRowIndex">
      <summary>
            Index of the bottom row of the range.
            </summary>
      <value>Bottom row index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.LeftColumnIndex">
      <summary>
            Index of the left column of the range.
            </summary>
      <value>Left column index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.RightColumnIndex">
      <summary>
            Index of the right column of the range.
            </summary>
      <value>Right column index.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.IsNotEmptyCells">
      <summary>
            Gets a bool value indicating that the range contains only empty cells or not
            </summary>
      <value>
        <c>true</c> if this range contains not empty cells; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.Font">
      <summary>
            Sets the font of the cell.
            </summary>
      <value>The font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.FontColor">
      <summary>
            Sets the color of the font.
            </summary>
      <value>The color of the font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.FontColorIndex">
      <summary>
            Sets the index of the font color.
            </summary>
      <value>The index of the font color.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.FontEscapement">
      <summary>
            Sets the font escapement.
            </summary>
      <value>The font escapement.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.FontUnderline">
      <summary>
            Sets the font underline style.
            </summary>
      <value>The font underline style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.CellFormat">
      <summary>
            Sets the cell format.
            </summary>
      <value>The cell format.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.Locked">
      <summary>
            Sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.COM.IRange" /> is locked.
            </summary>
      <value>
        <c>true</c> if locked; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.HiddenFormula">
      <summary>
            Gets or sets a value indicating whether formula is hidden.
            </summary>
      <value>
        <c>true</c> if formula is hidden; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.AlignmentHorizontal">
      <summary>
            Sets a horizontal text alignment style of the cell.
            </summary>
      <value>The horizontal text alignment style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.AlignmentVertical">
      <summary>
            Sets the vertical text alignment style of the cell.
            </summary>
      <value>The vertical text alignment style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.Wrap">
      <summary>
            Sets a value indicating a text is wrapped.
            </summary>
      <value>
        <c>true</c> if a text is wrapped; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.ShrinkToFit">
      <summary>
            Gets or sets a value indicating shrink content to fit into cell.
            </summary>
      <value>
        <c>true</c> if shrink to fit; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.Rotation">
      <summary>
            Sets the text rotation angle for the cell.
            </summary>
      <value>The rotation angle.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.Indent">
      <summary>
            Gets or sets the Indent value for the cell.
            </summary>
      <value>The rotation angle.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.TextDirection">
      <summary>
            Gets or sets the reading order.
            </summary>
      <value>Reading order.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.LeftBorderStyle">
      <summary>
            Sets the left border style.
            </summary>
      <value>The left border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.RightBorderStyle">
      <summary>
            Sets the right border style.
            </summary>
      <value>The right border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.TopBorderStyle">
      <summary>
            Sets the top border style.
            </summary>
      <value>The top border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.BottomBorderStyle">
      <summary>
            Sets the bottom border style.
            </summary>
      <value>The bottom border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.DiagonalBorderStyle">
      <summary>
            Sets the diagonal border style.
            </summary>
      <value>The diagonal border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.InnerBorderStyle">
      <summary>
            Sets the inner border style.
            </summary>
      <value>The inner border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.OuterBorderStyle">
      <summary>
            Sets the outer border style.
            </summary>
      <value>The outer border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.LeftBorderColor">
      <summary>
            Sets the color of the left border.
            </summary>
      <value>The color of the left border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.RightBorderColor">
      <summary>
            Sets the color of the right border.
            </summary>
      <value>The color of the right border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.TopBorderColor">
      <summary>
            Sets the color of the top border.
            </summary>
      <value>The color of the top border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.BottomBorderColor">
      <summary>
            Sets the color of the bottom border.
            </summary>
      <value>The color of the bottom border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.DiagonalBorderColor">
      <summary>
            Sets the color of the diagonal border.
            </summary>
      <value>The color of the diagonal border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.InnerBorderColor">
      <summary>
            Sets the color of the inner border.
            </summary>
      <value>The color of the inner border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.OuterBorderColor">
      <summary>
            Sets the color of the outer border.
            </summary>
      <value>The color of the outer border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.IsDiagonalDownLine">
      <summary>
            Sets a value indicating whether this instance is diagonal down line.
            </summary>
      <value>
        <c>true</c> if this instance is diagonal down line; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.IsDiagonalUpLine">
      <summary>
            Sets a value indicating whether this instance is diagonal up line.
            </summary>
      <value>
        <c>true</c> if this instance is diagonal up line; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.FillPattern">
      <summary>
            Sets the fill pattern.
            </summary>
      <value>The fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.FillPatternBackColor">
      <summary>
            Sets the background color for a fill pattern.
            </summary>
      <value>The background color for a fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.FillPatternForeColor">
      <summary>
            Sets the foreground color for a fill pattern.
            </summary>
      <value>The foreground color for a fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.NumberFormatString">
      <summary>
            Sets the number format string.
            </summary>
      <value>The number format string.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Range.ValueDataTypeByNumberFormatString">
      <summary>
            Sets the type (<see cref="P:Bytescout.Spreadsheet.Range.ValueDataTypeByNumberFormatString" />) of the number format. 
            </summary>
      <value>The type of the number format.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.BiffRecord">
      <summary>
            Represents basic BIFF record
            Base class for all BIFF record types
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.BiffRecord.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Records.BiffRecord" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.BiffRecord.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Records.BiffRecord" /> class.
            </summary>
      <param name="bytes">The array representing BIFF record.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.BiffRecord.#ctor(System.Byte[],System.UInt32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Records.BiffRecord" /> class.
            </summary>
      <param name="bytes">The array representing BIFF stream.</param>
      <param name="offset">The offset of this BIFF record in BIFF a stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.BiffRecord.GetRecord(System.Byte[],System.UInt32)">
      <summary>
            Returns record at specified offset
            </summary>
      <param name="bytes">byte array</param>
      <param name="offset">position in array</param>
      <returns>
      </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.BiffRecord.ID">
      <summary>
            Returns type ID of this record
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.BiffRecord.RecordSize">
      <summary>
            Returns data size of this record
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.BiffRecord.Size">
      <summary>
            Returns whole size of record
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.BiffRecord2.isBIFF8">
      <summary>
            Gets or sets a value indicating whether BIFF8 format is used.
            </summary>
      <value>
        <c>true</c> if this instance is BIFF8 format; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString">
      <summary>
            Represents formatted unicode string in SST
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString.CharacterCount">
      <summary>
            Count of characters in string
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString.Flags">
      <summary>
            String flags
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString.HasExtString">
      <summary>
            Checks if string has Extended record
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString.HasFormatting">
      <summary>
            Checks if string has formatting
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString.IsMultiByte">
      <summary>
            Checks if string is unicode
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString.ByteCount">
      <summary>
            Returns length of string in bytes
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString.FormatCount">
      <summary>
            Returns number of formats used for formatting (0 if string has no formatting)
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString.ExtendedStringSize">
      <summary>
            Returns size of extended string in bytes, 0 if there is no one
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString.HeadSize">
      <summary>
            Returns head (before string data) size in bytes
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString.TailSize">
      <summary>
            Returns tail (after string data) size in bytes
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString.Size">
      <summary>
            Returns size of whole record in bytes
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsFormattedUnicodeString.Value">
      <summary>
            Returns string represented by this instance
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.UnicodeEncodedFileURL.EncodeURL(System.String)">
      <summary>
            Кодирует ссылку во внутренний формат Excel для исползования в записи SupBook
            Ссылка должна иметь вид: путь/[имя файла]
            </summary>
      <param name="url">The URL.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiff2ColWidth">
      <summary>
      </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiff2ColWidth.Width">
      <summary>
            Gets the width of the columns in 1/256 of the width of the zero character,
            using default font (first FONT record in the file)
            </summary>
      <value>The width.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiff2LabelCell">
      <summary>
            This record represents a cell that contains a string.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffBlankCell">
      <summary>
            Represents blank cell
            Base class for all cell types
            
            Please take a look at:
                Excel Binary File Format (.xls) Structure Specification,
                    2.5.19 Cell.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBlankCell.RowIndex">
      <summary>
            Zero-based index of row containing this cell
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBlankCell.ColumnIndex">
      <summary>
            Zero-based index of column containing this cell
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBlankCell.XFormat">
      <summary>
            Format used for this cell
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiff2LabelCell.XFormat">
      <summary>
            Format used for this cell
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiff2LabelCell.Value">
      <summary>
            Returns value of this cell
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffArea">
      <summary>
            This record specifies that the chart group is an area chart group
            and specifies the chart group attributes.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.2 Area
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffArea.fStacked">
      <summary>
            Gets a value that specifies whether the data points in the chart group
            that share the same category (3) are stacked.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffArea.f100">
      <summary>
            Gets a value that specifies whether the data points in the chart group
            are displayed as a percentage of the sum of all data points in the chart
            group that share the same category (3). MUST be 0 if fStacked is 0.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffArea.fHasShadow">
      <summary>
            Gets a value that specifies whether one or more data points
            in the chart group has shadows.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffAreaFormat">
      <summary>
            This record specifies the patterns and colors used in a filled region of a chart.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.3 AreaFormat
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAreaFormat.rgbFore">
      <summary>
            Gets the value that specifies the foreground color of the fill pattern.
            The default value of this field is automatically selected from the next
            available color in the chart (section 2.2.3.3) color table.
            
            Excel 97, Excel 2000, Excel 2002, Office Excel 2003, Office Excel 2007,
            and Excel 2010 write a value for this field but ignore it on load
            </summary>
      <value>The foreground color of the fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAreaFormat.rgbBack">
      <summary>
            Gets the value that specifies the background color of the fill pattern.
            The default value of this field is 0xFFFFFF.
            
            Excel 97, Excel 2000, Excel 2002, Office Excel 2003, Office Excel 2007,
            and Excel 2010 write a value for this field but ignore it on load
            </summary>
      <value>The background color of the fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAreaFormat.fls">
      <summary>
            Gets the value that specifies the type of fill pattern.
            </summary>
      <value>The type of fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAreaFormat.icvFore">
      <summary>
            Gets the value that specifies the foreground color of the fill pattern
            from the chart color table.
            
            The default value of this field is automatically selected from the next
            available color in the chart (section 2.2.3.3) color table.
            </summary>
      <value>The foreground color of the fill pattern from the chart color table.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAreaFormat.icvBack">
      <summary>
            Gets the value that specifies the background color of the fill pattern
            from the chart color table.
            
            The default value of this field is 0x0009.
            </summary>
      <value>The background color of the fill pattern from the chart color table.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffArray.FormulaLength">
      <summary>
            Length of formula string
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffAxcExt">
      <summary>
            This record specifies additional extension properties of a date axis,
            along with a CatSerRange record.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.9 AxcExt
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAxcExt.catMin">
      <summary>
            Gets the value that specifies the minimum date, as a date in the date
            system specified by the Date1904 record, in the units defined by duBase.
            SHOULD be less than or equal to catMax.
            If fAutoMin is set to 1, MUST be ignored.
            If fDateAxis is set to 0, MUST be ignored
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAxcExt.catMax">
      <summary>
            Gets the value that specifies the maximum date, as a date in the date
            system specified by the Date1904 record, in the units defined by duBase.
            SHOULD be greater than or equal to catMin.
            If fAutoMax is set to 1, MUST be ignored.
            If fDateAxis is set to 0, MUST be ignored.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAxcExt.catMajor">
      <summary>
            Gets the value that specifies the interval at which the major tick
            marks are displayed on the axis, in the unit defined by duMajor.
            MUST be greater than or equal to catMinor when duMajor is equal to duMinor.
            If fAutoMajor is set to 1, MUST be ignored.
            If fDateAxis is set to 0, MUST be ignored.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAxcExt.duMajor">
      <summary>
            Gets a DateUnit enumeration that specifies the unit of time to use
            for catMajor when the axis is a date axis. If fDateAxis is set to 0,
            MUST be ignored.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAxcExt.catMinor">
      <summary>
            Gets the value that specifies the interval at which the minor tick
            marks are displayed on the axis, in a unit defined by duMinor.
            MUST be less than or equal to catMajor when duMajor is equal to duMinor.
            If fAutoMinor is set to 1, MUST be ignored.
            If fDateAxis is set to 0, MUST be ignored.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAxcExt.duMinor">
      <summary>
            Gets a DateUnit enumeration that specifies the unit of time to use
            for catMinor when the axis is a date axis. If fDateAxis is set to 0,
            MUST be ignored.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAxcExt.duBase">
      <summary>
            Gets A DateUnit enumeration that specifies the smallest unit of time
            used by the axis. If fAutoBase is set to 1, this field MUST be ignored.
            If fDateAxis is set to 0, MUST be ignored.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAxcExt.catCrossDate">
      <summary>
            Gets the value that specifies at which date, as a date in the date
            system specified by the Date1904 record, in the units defined by duBase,
            the value axis crosses this axis. If fDateAxis is set to 0, MUST be ignored.
            If fAutoCross is set to 1, MUST be ignored.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffAxesUsed">
      <summary>
            This record specifies the number of axis groups on the chart.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.10 AxesUsed
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAxesUsed.cAxes">
      <summary>
            Gets the value that specifies the number of axis groups on the chart.
            MUST be a value from the following table:
            0x0001 - A single primary axis group is present.
            0x0002 - Both a primary axis group and a secondary axis group are present.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffAxis">
      <summary>
            This record specifies properties of an axis and specifies the beginning
            of a collection of records as defined by the Chart Sheet Substream ABNF
            that specifies an axis.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.11 Axis
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAxis.wType">
      <summary>
            Gets the value that specifies the type of axis.
            The value MUST be 0x0000 if the record is the first axis in the axis group.
            The value MUST be 0x0001 if the record is the second axis in the axis group.
            The value MUST be 0x0002 if the record is the third axis in the axis group.
            MUST be a value from the following table:
            0x0000 - Axis type is a horizontal value axis for a scatter chart group or
                     a bubble chart group, or category axis for all other chart group types.
            0x0001 - Axis type is a vertical value axis for a scatter chart group or
                     a bubble chart group, or value axis for all other chart group types.
            0x0002 - Axis type is a series axis.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffAxisLine">
      <summary>
            This record specifies which part of the axis is specified by
            the LineFormat record that follows.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.9 AxcExt
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAxisLine.id">
      <summary>
            Gets the value that specifies which part of the axis is defined by
            the LineFormat record that follows be unique among all other id field
            values in AxisLine records in the current axis. MUST be greater than
            the id field values in preceding AxisLine records in the current axis.
            MUST be a value from the following table:
            0x0000 - The axis line itself.
            0x0001 - The major gridlines along the axis.
            0x0002 - The minor gridlines along the axis.
            0x0003 - The walls or floor of a 3-D chart.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffAxisParent">
      <summary>
            This record specifies properties of an axis group and specifies the beginning
            of a collection of records as defined by the Chart Sheet Substream ABNF that
            specifies an axis group.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.13 AxisParent
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffAxisParent.iax">
      <summary>
            Gets the value that specifies whether the axis group is primary or secondary.
            </summary>
      <value>
        <c>true</c> if axis group is secondary; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffBar">
      <summary>
            This record specifies that the chart group is a bar chart group
            or a column chart group, and specifies the chart group attributes.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.15 Bar
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBar.pcOverlap">
      <summary>
            Gets the value that specifies the overlap between data points in 
            the same category as a percentage of the data points width.
            MUST be greater than or equal to -100 and less than or equal to 100.
            MUST be a value from the following table:
            -100 to -1 - Size of the separation between data points.
            0          - No overlap.
            1 to 100   - Size of the overlap between data points.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBar.pcGap">
      <summary>
            Gets the value that specifies the width of the gap between the categories
            and the left and right edges of the plot area as a percentage of the data
            point width divided by 2. It also specifies the width of the gap between
            adjacent categories as a percentage of the data point width.
            MUST be less than or equal to 500.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBar.fTranspose">
      <summary>
            Gets a value that specifies whether the data points and value axis
            are horizontal (for a bar chart group (fTranspose == true))
            or vertical (for a column chart group (fTranspose == false)).
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBar.fStacked">
      <summary>
            Gets a value that specifies whether the data points in the chart group
            that share the same category (3) are stacked.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBar.f100">
      <summary>
            Gets a value that specifies whether the data points in the chart group
            are displayed as a percentage of the sum of all data points in the chart
            group that share the same category (3). MUST be 0 if fStacked is 0.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBar.fHasShadow">
      <summary>
            Gets a value that specifies whether one or more data points
            in the chart group has shadows.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffBegin">
      <summary>
            This record specifies the beginning of a collection of records as defined by the Chart Sheet Substream ABNF.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.17 Begin
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffBkHim">
      <summary>
            This record specifies image data for a sheet background.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.19 BkHim
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffBOF">
      <summary>
            This record specifies the beginning of the individual substreams.
            It also specifies history information for the substreams.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.21 BOF
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBOF.Version">
      <summary>
            Gets a value that specifies the Binary Interchange File Format (BIFF) version of the file.
            BIFF5/7 - 0x0500
            BIFF8   - 0x0600
            </summary>
      <value>The BIFF version.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBOF.Type">
      <summary>
            Gets a value that specifies the document type of the substream of records following this record.
            </summary>
      <value>The type of BIFF substream.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBOF.CreationID">
      <summary>
            Creation ID (build identifier)
            </summary>
      <remarks>Not used before BIFF5</remarks>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBOF.CreationYear">
      <summary>
            Gets a value that specifies the year when this Binary Interchange
            File Format (BIFF) version was first created.
            The value MUST be 0x07CC(Excel 97) or 0x07CD.
            </summary>
      <remarks>Not used before BIFF5</remarks>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBOF.HistoryFlag">
      <summary>
            File history flag
            </summary>
      <remarks>Not used before BIFF8</remarks>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBOF.MinVersionToOpen">
      <summary>
            Minimum Excel version to open this file
            </summary>
      <remarks>Not used before BIFF8</remarks>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffBoolErrCell">
      <summary>
            Represents a constant integer number in range 0..65535
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBoolErrCell.Value">
      <summary>
            Returns value of this cell
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBoolErrCell.ValueType">
      <summary>
            Returns value of this cell
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffBopPop">
      <summary>
            This record specifies that the chart group is a bar of pie chart group
            or a pie of pie chart group and specifies the chart group attributes.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.25 BopPop
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBopPop.pst">
      <summary>
            Gets the value that specifies whether this chart group is
            a bar of pie chart group or a pie of pie chart group.
            
            MUST be a value from the following table:
            0x01 - Pie of pie chart group
            0x02 - Bar of pie chart group
            </summary>
      <value>The value that specifies whether this chart group is a bar of pie or a pie of pie chart.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBopPop.fAutoSplit">
      <summary>
            Gets the value that specifies whether the split point of the chart group
            is determined automatically. If the value is 1, when a bar of pie chart group
            or pie of pie chart group is initially created the data points from the primary
            pie are selected and inserted into the secondary bar/pie automatically.
            </summary>
      <value>The auto split.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBopPop.split">
      <summary>
            Gets the value that specifies what determines the split between the primary pie
            and the secondary bar/pie. MUST be ignored if fAutoSplit is set to 1.
            
            MUST be a value from the following table:
            0x0000 - Position   The data is split based on the position of the data point
                                in the series as specified by iSplitPos.
            0x0001 - Value      The data is split based on a threshold value as specified
                                by numSplitValue.
            0x0002 - Percent    The data is split based on a percentage threshold and the data point
                                values represented as a percentage as specified by pcSplitPercent.
            0x0003 - Custom     The data is split as arranged by the user. Custom split is specified
                                in a following BopPopCustom record.
            </summary>
      <value>The split.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBopPop.iSplitPos">
      <summary>
            Gets the value that specifies how many data points are contained in the secondary bar/pie.
            </summary>
      <value>The split pos.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBopPop.pcSplitPercent">
      <summary>
            Gets the value that specifies the percentage below which each data point
            is contained in the secondary bar/pie as opposed to the primary pie.
            </summary>
      <value>The split percent.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBopPop.pcPie2Size">
      <summary>
            Gets the value that specifies the size of the secondary bar/pie
            as a percentage of the size of the primary pie. MUST be a value
            greater than or equal to 5 and less than or equal to 200.
            </summary>
      <value>The size of secondary bar/pie.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBopPop.pcGap">
      <summary>
            Gets the value that specifies the distance between the primary
            pie and the secondary bar/pie.
            </summary>
      <value>The distance between the primary pie and the secondary bar/pie.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBopPop.numSplitValue">
      <summary>
            Gets the value that specifies the split when the split field is set to 0x0001.
            </summary>
      <value>The num split value.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffBoundSheet">
      <summary>
            Represents Sheet record in Workbook Globals
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBoundSheet.StartOffset">
      <summary>
            Worksheet data start offset
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBoundSheet.Type">
      <summary>
            Type of worksheet
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBoundSheet.VisibleState">
      <summary>
            Visibility of worksheet
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBoundSheet.SheetName">
      <summary>
            Name of worksheet
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffBRAI">
      <summary>
            This record specifies a reference to data in a sheet (1) that is used
            by a part of a series, legend entry, trendline or error bars.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.29 BRAI
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBRAI.id">
      <summary>
            Gets the value that specifies the part of the series, trendline,
            or error bars the referenced data specifies.
            
            0x00 - Referenced data specifies the series, legend entry, or trendline name.
                   Error bars name MUST be empty.
            0x01 - Referenced data specifies the values or horizontal values on bubble
                   and scatter chart groups of the series and error bars.
            0x02 - Referenced data specifies the categories (3) or vertical values on bubble
                   and scatter chart groups of the series and error bars.
            0x03 - Referenced data specifies the bubble size values of the series.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBRAI.rt">
      <summary>
            Gets the value that specifies the type of data that is being referenced.
            
            0x00 - The data source (1) is a category (3) name, series name or bubble
                   size that was automatically generated.
            0x01 - The data source (1) is the text or value as specified by the formula field.
            0x02 - The data source (1) is the value from a range of cells in a sheet (1)
                   specified by the formula field.
            </summary>
      <value>The type of data.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBRAI.fUnlinkedIfmt">
      <summary>
            Gets a value that specifies whether the part of the chart specified
            by the id field uses number formatting from the referenced data.
            </summary>
      <value>
        <c>true</c> if data uses the custom number formatting specified in the ifmt field;
            otherwise, data uses the number formatting of the referenced data<c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBRAI.ifmt">
      <summary>
            Gets the value that specifies the number format to use for the data.
            </summary>
      <value>The the number format to use for the data.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffBRAI.formula">
      <summary>
            Gets the value that specifies the count of bubble size values in the series.
            The value MUST be less than or equal to 32767.
            </summary>
      <value>The count of bubble size values in the series.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffCatSerRange">
      <summary>
            This record specifies the properties of a category axis, a date axis, or a series axis.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.39 CatSerRange
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffCatSerRange.catCross">
      <summary>
            Gets the value that specifies where the value axis crosses this axis.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffCatSerRange.catLabel">
      <summary>
            Gets the value that specifies the interval between axis labels on this axis.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffCatSerRange.catMark">
      <summary>
            Gets the value that specifies the interval at which major tick marks
            and minor tick marks are displayed on the axis.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffCatSerRange.grbit">
      <summary>
      </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffChart">
      <summary>
            This record specifies the position and size of the chart area and
            specifies the beginning of a collection of records as defined by the Chart Sheet Substream.
            
            The position information MUST be ignored if the chart is embedded in a sheet.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.45 Chart
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChart.x">
      <summary>
            Gets a value that specifies the horizontal position of the upper-left corner of the chart in points.
            SHOULD be greater than or equal to zero.
            </summary>
      <value>The horizontal position of the upper-left corner of the chart in points.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChart.y">
      <summary>
            Gets a value that specifies the vertical position of the upper-left corner of the chart in points.
            SHOULD be greater than or equal to zero.
            </summary>
      <value>The vertical position of the upper-left corner of the chart in points.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChart.dx">
      <summary>
            Gets a value that specifies the width in points.
            SHOULD be greater than or equal to zero.
            </summary>
      <value>The the width in points.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChart.dy">
      <summary>
            Gets a value that specifies the height in points.
            SHOULD be greater than or equal to zero.
            </summary>
      <value>The the height in points.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffChart3d">
      <summary>
            This record specifies that the plot area of the chart group is rendered
            in a 3-D scene and also specifies the attributes of the 3-D plot area.
            The preceding chart group type MUST be of type bar, pie, line, area, or surface.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.46 Chart3d
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChart3d.anRot">
      <summary>
            Gets the value that specifies the clockwise rotation, in degrees,
            of the 3-D plot area around a vertical line through the center of
            the 3-D plot area. MUST be greater than or equal to 0 and MUST be
            less than or equal to 360. If chart group type is bar and the value
            of field fTranspose in the record Bar is 1, then MUST be less than
            or equal to 44.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChart3d.anElev">
      <summary>
            Gets the value that specifiesthe rotation, in degrees, of the 3-D plot
            area around a horizontal line through the center of the 3-D plot area.
            MUST be greater than or equal to -90 and MUST be less than or equal to 90.
            If the chart group type is bar and the value of field fTranspose in
            the record Bar is 1, or the chart group type is pie then MUST be greater
            than or equal to 0. If the chart group type is bar and the value of field
            fTranspose in the record Bar is 1, then the value MUST be less than or equal to 44.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChart3d.pcDist">
      <summary>
            Gets the value that specifies the field of view angle for the 3-D plot area.
            MUST be greater than or equal to zero and less than 200.
            SHOULD be less than or equal to 100.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChart3d.pcHeight">
      <summary>
            If fNotPieChart is 0, gets the value that specifies the thickness of the pie
            for a pie chart group. SHOULD be greater than or equal to 5,
            MUST be less than 65535 and SHOULD be less than or equal to 500.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChart3d.pcHeightPie">
      <summary>
            If fNotPieChart is 1, gets the value that specifies the height of the 3-D plot
            area as a percentage of its width. SHOULD be greater than or equal to 5,
            MUST be less than 65535 and SHOULD be less than or equal to 500.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChart3d.pcDepth">
      <summary>
            Gets the value that specifies the depth of the 3-D plot area as a percentage
            of its width. MUST be greater than or equal to 1 and less than or equal to 2000.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChart3d.pcGap">
      <summary>
            Gets the value that specifies the width of the gap between the series and
            the front and back edges of the 3-D plot area as a percentage of the data
            point depth divided by 2. If fCluster is not 1 and chart group type is not
            a bar then pcGap also specifies distance between adjacent series as
            a percentage of the data point depth. MUST be less than or equal to 500.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffChart3DBarShape">
      <summary>
            This record specifies the shape of the data points in a bar or column chart group.
            This record is only used for a bar or column chart group and MUST be ignored for
            all other chart groups. This record MUST be ignored if the current substream does
            not contain a Chart3d record.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.47 Chart3DBarShape
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChart3DBarShape.riser">
      <summary>
            Gets the value that specifies the shape of the base of the data points in a bar or column chart group.
            </summary>
      <value>
        <c>true</c> if base of the data point is an ellipse;
            otherwise, base of the data point is a rectangle.<c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChart3DBarShape.taper">
      <summary>
            Gets the value that specifies how the data points in a bar or column
            chart group taper from base to tip.
            0x00 - The data points of the bar or column chart group do not taper.
                   The shape at the maximum value of the data point is the same as
                   the shape at the base.
            0x01 - The data points of the bar or column chart group taper to a point
                   at the maximum value of each data point.
            0x02 - The data points of the bar or column chart group taper towards
                   a projected point at the position of the maximum value of all of
                   the data points in the chart group, but are clipped at the value
                   of each data point.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffChartFormat">
      <summary>
            This record specifies properties of a chart group and specifies the beginning
            of a collection of records as defined by the Chart Sheet Substream ABNF.
            The collection of records specifies a chart group.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.48 ChartFormat
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChartFormat.fVaried">
      <summary>
            Gets the value that specifies whether the color for each data point
            and the color and type for each data marker varies. If the chart group
            has multiple series, or the chart group has one series and the type is
            either a surface, stock, or area chart group, then this field MUST be
            ignored, and the data points do not vary. For all other chart group types,
            if the chart group has one series, then a value of 0x1 specifies that
            the data points vary. MUST be a value from the following table:
            0x0 - The color for each data point and the color and type for each
                  data marker does not vary.
            0x1 - The color for data points or the color or type for data markers varies.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffChartFormat.icrt">
      <summary>
            Gets the value that specifies the drawing order of the chart group
            relative to the other chart groups, where 0x0000 is the bottom of
            the z-order. This value MUST be unique for each instance of this record
            and MUST be less than or equal to 0x0009.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffColInfo.Flags">
      <summary>
            Returns colinfo flags
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffContinue">
      <summary>
            Represents additional space for very large records
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffCrtLine">
      <summary>
            This record specifies the presence of drop lines, high-low lines,
            series lines or leader lines on the chart group.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.68 CrtLine
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffCrtLine.id">
      <summary>
            Gets the value that specifies the type of line that is present on the chart group.
            MUST be a value from the following table:
            0x0000 - Drop lines below the data points of line, area, and stock chart groups.
            0x0001 - High-Low lines around the data points of line and stock chart groups.
            0x0002 - Series lines connecting data points of stacked column and bar chart groups,
                     and the primary pie to the secondary bar/pie of bar of pie and pie of pie chart groups.
            0x0003 - Leader lines with non-default formatting connecting data labels to
                     the data point of pie and pie of pie chart groups.
            </summary>
      <value>The type of the line.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffCrtLink">
      <summary>
            This record is written but unused.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.69 CrtLink
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffDataFormat">
      <summary>
            This record specifies the data point or series that the formatting information
            that follows applies to and specifies the beginning of a collection of records
            as defined by the Chart Sheet Substream ABNF.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.74 DataFormat
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffDataFormat.xi">
      <summary>
            Gets the value that specifies the zero-based index of the data point within the series specified by yi.
            If this value is 0xFFFF, the formatting information that follows applies to the series.
            Otherwise, the formatting information that follows applies to a data point.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffDataFormat.yi">
      <summary>
            Gets the value that specifies the zero-based index of a Series record in the collection
            of Series records in this chart sheet substream.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffDataFormat.iss">
      <summary>
            Gets the value that specifies properties of the data series, trendline or error bar,
            depending on the type of records in sequence of records that conforms to the SERIESFORMAT
            rule that contains the sequence of records that conforms to the SS rule that contains this record.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffDate1904.Date1904">
      <summary>
            Version
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffDbCell">
      <summary>
            Represents cell-indexing record, finishes each row values block
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffDbCell.RowAddress">
      <summary>
            Offset of first row linked with this record
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffDbCell.CellAddresses">
      <summary>
            Addresses of cell values
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffDefaultRowHeight.Height">
      <summary>
            Height
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffDefaultText">
      <summary>
            This record specifies the text elements that are formatted using
            the information specified by the Text record immediately following this record.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.88 DefaultText
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffDefaultText.id">
      <summary>
            Gets the value that specifies the text elements that are formatted using
            the position and appearance information specified by the Text record
            immediately following this record. MUST be a value from the following table.
            0x00 - Format all Text records in the chart group where fShowPercent
                   is equal to 0 or fShowValue is equal to 0.
            0x01 - Format all Text records in the chart group where fShowPercent
                   is equal to 1 or fShowValue is equal to 1.
            0x02 - Format all Text records in the chart where the value of fScaled
                   of the associated FontInfo structure is equal to 0.
            0x03 - Format all Text records in the chart where the value of fScaled
                   of the associated FontInfo structure is equal to 1.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffDefcolwidth.Width">
      <summary>
            Gets the default column width in characters.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffDimensions">
      <summary>
            This record specifies the used range of the sheet.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.90 Dimensions
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffDimensions.FirstRow">
      <summary>
            Gets the value that specifies the zero-based index of first row in
            the sheet that contains a used cell.
            </summary>
      <value>The index of first row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffDimensions.LastRow">
      <summary>
            Gets the value that specifies the zero-based index of the row after
            the last row in the sheet that contains a used cell.
            MUST be less than or equal to 0x00010000.
            If this value is 0x00000000, no cells on the sheet are used cells.
            </summary>
      <value>The index of last row + 1.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffDimensions.FirstColumn">
      <summary>
            Gets the value that specifies the zero-based index of first column
            in the sheet that contains a used cell.
            </summary>
      <value>The index of first column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffDimensions.LastColumn">
      <summary>
            Gets the value that specifies the zero-based index of the column after
            the last column in the sheet that contains a used cell.
            MUST be less than or equal to 0x0100.
            If this value is 0x0000, no cells on the sheet are used cells.
            </summary>
      <value>The index of last column + 1.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffDropBar">
      <summary>
            This record specifies the attributes of the up bars
            or the down bars between multiple series of a line.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.92 DropBar
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffDropBar.pcGap">
      <summary>
            Gets the value that specifies the width of the gap between the up bars
            or the down bars. MUST be a value between 0 and 500.
            </summary>
      <value>The thickness of the line.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffEnd">
      <summary>
            This record specifies the end of a collection of records as defined by the Chart Sheet Substream ABNF.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.99 End
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffEOF">
      <summary>
            Represents BIFF EOF resord
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffFbi">
      <summary>
            This record specifies the font information at the time the scalable font is added to the chart.
            
            This record is always ignored in Office Excel 2007, and Excel 2010.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.109 Fbi
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFbi.dmixBasis">
      <summary>
            Gets the font width, in twips, when the font was first applied.
            MUST be greater than or equal to 0 and less than or equal to 0x7FFF.
            </summary>
      <value>The font width, in twips.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFbi.dmiyBasis">
      <summary>
            Gets the font height, in twips, when the font was first applied.
            MUST be greater than or equal to 0 and less than or equal to 0x7FFF.
            </summary>
      <value>The font height, in twips.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFbi.twpHeightBasis">
      <summary>
            Gets the default font height in twips.
            MUST be greater than or equal to 20 and less than or equal to 8180.
            </summary>
      <value>The default font height in twips.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFbi.scab">
      <summary>
            Gets a value that specifies the scale to use.
            </summary>
      <value>
        <c>true</c> if scale by plot area; otherwise scale by chart area, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFbi.ifnt">
      <summary>
            Gets a value that specifies the font.
            
            If this value is less than 4, then it specifies a zero-based index of a Font record
            in the collection of Font records in the globals substream. If this value is greater
            than 4, then it specifies a one-based index of a Font record in the collection of Font
            records in the globals substream. MUST NOT equal 4, and MUST be less than or equal to 1022.
            </summary>
      <value>The index of a Font record.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffFileSharing">
      <summary>
            Represents Protect record of worksheet or workbook
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffFontX">
      <summary>
            This record specifies the font for a given text element. The Font record
            referenced by iFont can exist in this chart sheet substream or the workbook.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.123 FontX
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFontX.iFont">
      <summary>
            Gets the value that specifies the font to use for subsequent records.
            </summary>
      <value>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffFormat">
      <summary>
            This record specifies a number format.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.126 Format
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFormat.Index">
      <summary>
            Gets the identifier of a number format.
            </summary>
      <value>The identifier of a number format.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFormat.Format">
      <summary>
            Gets the format string for this number format.
            </summary>
      <value>The format string.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffFormulaCell">
      <summary>
            Represents a cell containing formula
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffNumberCell">
      <summary>
            Represents a floating-point number 
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffNumberCell.Value">
      <summary>
            Returns value of this cell
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFormulaCell.UseEncoding">
      <summary>
            Encoding used to deal with strings
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFormulaCell.Flags">
      <summary>
            Formula flags
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFormulaCell.Value">
      <summary>
            Returns type-dependent value of formula
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFormulaCell.FormulaLength">
      <summary>
            Length of formula string
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffFormulaString">
      <summary>
            Represents a string value of formula
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFormulaString.UseEncoding">
      <summary>
            Encoding used to deal with strings
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFormulaString.Length">
      <summary>
            Length of the string
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFormulaString.Value">
      <summary>
            String text
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffFrame">
      <summary>
            This record specifies the type, size and position of the frame around
            a chart element as defined by the Chart Sheet Substream ABNF.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.128 Frame
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFrame.frt">
      <summary>
            Gets a value that specifies the type of frame to be drawn.
            
            0x0000 - A frame surrounding the chart element
            0x0004 - A frame with a shadow surrounding the chart element.
            </summary>
      <value>The type of frame to be drawn.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFrame.fAutoSize">
      <summary>
            Gets a value indicating whether the size of the frame is automatically calculated.
            </summary>
      <value>
        <c>true</c> if the size of the frame is automatically calculated; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffFrame.fAutoPosition">
      <summary>
            Gets a value indicating whether the position of the frame is automatically calculated.
            </summary>
      <value>
        <c>true</c> if the position of the frame is automatically calculated; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffIndex">
      <summary>
            Represents a worksheet index
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffIndex.FirstExistingRow">
      <summary>
            Returns zero-based index of first existing row
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffIndex.LastExistingRow">
      <summary>
            Returns zero-based index of last existing row
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffIndex.DbCellAddresses">
      <summary>
            Returns addresses of DbCell records
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffIntegerCell">
      <summary>
            Represents a constant integer number in range 0..65535
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffIntegerCell.Value">
      <summary>
            Returns value of this cell
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffLabel">
      <summary>
            This record specifies a cell that contains a string (BIFF5/7).
            In BIFF8 specifies a label on the category axis for each series.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.148 Label
                OpenOffice.org's Documentation of the Microsoft Excel File Format, 5.63 LABEL
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLabel.UseEncoding">
      <summary>
            Encoding used to deal with strings
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLabel.Length">
      <summary>
            Length of string value
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLabel.Value">
      <summary>
            Returns value of this cell
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffLabelSSTCell">
      <summary>
            Represents a string stored in SST
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsBiffLabelSSTCell.Text(Bytescout.Spreadsheet.Records.XlsBiffSST)">
      <summary>
            Returns text using specified SST
            </summary>
      <param name="sst">Shared String Table record</param>
      <returns>
      </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLabelSSTCell.SSTIndex">
      <summary>
            Index of string in Shared String Table
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffLegend">
      <summary>
            This record specifies properties of a legend, and specifies the beginning
            of a collection of records defined by Chart Sheet Substream ABNF.
            The collection of records specifies a legend. The absence of this collection
            of records implies that a legend does not exist on the chart.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.152 Legend
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLegend.x">
      <summary>
            Gets the value that specifies the x-position, in SPRC, of the upper-left
            corner of the bounding rectangle of the legend. MUST be ignored and
            the x1 field from the following Pos record MUST be used instead.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLegend.y">
      <summary>
            Gets the value that specifies the y-position, in SPRC, of the upper-left
            corner of the bounding rectangle of the legend. MUST be ignored and
            the y1 field from the following Pos record MUST be used instead.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLegend.dx">
      <summary>
            Gets the value that specifies the width, in SPRC, of the bounding rectangle
            of the legend. MUST be ignored and the x2 field from the following Pos
            record MUST be used instead.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLegend.dy">
      <summary>
            Gets the value that specifies the height, in SPRC, of the bounding rectangle
            of the legend. MUST be ignored and the y2 field from the following Pos
            record MUST be used instead.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLegend.wSpace">
      <summary>
            Gets the value that specifies the space between legend entries.
            MUST be 0x01, which represents 40 twips between legend entries.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffLine">
      <summary>
            This record specifies that the chart group is a line chart group,
            and specifies the chart group attributes
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.155 Line
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLine.fStacked">
      <summary>
            Gets a value that specifies whether the data points in the chart group
            that share the same category (3) are stacked.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLine.f100">
      <summary>
            Gets a value that specifies whether the data points in the chart group
            are displayed as a percentage of the sum of all data points in the chart
            group that share the same category (3). MUST be 0 if fStacked is 0.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLine.fHasShadow">
      <summary>
            Gets a value that specifies whether one or more data points
            in the chart group has shadows.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffLineFormat">
      <summary>
            This record specifies the appearance of a line.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.156 LineFormat
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLineFormat.rgb">
      <summary>
            Gets the value that specifies the color of the line.
            The color MUST match the color specified by icv.
            </summary>
      <value>The color of the line.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLineFormat.lns">
      <summary>
            Gets the value that specifies the style of the line.
            </summary>
      <value>The style of the line.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLineFormat.we">
      <summary>
            Gets the value that specifies the thickness of the line.
            </summary>
      <value>The thickness of the line.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffLineFormat.icv">
      <summary>
            Gets the value that specifies the color of the line from the chart color table.
            The color MUST match the color specified by rgb.
            
            This value MUST be greater than or equal to 0x0000 and less than or equal to 0x0041,
            or greater than or equal to 0x004D and less than or equal to 0x00004F.
            This value SHOULD NOT be less than 0x0008 (???).
            </summary>
      <value>The color of the line from the chart color table.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffMarkerFormat">
      <summary>
            This record specifies the color, size, and shape of the associated
            data markers that appear on line, radar, and scatter chart groups.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.160 MarkerFormat
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffMarkerFormat.rgbFore">
      <summary>
            Gets the border color of the data marker.
            </summary>
      <value>The RGB fore.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffMarkerFormat.rgbBack">
      <summary>
            Gets the interior color of the data marker.
            </summary>
      <value>The RGB back.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffMarkerFormat.imk">
      <summary>
            Gets a value that specifies the type of data marker.
            </summary>
      <value>The imk.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffMulBlankCell">
      <summary>
            Represents multiple Blank cell
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsBiffMulBlankCell.GetXF(System.UInt16)">
      <summary>
            Returns format forspecified column, column must be between ColumnIndex and LastColumnIndex
            </summary>
      <param name="ColumnIdx">Index of column</param>
      <returns>Format</returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffMulBlankCell.LastColumnIndex">
      <summary>
            Zero-based index of last described column
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffMulRKCell">
      <summary>
            Represents multiple RK number cells
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsBiffMulRKCell.GetXF(System.UInt16)">
      <summary>
            Returns format for specified column
            </summary>
      <param name="ColumnIdx">Index of column, must be between ColumnIndex and LastColumnIndex</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsBiffMulRKCell.GetValue(System.UInt16)">
      <summary>
            Returns value for specified column
            </summary>
      <param name="ColumnIdx">Index of column, must be between ColumnIndex and LastColumnIndex</param>
      <returns>
      </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffMulRKCell.LastColumnIndex">
      <summary>
            Returns zero-based index of last described column
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffName">
      <summary>
            This record specifies a defined name.
            
            Please take a look at:
                Excel Binary File Format (.xls) Structure Specification,
                    2.4.150 Lbl.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffNameCmt">
      <summary>
            This record specifies a comment associated with a defined name.
            
            Please take a look at:
                Excel Binary File Format (.xls) Structure Specification,
                    2.4.176 NameCmt.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffNameCmt.cchName">
      <summary>
            Gets a value that specifies the number of characters in the name.
            The value MUST be less than or equal to 0x00FF.
            </summary>
      <value>The number of characters in the name.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffNameCmt.cchComment">
      <summary>
            Gets a value that specifies the number of characters in the comment.
            The value MUST be less than or equal to 0x00FF.
            </summary>
      <value>The number of characters in the name.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffNameCmt.Name">
      <summary>
            Gets the defined name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffObjectLink">
      <summary>
            This record specifies an object on a chart, or the entire chart,
            to which the Text record is linked.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.182 ObjectLink
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffObjectLink.wLinkObj">
      <summary>
            Gets the value that specifies the object that the Text record is linked to.
            MUST be a value from the following table:
            0x0001 - Entire chart.
            0x0002 - Value axis, or vertical value axis on bubble and scatter chart groups
            0x0003 - Category axis, or horizontal value axis on bubble and scatter chart groups.
            0x0004 - Series or data points.
            0x0007 - Series axis.
            0x000C - Display units labels of an axis.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffObjectLink.wLinkVar1">
      <summary>
            Gets the value that specifies the zero-based index into a Series record
            in the collection of Series records in the current Chart Sheet substream.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffObjectLink.wLinkVar2">
      <summary>
            Gets the value that specifies the zero-based index into the category (3)
            within the series specified by wLinkVar1, to which the Text record is linked.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffPane">
      <summary>
            This record specifies the position of frozen panes or unfrozen panes in the window used to display the sheet.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.189 Pane
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPane.xSplit">
      <summary>
            Returns the horizontal position of the split in the pane.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPane.ySplit">
      <summary>
            Returns the vertical position of the split in the pane.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPane.rwTop">
      <summary>
            Returns index the topmost visible row in the bottom pane.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPane.colLeft">
      <summary>
            Returns index the first visible logical left column in the logical right pane.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPane.pnnAcct">
      <summary>
            Returns the active pane.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffPassword">
      <summary>
            Represents Password record of worksheet or workbook
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffPie">
      <summary>
            This record specifies that the chart group is a pie chart group
            or a doughnut chart group, and specifies the chart group attributes.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.194 Pie
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPie.anStart">
      <summary>
            Gets the value that specifiesthe starting angle of the first data point,
            clockwise from the top of the circle. MUST be less than or equal to 360.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPie.pcDonut">
      <summary>
            Gets the value that specifiesthe size of the center hole in
            a doughnut chart group as a percentage of the plot area size.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPie.fHasShadow">
      <summary>
            Gets a value that specifies whether one or more data points
            in the chart group has shadows.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPie.fShowLdrLines">
      <summary>
            Gets a value that specifies whether the leader lines to the data
            labels are shown.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffPieFormat">
      <summary>
            This record specifies the distance of a data point or data points
            in a series from the center of one of the following:
            - The plot area for a doughnut or pie chart group.
            - The primary pie in a pie of pie or bar of pie chart group.
            - The secondary bar/pie of a pie of pie chart group.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.195 PieFormat
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPieFormat.pcExplode">
      <summary>
            Gets the value that specifies the distance as a percentage. If this value is 0,
            then the data point or data points in a series is as close to the center as possible
            for the particular chart group type. If this value is 100, then the data point is at
            the edge of the chart area. If this value is greater than 100, such that the data point
            is beyond the edge of the chart area, then all the data points in the chart group are
            scaled down to fit inside the chart area such that the data point with the highest
            pcExplode value is at the edge of the chart area.
            MUST be greater than or equal to 0.
            </summary>
      <value>
        <c>true</c> if base of the data point is an ellipse;
            otherwise, base of the data point is a rectangle.<c>false</c>.</value>
      <value>The distance of a data point or data points.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffPlotArea">
      <summary>
            This record is empty, specifying that the Frame record that immediately
            follows this record specifies properties of the plot area.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.197 PlotArea
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffPlotGrowth">
      <summary>
            This record specifies the scale factors to use when calculating the font scaling
            information for a font in the plot area.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.198 PlotGrowth
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPlotGrowth.dxPlotGrowth">
      <summary>
            Gets a value that specifies the horizontal growth (in points) of the plot area for font scaling.
            </summary>
      <value>The horizontal growth of the plot area for font scaling in points.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPlotGrowth.dyPlotGrowth">
      <summary>
            Gets a value that specifies the vertical growth (in points) of the plot area for font scaling.
            </summary>
      <value>The vertical growth of the plot area for font scaling in points.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffPos">
      <summary>
            the size and position for a legend, an attached label, or the plot area,
            as specified by the primary axis group.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.201 Pos
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPos.mdTopLt">
      <summary>
            Gets the value that specifies the positioning mode for the upper-left
            corner of a legend, an attached label, or the plot area.
            </summary>
      <value>The positioning mode for the upper-left corner.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPos.mdBotRt">
      <summary>
            Gets the value that specifies the positioning mode for the lower-right
            corner of a legend, an attached label, or the plot area.
            </summary>
      <value>The positioning mode for the lower-right corner.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPos.x1">
      <summary>
            Gets the value that specifies a position.
            </summary>
      <value>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPos.y1">
      <summary>
            Gets the value that specifies a position.
            </summary>
      <value>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPos.x2">
      <summary>
            Gets the value that specifies a width.
            </summary>
      <value>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPos.y2">
      <summary>
            Gets the value that specifies a height.
            </summary>
      <value>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffPrintSize">
      <summary>
            This record specifies the printed size of the chart.
            This record affects the charts printed only on their own page.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.204 PrintSize
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffPrintSize.printSize">
      <summary>
            Gets a value that specifies the printed size of the chart. MUST be a value from the following list:
            
            0x0000 - The record is part of a UserSViewBegin block and the print settings are unchanged from the defaults specified in the workbook.
            0x0001 - The chart is resized to fill the entire page regardless of the original chart proportions, within page margins.
            0x0002 - The chart is resized proportionally to fill the entire page, within page margins.
            0x0003 - The printed size of the chart is defined in the Chart record.
            </summary>
      <value>The size of the print.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffProtect">
      <summary>
            Represents Protect record of worksheet or workbook
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffRadar">
      <summary>
            This record specifies that the chart group is a radar chart group
            and specifies the chart group attributes
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.212 Radar
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffRadar.RdrAxLab">
      <summary>
            Gets a value that specifies whether category (3) labels are displayed.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffRadar.fHasShadow">
      <summary>
            Gets a value that specifies whether one or more data markers
            in the chart group has shadows.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffRadarArea">
      <summary>
            This record specifies that the chart group is a filled radar chart group
            and specifies the chart group attributes.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.213 RadarArea
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffRKCell">
      <summary>
            Represents an RK number cell
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsBiffRKCell.NumFromRK(System.UInt32)">
      <summary>
            Decodes RK-encoded number
            </summary>
      <param name="rk">Encoded number</param>
      <returns>
      </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffRKCell.Value">
      <summary>
            Returns value of this cell
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffRow">
      <summary>
            Represents row record in table
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffRow.RowIndex">
      <summary>
            Zero-based index of row described
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffRow.FirstDefinedColumn">
      <summary>
            Index of first defined column
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffRow.LastDefinedColumn">
      <summary>
            Index of last defined column
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffRow.RowHeight">
      <summary>
            Returns row height
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffRow.Flags">
      <summary>
            Returns row flags
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffRow.XFormat">
      <summary>
            Returns default format for this row
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffRStringCell.UseEncoding">
      <summary>
            Encoding used to deal with strings
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffRStringCell.Length">
      <summary>
            Length of string value
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffRStringCell.Value">
      <summary>
            Returns value of this cell
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffRStringCell.FormatCount">
      <summary>
            Returns number of formats used for formatting (0 if string has no formatting)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffScatter">
      <summary>
            This record specifies that the chart group is a scatter chart group
            or a bubble chart group, and specifies the chart group attributes.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.243 Scatter
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffScatter.pcBubbleSizeRatio">
      <summary>
            Gets the value that specifiesthe size of the data points as a percentage
            of their default size. A value of 100 shows all the data points in their
            default size, as determined by the application. MUST be greater than or equal
            to 0 and less than or equal to 300. MUST be ignored if the fBubbles field is 0.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffScatter.wBubbleSize">
      <summary>
            Gets the value that specifies how the default size of the data points
            represents the value. MUST be ignored if the fBubbles field is 0.
            MUST be a value from the following table:
            0x0001 - The area of the data point represents the value.
            0x0002 - The width of the data point represents the value.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffScatter.fBubbles">
      <summary>
            Gets a value that specifies whether this chart group is a scatter chart
            group (fBubbles == false) or bubble chart group (fBubbles == true).
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffScatter.fShowNegBubbles">
      <summary>
            Gets a value that specifies whether the data points with negative values
            in the chart group are shown on the chart.
            MUST be ignored if the fBubbles field is 0.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffScatter.fHasShadow">
      <summary>
            Gets a value that specifieswhether one or more data markers in a scatter
            chart group or data points in a bubble chart group have shadows.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffScl">
      <summary>
            This record specifies specifies the zoom level of the current view.
            
            The Zoom in percent MUST be greater than or equal to 10 and less than or equal to 400
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.247 Scl
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsBiffScl.GetRecord(System.UInt32)">
      <summary>
            Gets the record.
            </summary>
      <param name="zoom">The zoom in percent.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffScl.nscl">
      <summary>
            Returns the numerator of the fraction.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffScl.dscl">
      <summary>
            Returns the denominator of the fraction.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffScl.Zoom">
      <summary>
            Gets the zoom level in percent.
            </summary>
      <value>The zoom in percent.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffSelection">
      <summary>
            This record specifies selected cells within a sheet.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.248 Selection
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSelection.pnn">
      <summary>
            Returns the active pane.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSelection.rwAct">
      <summary>
            Returns index to row of the active cell
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSelection.colAct">
      <summary>
            Returns index to column of the active cell
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSelection.irefAct">
      <summary>
            Returns index into the following cell range list to the entry that contains the active cell
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSelection.cref">
      <summary>
            Returns the number of RefU structures in the rgref array of this record.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSelection.rgref">
      <summary>
            Returns An array of structures that specifies ranges of selected cells in the sheet.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffSerFmt">
      <summary>
            This record specifies properties of the associated data points, data markers,
            or lines of the series. The associated data points, data markers, or lines of
            the series are specified by the preceding DataFormat record. If this record is
            not present in the sequence of records that conforms to the SS rule of
            the Chart Sheet Substream ABNF, then the properties of the associated data points,
            data markers, or lines of the series are specified by the default values
            of the fields of this record.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.251 SerFmt
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSerFmt.fSmoothedLine">
      <summary>
            Gets a value indicating whether the lines of the series are displayed with
            a smooth line effect on a scatter, radar, and line chart group.
            
            The default value of this field is 0.
            </summary>
      <value>
        <c>true</c> if smoothed line; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSerFmt.f3DBubbles">
      <summary>
            Gets a value indicating whetherthe data points of a bubble chart group
            are displayed with a 3-D effect. MUST be ignored for all other chart groups.
            
            The default value of this field is 0.
            </summary>
      <value>
        <c>true</c> if 3D bubbles; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSerFmt.fArShadow">
      <summary>
            Gets a value indicating whether the data markers are displayed with
            a shadow on bubble, scatter, radar, stock, and line chart groups.
            
            The default value of this field is 0.
            </summary>
      <value>
        <c>true</c> if shadow; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffSeries">
      <summary>
            This record specifies properties of the data for a series, a trendline, or error bars,
            and specifies the beginning of a collection of records as defined by the Chart Sheet Substream ABNF.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.252 Series
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSeries.sdtX">
      <summary>
            Gets the value that specifies the type of data in categories (3),
            or horizontal values on bubble and scatter chart groups, in the series.
            
            0x0001 - The series contains numeric information.
            0x0003 - The series contains text information.
            </summary>
      <value>The type of data.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSeries.sdtY">
      <summary>
            Gets the value that specifies that the values or vertical values on bubble
            and scatter chart groups, in the series contain numeric information.
            </summary>
      <value>It MUST be 0x0001 and MUST be ignored.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSeries.cValx">
      <summary>
            Gets the value that specifies the count of categories (3),
            or horizontal values on bubble and scatter chart groups, in the series.
            The value MUST be less than or equal to 32767.
            </summary>
      <value>The count of values.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSeries.cValy">
      <summary>
            Gets the value that specifies the count of values,
            or vertical values on bubble and scatter chart groups, in the series.
            The value MUST be less than or equal to 32767.
            </summary>
      <value>The count of values.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSeries.sdtBSize">
      <summary>
            Gets the value that specifies that the bubble size values in the series
            contain numeric information.
            </summary>
      <value>The value MUST be 0x0001, and MUST be ignored.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSeries.cValBSize">
      <summary>
            Gets the value that specifies the count of bubble size values in the series.
            The value MUST be less than or equal to 32767.
            </summary>
      <value>The count of bubble size values in the series.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffSeriesList">
      <summary>
            This record specifies the series for the chart.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.253 SeriesList
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSeriesList.cser">
      <summary>
            Gets the value that specifies the count of series indexes in the rgiser field.
            </summary>
      <value>The count of series indexes in the rgiser field.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSeriesList.Item(System.UInt16)">
      <summary>
            An array of 2-byte unsigned integers, each of which specifies a one-based
            index of a Series record in the collection of Series records in the current
            chart sheet substream. Each referenced Series specifies a series for the chart.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffSeriesText">
      <summary>
            This record specifies the text for a series, trendline name,
            trendline label, axis title or chart title.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.254 SeriesText
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSeriesText.stText">
      <summary>
            Gets the value that specifies the text string.
            </summary>
      <value>The text string.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffSerToCrt">
      <summary>
            This record specifies the chart group for the current series.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.256 SerToCrt
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSerToCrt.id">
      <summary>
            Gets the value that specifies the zero-based index of a ChartFormat record
            in the collection of ChartFormat records in the current chart sheet substream.
            The referenced ChartFormat record specifies the chart group that contains the current series.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffSharedFeatureHeader">
      <summary>
            Stores additional options for sheet protection
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSharedFeatureHeader.SharedFeatureType">
      <summary>
            Shared feature type index
            =2 specifies the enhanced protection type.
            =3 specifies the ignored formula errors type.
            =4 specifies the smart tag type.
            =5 specifies the list type.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSharedFeatureHeader.SizeHdrData">
      <summary>
            Size of HdrSData
            =4 for simple feature headers
            =0 there is no rgbHdrData
            =-1 for complex feature headers,
            the size of HdrData depends on the SharedFeatureType type. (prior to Excel 2003, all features saved using FEATHEAER use complex features.)
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffShrfmla.FormulaLength">
      <summary>
            Length of formula string
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffShtProps">
      <summary>
            This record specifies properties of a chart as defined by the Chart Sheet Substream ABNF.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.261 ShtProps
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffShtProps.mdBlank">
      <summary>
            Gets the value that specifies how the empty cells are plotted be a value from the following table:
            0x00 - Empty cells are not plotted.
            0x01 - Empty cells are plotted as zero.
            0x02 - Empty cells are plotted as interpolated.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffSIIndex">
      <summary>
            This record is part of a group of records which specify the data of a chart.
            This particular record indicates the type of data contained in the Number
            records following it.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.262 SIIndex
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSIIndex.numIndex">
      <summary>
            Gets the value that specifies the type of the data records contained
            by the Number records following it.
            MUST be a value from the following table:
            0x0001 - Series values or vertical values (for scatter or bubble chart groups)
            0x0002 - Category labels or horizontal values (for scatter or bubble chart groups)
            0x0003 - Bubble sizes
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffSST">
      <summary>
            Represents a Shared String Table in BIFF8 format
            
            Please take a look at:
                [MS-XLS].pdf, 2.4.265 SST
                excelfileformat.pdf, 4.11 Shared String Table (BIFF8)
                                     5.21 CONTINUE
                                     5.100 SST – Shared String Table
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsBiffSST.ReadStrings">
      <summary>
            Reads strings from BIFF stream into SST array
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsBiffSST.GetString(System.UInt32)">
      <summary>
            Returns string at specified index
            </summary>
      <param name="SSTIndex">Index of string to get</param>
      <returns>string value if it was found, empty string otherwise</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsBiffSST.Append(Bytescout.Spreadsheet.Records.XlsBiffContinue)">
      <summary>
            Appends Continue record to SST
            </summary>
      <param name="fragment">Continue record</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSST.Count">
      <summary>
            Returns count of strings in SST
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSST.UniqueCount">
      <summary>
            Returns count of unique strings in SST
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffStandardWidth.Width">
      <summary>
            Gets the default column width in 1/256 of the width of the character.
            </summary>
      <value>The width.</value>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.BiffSupBookList.Add(Bytescout.Spreadsheet.Records.XlsBiffSupBook)">
      <summary>
            Adds an <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffSupBook" /> to the end of the BiffSupBookList.
            </summary>
      <param name="item">The <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffSupBook" /> to be added to the end of the BiffSupBookList.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.BiffSupBookList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Records.XlsBiffSupBook" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.BiffSupBookList.Count">
      <summary>
            Gets the number of elements actually contained in the BiffSupBookList.
            </summary>
      <value>The number of elements actually contained in the BiffSupBookList.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffSurf">
      <summary>
            This record specifies that the chart group is a surface chart group
            and specifies the chart group attributes.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.272 Surf
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSurf.fFillSurface">
      <summary>
            Gets a value that specifies whether the surface chart group is wireframe
            or has a fill. MUST be a value from the following table:
            0 - Surface chart group is wireframe.
            1 - Surface chart group has a fill.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffSurf.f3DPhongShade">
      <summary>
            Gets a value that specifies whether the 3-D Phong shading is displayed.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffText">
      <summary>
            This record specifies the properties of an attached label and specifies
            the beginning of a collection of records as defined by the chart sheet substream ABNF.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.324 Text
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffText.at">
      <summary>
            Gets the value that specifies the horizontal alignment of the text.
            MUST be a value from the following table:
            0x01 - Left-alignment if iReadingOrder specifies left-to-right
                   reading order; otherwise, right-alignment
            0x02 - Center-alignment
            0x03 - Right-alignment if iReadingOrder specifies left-to-right
                   reading order; otherwise, left-alignment
            0x04 - Justify-alignment
            0x07 - Distributed alignment
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffText.vat">
      <summary>
            Gets the value that specifies the vertical alignment of the text.
            MUST be a value from the following table:
            0x01 - Top-alignment
            0x02 - Center-alignment
            0x03 - Bottom-alignment
            0x04 - Justify-alignment
            0x07 - Distributed alignment
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffText.wBkgMode">
      <summary>
            Gets the value that specifies the display mode of the background of the text.
            MUST be a value from the following table:
            0x0001 - Transparent background
            0x0002 - Opaque background
            </summary>
      <value>The w BKG mode.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffText.rgbText">
      <summary>
            Gets the value that specifies the color of the text.
            </summary>
      <value>The color of the text.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffText.x">
      <summary>
            Gets the value that specifies the horizontal position of the text,
            relative to the upper-left of the chart area in SPRC.
            </summary>
      <value>The horizontal position of the text.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffText.y">
      <summary>
            Gets the value that specifies the vertical position of the text,
            relative to the upper-left of the chart area in SPRC.
            </summary>
      <value>The vertical position of the text.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffText.dx">
      <summary>
            Gets the value that specifies the horizontal size of the text,
            relative to the chart area in SPRC.
            </summary>
      <value>The horizontal size of the text.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffText.dy">
      <summary>
            Gets the value that specifies the vertical size of the text,
            relative to the chart area in SPRC.
            </summary>
      <value>The vertical size of the text.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffText.icvText">
      <summary>
            Gets the value that specifies the color of the text in the color table.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffText.trot">
      <summary>
            Gets the value that specifies the text rotation.
            MUST be a value from the following table:
            0 to 90   - Text rotated 0 to 90 degrees counter-clockwise
            91 to 180 - Text rotated 1 to 90 degrees clockwise (angle is trot – 90)
            255       - Text top-to-bottom with letters upright
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffTick">
      <summary>
            This record specifies the attributes of the axis labels, major tick marks,
            and minor tick marks associated with an axis.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.327 Tick
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffTick.tktMajor">
      <summary>
            Gets the value that specifies the location of major tick marks.
            MUST be a value from the following table:
            0x0000 - None. No major tick marks are drawn on the axis.
            0x0001 - Inside. Major tick marks are drawn toward the plot area.
            0x0002 - Outside. Major tick marks are drawn away from the plot area.
            0x0003 - Crossing. Major tick marks are drawn evenly on both sides of the axis.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffTick.tktMinor">
      <summary>
            Gets the value that specifies the location of minor tick marks.
            MUST be a value from the following table:
            0x0000 - None. No minor tick marks are present on the axis.
            0x0001 - Inside. Minor tick marks are drawn toward the plot area.
            0x0002 - Outside. Minor tick marks are drawn away from the plot area.
            0x0003 - Crossing. Minor tick marks are drawn evenly on both sides of the axis.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffTick.tlt">
      <summary>
            Gets the value that specifies the location of axis labels.
            MUST be a value from the following table:
            0x0000 - None. No axis labels are present on the axis.
            0x0001 - Low. Axis labels are drawn to the left of the plot area for
                     a vertical axis or below the plot area for a horizontal axis
                     for all chart group types except radar. Axis labels for radar
                     chart group types will be drawn as if the value was 0x0003.
            0x0002 - High. Axis labels are drawn to the right of the plot area for
                     a vertical axis or above the plot area for a horizontal axis
                     for all chart group types except radar. Axis labels for radar
                     chart group types will be drawn as if the value was 0x0003.
            0x0003 - Next to Axis. Axis labels are drawn next to the axis.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffTick.wBkgMode">
      <summary>
            Gets the value that specifies the display mode of the background of the
            text of the axis labels. MUST be ignored if the value of fAutoCo is 1.
            MUST be a value from the following table:
            0x0001 - Transparent background
            0x0002 - Opaque background. The background color will match the rgbBack
                     field in the associated AreaFormat record as specified by
                     the AXS rule in the Chart Sheet Substream ABNF.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffTick.rgb">
      <summary>
            Gets the value that specifies the color of the text for the axis labels.
            MUST be ignored if fAutoCo is 1.
            </summary>
      <value>The color of the text.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffTick.icv">
      <summary>
            Gets the value thatspecifies the color of the text.
            The color MUST be the same as rgb.
            </summary>
      <value>The color of the line from the chart color table.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffTick.trot">
      <summary>
            Gets the value that specifies the axis label’s text rotation.
            MUST be a value from the following table:
            0 to 90   - Text rotated 0 to 90 degrees counterclockwise
            91 to 180 - Text rotated 1 to 90 degrees clockwise (angle is trot – 90)
            255       - Text top-to-bottom with letters upright
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffUnits">
      <summary>
            This record MUST be zero, and MUST be ignored.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.332 Units
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffValueRange">
      <summary>
            This record specifies the properties of a value axis.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.341 ValueRange
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffValueRange.numMin">
      <summary>
            Gets the value that specifies the minimum value of the value axis.
            MUST be less than the value of numMax. If the value of fAutoMin is 1,
            this field MUST be ignored.
            </summary>
      <value>The minimum value of the value axis</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffValueRange.numMax">
      <summary>
            Gets the value that specifies the maximum value of the value axis.
            MUST be greater than the value of numMin. If the value of fAutoMax is 1,
            this field MUST be ignored.
            </summary>
      <value>The maximum value of the value axis.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffValueRange.numMajor">
      <summary>
            Gets the value that specifies the interval at which major tick marks
            and major gridlines are displayed. MUST be greater than or equal to
            the value of numMinor. If the value of fAutoMajor is 1, this field MUST be ignored.
            </summary>
      <value>The interval at which major tick marks.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffValueRange.numMinor">
      <summary>
            Gets the value that specifies the interval at which minor tick marks
            and minor gridlines are displayed. MUST be greater than or equal to zero.
            If the value of fAutoMinor is 1, this field MUST be ignored.
            </summary>
      <value>The interval at which minor tick marks.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffValueRange.numCross">
      <summary>
            Gets the value that specifies at which value the other axes in the axis
            group cross this value axis. If the value of fAutoCross is 1, this
            field MUST be ignored.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffWindow1">
      <summary>
            Represents Workbook's global window description
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffWindow1.Left">
      <summary>
            Returns X position of a window
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffWindow1.Top">
      <summary>
            Returns Y position of a window
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffWindow1.Width">
      <summary>
            Returns width of a window
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffWindow1.Height">
      <summary>
            Returns height of a window
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffWindow1.Flags">
      <summary>
            Returns window flags
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffWindow1.ActiveTab">
      <summary>
            Returns active workbook tab (zero-based)
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffWindow1.FirstVisibleTab">
      <summary>
            Returns first visible workbook tab (zero-based)
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffWindow1.SelectedTabCount">
      <summary>
            Returns number of selected workbook tabs
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffWindow1.TabRatio">
      <summary>
            Returns workbook tab width to horizontal scrollbar width
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffWindow2">
      <summary>
            This record specifies attributes of the window used to display a sheet in a workbook
            
            Please take a look at:
                Excel Binary File Format Specification, 2.4.346 Window2
                OpenOffice.org's Documentation of the Microsoft Excel File Format, 5.110 WINDOW2
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffWindow2.Flags">
      <summary>
            Returns window flags
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffWindow2.FirstVisibleRow">
      <summary>
            Returns index to first visible row
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffWindow2.FirstVisibleColumn">
      <summary>
            Returns index to first visible column
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffWindow2.GridLineColourIndex">
      <summary>
            Returns Colour index of grid line colour (BIFF8)
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Records.XlsBiffWindow2.GridLineColour">
      <summary>
            Returns Colour of grid line colour (BIFF5/7)
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Records.XlsBiffWriteAccess">
      <summary>
            Represents Protect record of worksheet or workbook
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsString.ShortXLUnicodeString(System.String)">
      <summary>
            The XLS unicode string with count(1 byte) of characters
            
            Please take a look at:
                Excel Binary File Format (.xls) Structure Specification,
                    2.5.240 ShortXLUnicodeString.
            </summary>
      <param name="S">The string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsString.ShortXLUnicodeString(System.Byte[],System.Int32)">
      <summary>
            The XLS unicode string with count(1 byte) of characters
            
            Please take a look at:
                Excel Binary File Format (.xls) Structure Specification,
                    2.5.240 ShortXLUnicodeString.
            </summary>
      <param name="bytes">The bytes.</param>
      <param name="offset">The offset.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsString.XLUnicodeString(System.String)">
      <summary>
            XLS the unicode string with count(2 bytes) of characters.
            
            Please take a look at:
                Excel Binary File Format (.xls) Structure Specification,
                    2.5.294 XLUnicodeString.
            </summary>
      <param name="S">The input string.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsString.XLUnicodeString(System.Byte[],System.Int32)">
      <summary>
            The XLS unicode string with count(2 byte) of characters
            
            Please take a look at:
                Excel Binary File Format (.xls) Structure Specification,
                    2.5.294 XLUnicodeString.
            </summary>
      <param name="bytes">The bytes.</param>
      <param name="offset">The offset.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsString.XLUnicodeStringNoCch(System.Byte[],System.Int32,System.UInt16)">
      <summary>
            XLS the unicode string without count of characters.
            
            Please take a look at:
                Excel Binary File Format (.xls) Structure Specification,
                    2.5.296 XLUnicodeStringNoCch.
            </summary>
      <param name="bytes">The bytes.</param>
      <param name="offset">The offset.</param>
      <param name="cch">The count of characters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Records.XlsString.XLUnicodeStringNoCch(System.String)">
      <summary>
            XLS the unicode string without count of characters.
            
            Please take a look at:
                Excel Binary File Format (.xls) Structure Specification,
                    2.5.296 XLUnicodeStringNoCch.
            </summary>
      <param name="S">The input string.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.Row">
      <summary>
            Row class
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Row.min">
      <summary>
            Min cell
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Row.max">
      <summary>
            Max cell
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Row.recalcMinMax">
      <summary>
            Recalculate min and max
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Row.#ctor(Bytescout.Spreadsheet.Worksheet,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Row" /> class.
            </summary>
      <param name="sheet">The sheet.</param>
      <param name="index">index of the row.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Row.AutoFit">
      <summary>
            AutoFit of row height.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Row.InsertCell(System.Int32,System.Int32)">
      <summary>
            Inserts the cells.
            </summary>
      <param name="Index">The index at which cell should be inserted.</param>
      <param name="CellCount">The cell count.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Row.DeleteCell(System.Int32,System.Int32)">
      <summary>
            Deletes the cells.
            </summary>
      <param name="First">The index first cell.</param>
      <param name="Last">The index last cell.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Row.SetFontProperties(System.String,System.Boolean,System.Boolean,System.Boolean,System.Single,System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the font properties.
            </summary>
      <param name="FontName">Name of the font.</param>
      <param name="IsBold">if set to <c>true</c> [is bold].</param>
      <param name="IsItalic">if set to <c>true</c> [is italic].</param>
      <param name="IsUnderline">if set to <c>true</c> [is underline].</param>
      <param name="Size">The size.</param>
      <param name="R">The red component value for the new color of the font.</param>
      <param name="G">The green component value for the new color of the font.</param>
      <param name="B">The blue component value for the new color of the font.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Row.SetFontColorRGB(System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the color of the font from the specified 8-bit color values (red, green, and blue).
            </summary>
      <param name="r">The red component value for the new color of the font.</param>
      <param name="g">The green component value for the new color of the font.</param>
      <param name="b">The blue component value for the new color of the font.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Row.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.Height">
      <summary>
            Gets or sets the height of row.
            </summary>
      <value>The height of row, in pixel.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.HeightPnt">
      <summary>
            Gets the height  of row in points.
            </summary>
      <value>Theheight  of row in points.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.UseStandardHeight">
      <summary>
            Gets or sets a value indicating that row height equals the standard height of the sheet.
            </summary>
      <value>
        <c>true</c> if the row height equals the standard height of the sheet; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.Hidden">
      <summary>
            Gets or sets indicating that the row is hidden.
            </summary>
      <value>
        <c>true</c> if this row is hidden; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Cell" /> at the specified Index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.ColumnMin">
      <summary>
            Gets the index of the first column that contains a cell populated with data or formatting in the row. 
            </summary>
      <value>The index of the column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.ColumnMax">
      <summary>
            Gets the index of the last column that contains a cell populated with data or formatting in the row. 
            </summary>
      <value>The index of the column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.IsFormatted">
      <summary>
            Gets a bool value indicating that the row is formatted differently from the default format.
            </summary>
      <value>
        <c>true</c> if this row has non default format; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.IsNotEmptyCells">
      <summary>
            Gets a bool value indicating that the row contains only empty cells or not
            </summary>
      <value>
        <c>true</c> if this row contains not empty cells; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.Font">
      <summary>
            Sets the font.
            </summary>
      <value>The font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.FontColor">
      <summary>
            Gets or sets the color of the font.
            </summary>
      <value>The color of the font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.FontColorIndex">
      <summary>
            Gets or sets the index of the font color.
            </summary>
      <value>The index of the font color.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.FontEscapement">
      <summary>
            Gets or sets the font escapement.
            </summary>
      <value>The font escapement.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.FontUnderline">
      <summary>
            Sets the font underline style.
            </summary>
      <value>The font underline style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.CellFormat">
      <summary>
            Gets or sets the cell format
            </summary>
      <value>The cells format.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.Locked">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.Row" /> is locked or not
            </summary>
      <value>
        <c>true</c> if locked; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.HiddenFormula">
      <summary>
            Gets or sets a value indicating whether formula is hidden.
            </summary>
      <value>
        <c>true</c> if formula is hidden; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.AlignmentHorizontal">
      <summary>
            Sets the horizontal text alignment style of the row.
            </summary>
      <value>The horizontal text alignment style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.AlignmentVertical">
      <summary>
            Sets the vertical text alignment style of the row.
            </summary>
      <value>The vertical text alignment style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.Wrap">
      <summary>
            Sets a value indicating whether a text is wrapped.
            </summary>
      <value>
        <c>true</c> if a text is wrapped; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.ShrinkToFit">
      <summary>
            Gets or sets a value indicating shrink content to fit into cell.
            </summary>
      <value>
        <c>true</c> if shrink to fit; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.Rotation">
      <summary>
            Sets the text rotation angle for the row.
            </summary>
      <value>The rotation angle.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.Indent">
      <summary>
            Gets or sets the Indent value for the cell.
            </summary>
      <value>The rotation angle.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.TextDirection">
      <summary>
            Gets or sets the reading order.
            </summary>
      <value>Reading order.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.LeftBorderStyle">
      <summary>
            Sets the left border style.
            </summary>
      <value>The left border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.RightBorderStyle">
      <summary>
            Sets the right border style.
            </summary>
      <value>The right border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.TopBorderStyle">
      <summary>
            Sets the top border style.
            </summary>
      <value>The top border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.BottomBorderStyle">
      <summary>
            Sets the bottom border style.
            </summary>
      <value>The bottom border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.DiagonalBorderStyle">
      <summary>
            Gets or sets the diagonal border style.
            </summary>
      <value>The diagonal border style.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.LeftBorderColor">
      <summary>
            Sets the color of the left border.
            </summary>
      <value>The color of the left border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.RightBorderColor">
      <summary>
            Sets the color of the right border.
            </summary>
      <value>The color of the right border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.TopBorderColor">
      <summary>
            Sets the color of the top border.
            </summary>
      <value>The color of the top border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.BottomBorderColor">
      <summary>
            Sets the color of the bottom border.
            </summary>
      <value>The color of the bottom border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.DiagonalBorderColor">
      <summary>
            Gets or sets the color of the diagonal border.
            </summary>
      <value>The color of the diagonal border.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.IsDiagonalDownLine">
      <summary>
            Gets or sets a value indicating whether this instance is diagonal down line
            </summary>
      <value>
        <c>true</c> if this instance is diagonal down line; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.IsDiagonalUpLine">
      <summary>
            Gets or sets a value indicating whether this instance is diagonal up line
            </summary>
      <value>
        <c>true</c> if this instance is diagonal up line; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.FillPattern">
      <summary>
            Sets the fill pattern of the row.
            </summary>
      <value>The fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.FillPatternBackColor">
      <summary>
            Sets the background color for a fill pattern of the row.
            </summary>
      <value>The background color for a fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.FillPatternForeColor">
      <summary>
            Sets the foreground color for a fill pattern of the row.
            </summary>
      <value>The foreground color for a fill pattern.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Row.NumberFormat">
      <summary>
            Gets or sets the number format string.
            </summary>
      <value>The number format string.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Rows">
      <summary>
            The list of Row class
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Rows.min">
      <summary>
            Min row
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Rows.max">
      <summary>
            Max row
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Rows.recalcMinMax">
      <summary>
            Recalculate min and max automatically
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Rows.rows">
      <summary>
            list of rows
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Rows.#ctor(Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Rows" /> class.
            </summary>
      <param name="sheet">The sheet.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Rows.Add(System.Int32)">
      <summary>
            Adds the specified RowCount Row.
            </summary>
      <param name="RowCount">The row count.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Rows.Insert(System.Int32,System.Int32)">
      <summary>
            Inserts the specified RowCount Row into the List at the specified Index.
            </summary>
      <param name="Index">The index at which Row should be inserted.</param>
      <param name="RowCount">The row count.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Rows.Insert(System.Int32)">
      <summary>
            Inserts the Row into the List at the specified Index.
            </summary>
      <param name="Index">The index at which Row should be inserted.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Rows.Delete(System.Int32,System.Int32)">
      <summary>
            Deletes rows from First to Last indexes.
            </summary>
      <param name="First">The index first row.</param>
      <param name="Last">The index last row.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Rows.Delete(System.Int32)">
      <summary>
            Deletes the row.
            </summary>
      <param name="Index">The row index.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Rows.CopyAndPaste(System.Int32,System.Int32,System.Int32)">
      <summary>
            Makes a copy and paste of the rows selection (from First to Last) into a new position (referenced by Dest row index)
            </summary>
      <param name="First">The index of first row for copy.</param>
      <param name="Last">The index of last row for copy.</param>
      <param name="Dest">The index destination row.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Rows.Clone(Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Gets the count of rows.
            </summary>
      <value>The count of rows.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Rows.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Row" /> with the specified Index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Rows.FirstFormatedRow">
      <summary>
            Gets the number of first formated row.
            </summary>
      <value>The number of first formated row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Rows.LastFormatedRow">
      <summary>
            Gets the number of last formated row.
            </summary>
      <value>The number of last formated row.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.SpreadsheetOptions">
      <summary>
            Spreadsheet options class
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetOptions.SetExcel2003Limits">
      <summary>
            Sets Excel2003 compatible limits (string length, max column count, max row count etc)
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetOptions.SetExcel2007Limits">
      <summary>
            Sets Excel2007 compatible limits (string length, max column count, max row count etc)
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetOptions.SetOpenOffice3Limits">
      <summary>
            Sets Open Office 3 Calc compatible limits (string length, max column count, max row count etc)
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetOptions.ThrowExceptionsOnFormatIncompatibilities">
      <summary>
            Throw the exception if data can be corrupted while saving to the file or stream
            (usually this applies, for example, if you save into XLS format while spreadsheet
            contains formatting not supported by XLS format but supported by XLSX format only)
            False by default
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetOptions.ThrowExceptionsOnFormatLimits">
      <summary>
            Gets or sets a value indicating whether [throw exceptions on spreadsheet format limits].
            </summary>
      <value>
        <c>true</c> if [throw exceptions on format limits]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetOptions.ThrowExceptionOnUnsupportedFormula">
      <summary>
            Gets or sets a value indicating whether [throw exception on unsupported formula].
            </summary>
      <value>
        <c>true</c> if [throw exception on unsupported formula]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetOptions.MaxRowCountAllowed">
      <summary>
            Gets the max row count allowed for the current format limitations set (see methods .SetExcel2003Limits, .SetExcel2007Limits, .SetOpenOffice3Limits to set current limitations)
            </summary>
      <value>The max row count allowed</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetOptions.MaxColumnCountAllowed">
      <summary>
            Gets the max column count allowed for the current format limitations set (see methods .SetExcel2003Limits, .SetExcel2007Limits, .SetOpenOffice3Limits to set current limitations)
            </summary>
      <value>The max columns.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetOptions.MaxStringLengthAllowedPerCell">
      <summary>
            Gets the max string length per cell allowed for the current format limitations set (see methods .SetExcel2003Limits, .SetExcel2007Limits, .SetOpenOffice3Limits to set current limitations)
            </summary>
      <value>The max string length per cell.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.SearchOptions">
      <summary>
            Search options class
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.SearchOptions.SearchString">
      <summary>
            String to search.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.SearchOptions.CaseSensitiveSearch">
      <summary>
            Use case sensitive search.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.SearchOptions.RegexSearch">
      <summary>
            Perform regular expression search. <see cref="P:Bytescout.Spreadsheet.SearchOptions.SearchString" /> must contain a regular expression.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.SearchOptions.SearchBackwards">
      <summary>
            Perform backward search.
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Spreadsheet">
      <summary>
            Main class for read and create XLS files
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Spreadsheet" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromFile(System.String)">
      <summary>
            Load data from file.
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromFile(System.String,System.String)">
      <summary>
            Load data from file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Delimiter">Delimiter for text files.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromFile(System.String,Bytescout.Spreadsheet.CacheType)">
      <summary>
            Load data from file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Cache">Type of the cache.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromFile(System.String,Bytescout.Spreadsheet.CacheType,System.String)">
      <summary>
            Load data from file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Cache">Type of the cache.</param>
      <param name="Delimiter">Delimiter for text files.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromFile(System.String,System.String,System.Text.Encoding)">
      <summary>
            Load data from file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Delimiter">Delimiter for text files.</param>
      <param name="Encoding">The character encoding for text files.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromFile(System.String,Bytescout.Spreadsheet.CacheType,System.String,System.Text.Encoding)">
      <summary>
            Load data from file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Cache">Type of the cache.</param>
      <param name="Delimiter">Delimiter for text files.</param>
      <param name="Encoding">The character encoding for text files.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromFile(System.String,Bytescout.Spreadsheet.CacheType,System.String,System.Text.Encoding,System.String)">
      <summary>
            Load data from file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Cache">Type of the cache.</param>
      <param name="Delimiter">Delimiter for text files.</param>
      <param name="Encoding">The character encoding for text files.</param>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromStream(System.IO.Stream)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromStream(System.IO.Stream,Bytescout.Spreadsheet.CacheType)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
      <param name="Cache">Type of the cache.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromStream(System.IO.Stream,Bytescout.Spreadsheet.CacheType,System.String)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
      <param name="Cache">Type of the cache.</param>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromStream(System.IO.Stream,Bytescout.Spreadsheet.Constants.SpreadsheetFormatType)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
      <param name="SType">Type of the stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromStream(System.IO.Stream,Bytescout.Spreadsheet.Constants.SpreadsheetFormatType,Bytescout.Spreadsheet.CacheType)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
      <param name="SType">Type of the stream.</param>
      <param name="Cache">Type of the cache.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromStream(System.IO.Stream,Bytescout.Spreadsheet.Constants.SpreadsheetFormatType,System.String,System.Text.Encoding)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
      <param name="SType">Type of the stream.</param>
      <param name="Delimiter">Delimiter for text files.</param>
      <param name="Encoding">The character encoding for text files.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromStream(System.IO.Stream,Bytescout.Spreadsheet.Constants.SpreadsheetFormatType,Bytescout.Spreadsheet.CacheType,System.String,System.Text.Encoding)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
      <param name="SType">Type of the stream.</param>
      <param name="Cache">Type of the cache.</param>
      <param name="Delimiter">Delimiter for text files.</param>
      <param name="Encoding">The character encoding for text files.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.LoadFromStream(System.IO.Stream,Bytescout.Spreadsheet.Constants.SpreadsheetFormatType,Bytescout.Spreadsheet.CacheType,System.String,System.Text.Encoding,System.String)">
      <summary>
            Load data from stream.
            </summary>
      <param name="AStream">The stream.</param>
      <param name="SType">Type of the stream.</param>
      <param name="Cache">Type of the cache.</param>
      <param name="Delimiter">Delimiter for text files.</param>
      <param name="Encoding">The character encoding for text files.</param>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveAsXLS(System.String)">
      <summary>
            Saves data in XLS file with specified name
            </summary>
      <param name="FileName">Name of the file to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveAsXML(System.String)">
      <summary>
            Saves data in XML file with specified name
            </summary>
      <param name="FileName">Name of the file to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveAsCSV(System.String,System.String)">
      <summary>
            Saves data in CSV file with specified name
            </summary>
      <param name="FileName">Name of the file to save to.</param>
      <param name="Delimiter">Delimiter string.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveAsCSV(System.String)">
      <summary>
            Saves data in CSV file with specified name
            </summary>
      <param name="FileName">Name of the file to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveAsTXT(System.String,System.String)">
      <summary>
            Saves data in TXT tab delimited file with specified name
            </summary>
      <param name="FileName">Name of the file to save to.</param>
      <param name="Delimiter">Delimiter character string.</param>/// 
        </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveAsTXT(System.String)">
      <summary>
            Saves data in TXT tab delimited file with specified name
            </summary>
      <param name="FileName">Name of the file to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveAsHTML(System.String)">
      <summary>
            Saves spreadsheet in a HTML format file. 
            The second and subsequent worksheets of the spreadsheet will be saved 
            in separate files with auto-generated names.
            </summary>
      <param name="fileName">Name of the file.</param>
      <returns>List of generated HTML files.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveAsHTML(System.String,System.Boolean)">
      <summary>
            Saves spreadsheet in a HTML format file. 
            The second and subsequent worksheets of the spreadsheet will be saved 
            in separate files with auto-generated names.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="createNavigationLinks">If true, the method will create links for navigation between generated HTML files.</param>
      <returns>List of generated HTML files.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveAsPDF(System.String)">
      <summary>
            Saves spreadsheet to PDF file with specified name.
            </summary>
      <param name="FileName">Name of the file to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveAsPDF(System.String,System.Boolean)">
      <summary>
             Saves spreadsheet to PDF file with specified name.
             </summary>
      <param name="FileName">Name of the file to save to.</param>
      <param name="autoSize">Automatic document sizing. If <c>false</c>, the page size wiil be taken from worksheet page setup.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveAsXLSX(System.String)">
      <summary>
            Saves data in XLSX format to a file with specified name
            </summary>
      <param name="FileName">Name of the file to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveAsXLSX(System.String,System.String)">
      <summary>
            Saves data in XLSX format to a file with specified name
            </summary>
      <param name="FileName">Name of the file to save to.</param>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveAs(System.String,Bytescout.Spreadsheet.Constants.SpreadsheetFormatType)">
      <summary>
            Saves data in XLS or XLSX file FileName
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="SType">The format in which save a file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveAs(System.String)">
      <summary>
            Saves data in XLS or XLSX file FileName
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveToStreamXLS(System.IO.Stream)">
      <summary>
            Saves data in XLS format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveToStreamXLSX(System.IO.Stream)">
      <summary>
            Saves data in XLSX format to a given stream
            </summary>
      <param name="stream">Stream to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveToStreamXLSX(System.IO.Stream,System.String)">
      <summary>
            Saves data in XLSX format to a given stream
            </summary>
      <param name="stream">Stream to save to.</param>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveToStreamXML(System.IO.Stream)">
      <summary>
            Saves data in XML format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveToStreamHTML(System.IO.Stream)">
      <summary>
            Saves first worksheet of spreadsheet as HTML document to a given stream.
            </summary>
      <param name="stream">The stream to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveToStreamHTML(System.IO.Stream,System.Int32)">
      <summary>
            Saves a worksheet of spreadsheet as HTML document to a given stream.
            </summary>
      <param name="stream">The stream to save to.</param>
      <param name="sheet">The worksheet to save.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveToStreamCSV(System.IO.Stream,System.String)">
      <summary>
            Saves data in CSV format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
      <param name="Delimiter">Delimiter string.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveToStreamCSV(System.IO.Stream)">
      <summary>
            Saves data in CSV format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveToStreamTXT(System.IO.Stream,System.String)">
      <summary>
            Saves data in TXT format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
      <param name="Delimiter">Delimiter character string.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveToStreamTXT(System.IO.Stream)">
      <summary>
            Saves data in TXT format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveToStream(System.IO.Stream)">
      <summary>
            Saves data in XLS format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.SaveToStream(System.IO.Stream,Bytescout.Spreadsheet.Constants.SpreadsheetFormatType)">
      <summary>
            Saves data in XLS or XLSX format to a given stream
            </summary>
      <param name="AStream">Stream to save to.</param>
      <param name="SType">The format in which saves data.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.GetAsBytesArray(Bytescout.Spreadsheet.Constants.SpreadsheetFormatType)">
      <summary>
            Gets the bytes of spreadsheet saved as document with specified type.
            </summary>
      <param name="type">The type to use while retrieving bytes.</param>
      <returns>The bytes of spreadsheet saved as document with specified type.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.GetAsBytesArrayXLS">
      <summary>
            Gets the bytes of spreadsheet saved as XLS document.
            </summary>
      <returns>The bytes of spreadsheet saved as XLS document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.GetAsBytesArrayXLSX">
      <summary>
            Gets the bytes of spreadsheet saved as XLSX document.
            </summary>
      <returns>The bytes of spreadsheet saved as XLSX document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.GetAsBytesArrayCSV">
      <summary>
            Gets the bytes of spreadsheet saved as CSV document.
            </summary>
      <returns>The bytes of spreadsheet saved as CSV document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.GetAsBytesArrayTXT">
      <summary>
            Gets the bytes of spreadsheet saved as text document.
            </summary>
      <returns>The bytes of spreadsheet saved as text document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.GetAsBytesArrayXML">
      <summary>
            Gets the bytes of spreadsheet saved as XML document.
            </summary>
      <returns>The bytes of spreadsheet saved as XML document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.GetAsBytesArrayHTML">
      <summary>
            Gets the bytes of spreadsheet saved as HTML document.
            </summary>
      <returns>The bytes of spreadsheet saved as HTML document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.GetAsBytesArrayHTML(System.Int32)">
      <summary>
            Gets the bytes of specified worksheet page saved as HTML document.
            </summary>
      <param name="worksheetIndex">Worksheet index.</param>
      <returns>The bytes of specified worksheet page saved as HTML document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFromList(System.Collections.IList)">
      <summary>
            Import from IList of rows. Each row will contain IList of columns.
            </summary>
      <param name="list">List of rows. Each row should contain an IList of columns</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFromList(System.Collections.IList,System.Int32)">
      <summary>
            Import from IList of rows to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFromList(System.Collections.IList,System.String)">
      <summary>
            Import from IList of rows to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ExportToList(System.Collections.IList)">
      <summary>
            Export rows to provided IList. Each row is String[] array of column values.
            </summary>
      <param name="list">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ExportToList(System.Collections.IList,System.String)">
      <summary>
            Export the named worksheet to the list
            </summary>
      <param name="list">List must be a 2 dimensional string array</param>
      <param name="worksheetName">Name of worksheet to export</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ExportToList(System.Collections.IList,System.Int32)">
      <summary>
            Export the worksheet specified by index to the list
            </summary>
      <param name="list">List must be a 2 dimensional string array</param>
      <param name="worksheetIndex">Index of worksheet to export</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFromJaggedArray(System.String[][])">
      <summary>
            Import from jagged array.
            </summary>
      <param name="array">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFromJaggedArray(System.String[][],System.Int32)">
      <summary>
            Import from jagged array to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFromJaggedArray(System.String[][],System.String)">
      <summary>
            Import from jagged array to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ExportToJaggedArray">
      <summary>
            Return spreadsheet rows and columns as jagged array 
            </summary>
      <returns>A jagged array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ExportToJaggedArray(System.String)">
      <summary>
            Return the cells in the named workedsheet as a jagged array 
            </summary>
      <param name="worksheetName">Name of worksheet to export</param>
      <returns>A jagged array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ExportToJaggedArray(System.Int32)">
      <summary>
            Return the cells in the specified workedsheet as a jagged array 
            </summary>
      <param name="worksheetIndex">Index of worksheet to export</param>
      <returns>A jagged array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFrom2DArray(System.String[0:,0:])">
      <summary>
            Import from two-dimensional array. 
            </summary>
      <param name="array">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFrom2DArray(System.String[0:,0:],System.Int32)">
      <summary>
            Import from two-dimensional array to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFrom2DArray(System.String[0:,0:],System.String)">
      <summary>
            Import from two-dimensional array to the specified worksheet
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ExportTo2DArray">
      <summary>
            Return spreadsheet rows and columns as two-dimensional array; 
            </summary>
      <returns>Two dimensional array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ExportTo2DArray(System.String)">
      <summary>
            Return spreadsheet rows and columns as two-dimensional array; 
            </summary>
      <param name="worksheetName">Name of worksheet to export</param>
      <returns>Two dimensional array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ExportTo2DArray(System.Int32)">
      <summary>
            Return spreadsheet rows and columns as two-dimensional array; 
            </summary>
      <param name="worksheetIndex">Index of worksheet to export</param>
      <returns>Two dimensional array</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFromDataTable(System.Data.DataTable)">
      <summary>
            Fills the spreasheet with rows and columns from specified DataTable.
            </summary>
      <param name="dataTable">The data table.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFromDataTable(System.Data.DataTable,System.UInt32)">
      <summary>
            Fills the spreasheet with rows and columns from specified DataTable. The method will automatically create new worksheet if table row count exceeds specified row limit.
            </summary>
      <param name="dataTable">The data table.</param>
      <param name="rowLimit">Worksheet row limit.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFromDataTable(System.Data.DataTable,System.String)">
      <summary>
            Import rows and columns from DataTable to specified worksheet.
            </summary>
      <param name="dataTable">
      </param>
      <param name="worksheetName">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFromDataTable(System.Data.DataTable,System.Int32)">
      <summary>
            Import rows and columns from DataTable to specified worksheet.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ExportToDataTable">
      <summary>
            Return new DataTable object filled from first worksheet.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ExportToDataTable(System.Int32)">
      <summary>
            Return new DataTable object filled from specified worksheet.
            </summary>
      <param name="worksheetIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ExportToDataTable(System.String)">
      <summary>
            Return new DataTable object filled from specified worksheet.
            </summary>
      <param name="worksheetName">Name of worksheet to export</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFromDataSet(System.Data.DataSet)">
      <summary>
            Fills the spreasheet with rows and columns from tables of specified DataSet.
            </summary>
      <param name="dataSet">The data set.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ImportFromDataSet(System.Data.DataSet,System.UInt32)">
      <summary>
            Fills the spreasheet with rows and columns from tables of specified DataSet. The method will automatically create new worksheet if table row count exceeds specified row limit.
            </summary>
      <param name="dataSet">The data set.</param>
      <param name="rowLimit">Worksheet row limit.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ExportToDataSet(System.Data.DataSet)">
      <summary>
            Fill provided DataSet with DataTables created from spreedsheet's worksheets.
            </summary>
      <param name="dataSet">
      </param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.ExportToDataSet">
      <summary>
            Return new DataSet filled from spreadsheet. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.Worksheet(System.Int32)">
      <summary>
            Return Worksheet the specified index.
            </summary>
      <param name="Index">The index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.Finalize">
      <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Bytescout.Spreadsheet.Spreadsheet" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Spreadsheet.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Spreadsheet.RegistrationName">
      <summary>
            Sets the name of the registration.
            </summary>
      <value>The name of the registration.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Spreadsheet.RegistrationKey">
      <summary>
            Sets the registration key.
            </summary>
      <value>The registration key.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Spreadsheet.UserName">
      <summary>
            Gets or sets the name of the user.
            </summary>
      <value>The name of the user.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Spreadsheet.Options">
      <summary>
            Gets the options.
            </summary>
      <value>The options.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Spreadsheet.SearchOptions">
      <summary>
            Gets the search options.
            </summary>
      <value>The search options.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Spreadsheet.Workbook">
      <summary>
            Gets or sets the Workbook.
            </summary>
      <value>The WorkBook.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Spreadsheet.Worksheets">
      <summary>
            Gets or sets the Worksheets.
            </summary>
      <value>The Worksheets collection.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Spreadsheet.Cache">
      <summary>
            Sets the cache type.
            </summary>
      <value>The cache type.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Spreadsheet.OptimizeMemoryUsageOnSave">
      <summary>
            Gets or sets a value indicating whether [optimize memory usage on save].
            </summary>
      <value>
        <c>true</c> if [optimize memory usage on save]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Bytescout.Spreadsheet.SpreadsheetFont">
      <summary>
            Spreadsheet font class 
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetFont.#ctor(System.String,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> class.
            </summary>
      <param name="FontName">Name of the font.</param>
      <param name="Size">The size.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetFont.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.Color,Bytescout.Spreadsheet.Constants.FontEscapementType,Bytescout.Spreadsheet.Constants.FontUnderlineStyle,System.Byte)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> class.
            </summary>
      <param name="FontName">Name of the font.</param>
      <param name="Size">The size.</param>
      <param name="Style">The style.</param>
      <param name="color">The color.</param>
      <param name="Escapement">The escapement.</param>
      <param name="Underline">The underline.</param>
      <param name="CharSet">The char set.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetFont.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetFont.op_Equality(Bytescout.Spreadsheet.SpreadsheetFont,Bytescout.Spreadsheet.SpreadsheetFont)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetFont.op_Inequality(Bytescout.Spreadsheet.SpreadsheetFont,Bytescout.Spreadsheet.SpreadsheetFont)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetFont.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
      <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
      <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetFont.Equals(Bytescout.Spreadsheet.SpreadsheetFont)">
      <summary>
            Equalses the specified SpreadsheetFont.
            </summary>
      <param name="font">The SpreadsheetFont.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetFont.Finalize">
      <summary>
            Destructor
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetFont.Dispose">
      <summary>
            Disposes the object
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.SpreadsheetFont.Dispose(System.Boolean)">
      <summary>
            Disposes the object
            </summary>
      <param name="disposeManagedResources">dispose managed resources</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetFont.Font">
      <summary>
            Gets the font.
            </summary>
      <value>The font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetFont.Height">
      <summary>
            Gets the height.
            </summary>
      <value>The height.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetFont.Italic">
      <summary>
            Gets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> is italic.
            </summary>
      <value>
        <c>true</c> if italic; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetFont.StruckOut">
      <summary>
            Gets a value indicating whether [struck out].
            </summary>
      <value>
        <c>true</c> if [struck out]; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetFont.FontColor">
      <summary>
            Gets the color of the font.
            </summary>
      <value>The color of the font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetFont.Bold">
      <summary>
            Gets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.SpreadsheetFont" /> is bold.
            </summary>
      <value>
        <c>true</c> if bold; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetFont.Escapement">
      <summary>
            Gets the escapement.
            </summary>
      <value>The escapement.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetFont.Underline">
      <summary>
            Gets the underline.
            </summary>
      <value>The underline.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetFont.CharacterSet">
      <summary>
            Gets the character set.
            </summary>
      <value>The character set.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetFont.FontName">
      <summary>
            Gets the name of the font.
            </summary>
      <value>The name of the font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.SpreadsheetFont.Style">
      <summary>
            Gets the style.
            </summary>
      <value>The style.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Structures.CellsRange">
      <summary>
            A structure that specifies a range of cells on the sheet.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> struct.
            </summary>
      <param name="firstRow">The first row.</param>
      <param name="lastRow">The last row.</param>
      <param name="firstColumn">The first column.</param>
      <param name="lastColumn">The last column.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> struct.
            </summary>
      <param name="A1Ref">The A1 style reference.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange.#ctor(System.Byte[],System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange" /> struct.
            
            Please take a look at:
                [MS-XLS], 2.5.209 Ref8U
            </summary>
      <param name="bytes">The array of bytes.</param>
      <param name="offset">The offset.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange.ToRef8UArray">
      <summary>
            Return the array of bytes.
            
            Please take a look at:
                [MS-XLS], 2.5.209 Ref8U
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange.ToRefUArray">
      <summary>
            Return the array of bytes.
            
            Please take a look at:
                [MS-XLS], 2.5.211 RefU
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange.op_Equality(Bytescout.Spreadsheet.Structures.CellsRange,Bytescout.Spreadsheet.Structures.CellsRange)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange.op_Inequality(Bytescout.Spreadsheet.Structures.CellsRange,Bytescout.Spreadsheet.Structures.CellsRange)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Bytescout.Spreadsheet.Structures.CellsRange.FirstRow">
      <summary>
            First row index
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Structures.CellsRange.LastRow">
      <summary>
            Last row index
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Structures.CellsRange.FirstColumn">
      <summary>
            First column index
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Structures.CellsRange.LastColumn">
      <summary>
            Last column index
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Structures.CellsRange3d">
      <summary>
            A structure that specifies a range of cells on the sheet.
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Structures.CellsRange3d.FirstSheet">
      <summary>
            First sheet index
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Structures.CellsRange3d.LastSheet">
      <summary>
            Last sheet index
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Structures.CellsRange3d.CellsRange">
      <summary>
            Range of cells
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange3d.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange3d" /> struct.
            </summary>
      <param name="firstSheet">The first sheet.</param>
      <param name="lastSheet">The last sheet.</param>
      <param name="firstRow">The first row.</param>
      <param name="lastRow">The last row.</param>
      <param name="firstColumn">The first column.</param>
      <param name="lastColumn">The last column.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange3d.#ctor(System.Int32,System.Int32,Bytescout.Spreadsheet.Structures.CellsRange)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Structures.CellsRange3d" /> struct.
            </summary>
      <param name="firstSheet">The first sheet.</param>
      <param name="lastSheet">The last sheet.</param>
      <param name="cellsRange">The cells range.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange3d.op_Equality(Bytescout.Spreadsheet.Structures.CellsRange3d,Bytescout.Spreadsheet.Structures.CellsRange3d)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange3d.op_Inequality(Bytescout.Spreadsheet.Structures.CellsRange3d,Bytescout.Spreadsheet.Structures.CellsRange3d)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange3d.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange3d.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Structures.CellsRange3d.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:Bytescout.Spreadsheet.Structures.DEVMODE">
      <summary>
            The DEVMODE data structure contains information about the initialization
            and environment of a printer or a display device. 
            Please take a look at:
                http://msdn.microsoft.com/ru-ru/library/dd183565(vs.85).aspx
                [MS-RPRN] 2.2.1.1.1 DEVMODE
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Structures.FrtHeader">
      <summary>
            This structure specifies a future record type header.
            
            Please take a look at:
                Excel Binary File Format (.xls) Structure Specification,
                    2.5.135 FrtHeader.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Structures.FrtHeader.FrtRef">
      <summary>
            Gets a value that specifies whether the containing record specifies a range of cells.
            </summary>
      <value>
        <c>true</c> if the containing record specifies a range of cells; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Structures.FrtHeader.FrtAlert">
      <summary>
            Gets a value that specifies whether to alert the user of possible problems
            when saving the file without having recognized this record.
            </summary>
      <value>
        <c>true</c> if [FRT alert]; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Structures.LongRGB">
      <summary>
            The LongRGB structure specifies a color as a combination of red, green, and blue.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.5.177 LongRGB
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Structures.MOper">
      <summary>
            This structure specifies multiple operands of an OLE link or a DDE link for the ExternOleDdeLink structure.
            
            Please take a look at:
                Excel Binary File Format (.xls) Structure Specification,
                    2.5.183 MOper.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Structures.MOper.colLast">
      <summary>
            Gets the zero-based index of last column associated with the link.
            </summary>
      <value>The index of last column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Structures.MOper.rowLast">
      <summary>
            Gets the zero-based index of last row associated with the link.
            </summary>
      <value>The index of last row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Structures.MOper.extOper">
      <summary>
            Gets the array specifies current values for the linked data.
            </summary>
      <value>The array of values.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Structures.PaneTypes">
      <summary>
            The enumeration specifies the different types of panes.
            Please take a look at:
                Open XML spec, 18.18.52 ST_Pane (Pane Types)
                [MS-XLS] 2.5.196 PaneType
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Structures.PaneTypes.bottomRight">
      <summary>
            Logical bottom-right pane
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Structures.PaneTypes.topRight">
      <summary>
            Logical top-right pane
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Structures.PaneTypes.bottomLeft">
      <summary>
            Logical bottom-left pane
            </summary>
    </member>
    <member name="F:Bytescout.Spreadsheet.Structures.PaneTypes.topLeft">
      <summary>
            Logical top-left pane
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Structures.XTI">
      <summary>
            The XTI structure specifies a supporting link and
            scope information about that supporting link.
            
            Please take a look at:
                Excel Binary File Format Specification, 2.5.344 XTI
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Workbook">
      <summary>
            Workbook class
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Workbook.#ctor(Bytescout.Spreadsheet.Spreadsheet)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Workbook" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Workbook.getFontWidth">
      <summary>
            Gets the maximum width of the numbers 0, 1, 2, … 9, in pixels.
            </summary>
      <returns>Еhe maximum width of the numbers, in pixels</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Workbook.RemovePassword">
      <summary>
            Removes the password.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Workbook.Protect(System.String,System.Boolean,System.Boolean)">
      <summary>
            Protects the workbook.
            </summary>
      <param name="Password">The password.</param>
      <param name="Structure">True to protect the structure of the workbook.</param>
      <param name="Windows">True to protect the workbook windows.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Workbook.UnProtect(System.String)">
      <summary>
            Removes protection from the workbook.
            </summary>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Workbook.ProtectFromModifications(System.String)">
      <summary>
            Protects the workbook from modifications (read only recommended).
            </summary>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Workbook.Calculate">
      <summary>
            Calculates the all formulas in the Workbook.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.Properties">
      <summary>
            Workbook properties 
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.DocumentProperties">
      <summary>
            Document Properties
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.Worksheets">
      <summary>
            Gets the worksheets.
            </summary>
      <value>The worksheets.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.Charts">
      <summary>
            Gets the charts.
            </summary>
      <value>The charts.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.DefaultFont">
      <summary>
            Gets or sets the workbook default font.
            </summary>
      <value>The default font.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.Locale">
      <summary>
            Gets or sets the CultureInfo using in Workbook. This property 
            should be used to set the locale (regional) settings for use in 
            the new workbook (number, currency, time, date formatting). When 
            you load existing spreadsheet then the SDK tries to use the saved 
            locale settings for this file disregarding current Windows regional 
            and language settings. When new workbook is created then the current 
            Windows locale is used by default.
            </summary>
      <value>The locale.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.AddInFunctionsNamesLocale">
      <summary>
            Gets or sets the add in functions names locale.
            </summary>
      <value>The add in functions names locale.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.RangeSelectionMethod">
      <summary>
            Gets or sets the range selection method.
            </summary>
      <value>The range selection method.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.ExternalReferenceUpdate">
      <summary>
            Gets or sets a value indicating whether external reference should be updated or not.
            </summary>
      <value>
        <c>true</c> if external reference update; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.AutoCalculation">
      <summary>
            Gets or sets a value indicating if formula should be re-calculated automatically on change of cells value.
            </summary>
      <value>
        <c>true</c> if calculate formulas automatically; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.Password">
      <summary>
            Sets the password to use for encryption file.
            </summary>
      <value>The password.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.EncryptionType">
      <summary>
            Gets or sets the type of the encryption.
            </summary>
      <value>The type of the encryption.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.EncryptionKeyLength">
      <summary>
            Gets or sets value that specifies the number of bits in the encryption key. Must be a multiple of 8.
            </summary>
      <value>The length of the encryption key.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.ProtectStructure">
      <summary>
            Gets or sets a value indicating whether the order of the sheets in the workbook is protected.
            </summary>
      <value>
        <c>true</c> if the order of the sheets in the workbook is protected; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.ProtectWindows">
      <summary>
            Gets or sets a value indicating whether the windows of the workbook are protected.
            </summary>
      <value>
        <c>true</c> if the windows of the workbook are protected; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.ReadOnlyRecommended">
      <summary>
            Gets or sets a value indicating whether the workbook is read only recommended.
            </summary>
      <value>
        <c>true</c> if read only recommended; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.Colors">
      <summary>
            Gets the colors in the user-defined palette. The palette has 56 entries.
            </summary>
      <value>The colors.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Workbook.Names">
      <summary>
            Gets collection of the <see cref="T:Bytescout.Spreadsheet.DefinedName" /> objects.
            </summary>
      <value>The names.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.WorkbookView">
      <summary>
            Specifies attributes of a window used to display a sheets.
            
            Please take a look at:
                Open XML spec(ECMA-376), 18.2.30 workbookView (Workbook View)
                [MS-XLS] 2.4.345 Window1
            </summary>
    </member>
    <member name="T:Bytescout.Spreadsheet.Worksheet">
      <summary>
            Worksheet class 
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.#ctor(System.String,Bytescout.Spreadsheet.Workbook)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Worksheet" /> class.
            </summary>
      <param name="sheetname">The name of worksheet.</param>
      <param name="Workbook">Parent workbook of the worksheet.</param>/// 
        </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.#ctor(Bytescout.Spreadsheet.Records.XlsBiffBoundSheet,Bytescout.Spreadsheet.Workbook)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Worksheet" /> class.
            </summary>
      <param name="BoundSheet">The BoundSheet record.</param>
      <param name="Workbook">The workbook.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.Protect(System.String)">
      <summary>
            Protects this <see cref="T:Bytescout.Spreadsheet.Worksheet" /> with the password specified.
            </summary>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.Protect(System.String,Bytescout.Spreadsheet.Constants.EnhancedSheetProtection)">
      <summary>
            Protects this <see cref="T:Bytescout.Spreadsheet.Worksheet" /> with specified password and options.
            </summary>
      <param name="Password">The password.</param>
      <param name="Options">The <see cref="T:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection" /> options.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.UnProtect(System.String)">
      <summary>
            UnProtects this <see cref="T:Bytescout.Spreadsheet.Worksheet" /> with the password.
            </summary>
      <param name="Password">The password.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.Cell(System.Int32,System.Int32)">
      <summary>
            Return cell the specified i and j.
            </summary>
      <param name="row">The index of row.</param>
      <param name="col">The index of column.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.Cell(System.String)">
      <summary>
            Return cell the specified by A1-style reference.
            </summary>
      <param name="A1Ref">The A1-style reference.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.Range(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Return cell range from the specified cell at (row1, col1) as upper-left cell and cell at (row2, col1) are the lower-right cell for this rectangle based range selection
            </summary>
      <param name="row1">The upper row of the range.</param>
      <param name="col1">The left col of the range.</param>
      <param name="row2">The lower row of the range.</param>
      <param name="col2">The right col of the range.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.Range(System.String)">
      <summary>
            Return cell range the specified by A1-style reference.
            </summary>
      <param name="A1Ref">The A1-style reference.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsTXT(System.IO.Stream)">
      <summary>
            Saves worksheet in a tab-delimited text file
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsTXT(System.IO.Stream,System.String)">
      <summary>
            Saves worksheet in a text format
            </summary>
      <param name="stream">The stream.</param>
      <param name="Delimiter">Delimiter of values.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsTXT(System.IO.Stream,System.String,System.String)">
      <summary>
            Saves worksheet in a text format.
            </summary>
      <param name="stream">The stream.</param>
      <param name="Delimiter">The delimiter symbol.</param>
      <param name="QuoteSymbol">The quotation symbol.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsTXT(System.IO.Stream,Bytescout.Spreadsheet.ConversionOptions)">
      <summary>
            Saves worksheet in a text format.
            </summary>
      <param name="stream">The stream.</param>
      <param name="options">The format options.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsTXT(System.String)">
      <summary>
            Saves worksheet in a tab-delimited text file
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsTXT(System.String,System.String)">
      <summary>
            Saves worksheet in a text file format
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Delimiter">Delimiter of values.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsTXT(System.String,System.String,System.String)">
      <summary>
            Saves worksheet in a text format.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Delimiter">The delimiter symbol.</param>
      <param name="QuoteSymbol">The quotation symbol.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsTXT(System.String,Bytescout.Spreadsheet.ConversionOptions)">
      <summary>
            Saves worksheet in a text format.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="options">The format options.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsCSV(System.IO.Stream)">
      <summary>
            Saves worksheet in a CSV format file
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsCSV(System.IO.Stream,System.String)">
      <summary>
            Saves worksheet in a CSV format file
            </summary>
      <param name="stream">The stream.</param>
      <param name="Delimiter">Delimiter of values.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsCSV(System.IO.Stream,System.String,System.String)">
      <summary>
            Saves worksheet in a CSV format file
            </summary>
      <param name="stream">The stream.</param>
      <param name="Delimiter">Delimiter symbol.</param>
      <param name="Quote">Quotation symbol.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsCSV(System.IO.Stream,Bytescout.Spreadsheet.ConversionOptions)">
      <summary>
            Saves worksheet in a CSV format file
            </summary>
      <param name="stream">The stream.</param>
      <param name="options">The format options.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsCSV(System.String)">
      <summary>
            Saves worksheet in a CSV format file
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsCSV(System.String,System.String)">
      <summary>
            Saves worksheet in a CSV format file
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Delimiter">Delimiter of values.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsCSV(System.String,System.String,System.String)">
      <summary>
            Saves worksheet in a CSV format file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="Delimiter">Delimiter symbol.</param>
      <param name="Quote">Quotation symbol.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsCSV(System.String,Bytescout.Spreadsheet.ConversionOptions)">
      <summary>
            Saves worksheet in a CSV format file.
            </summary>
      <param name="FileName">Name of the file.</param>
      <param name="options">The format options.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsHTML(System.IO.Stream)">
      <summary>
            Saves worksheet in a HTML format file.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsHTML(System.IO.StreamWriter)">
      <summary>
            Saves worksheet in a HTML format file. Use this overload to specify the encoding for output HTML file. 
            Create StreamWriter instance with required encoding in constructor parameters.
            </summary>
      <param name="streamWriter">The stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsHTML(System.String)">
      <summary>
            Saves worksheet in a HTML format file.
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsXML(System.IO.Stream)">
      <summary>
            Saves worksheet in a XML format file
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsXML(System.String)">
      <summary>
            Saves worksheet in a XML format file
            </summary>
      <param name="FileName">Name of the file.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.GetAsBytesArrayCSV">
      <summary>
            Gets the bytes of worksheet saved as CSV document.
            </summary>
      <returns>The bytes of worksheet saved as CSV document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.GetAsBytesArrayTXT">
      <summary>
            Gets the bytes of worksheet saved as text document.
            </summary>
      <returns>The bytes of worksheet saved as text document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.GetAsBytesArrayXML">
      <summary>
            Gets the bytes of worksheet saved as XML document.
            </summary>
      <returns>The bytes of worksheet saved as XML document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.GetAsBytesArrayHTML">
      <summary>
            Gets the bytes of worksheet saved as HTML document.
            </summary>
      <returns>The bytes of worksheet saved as HTML document.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.Find(System.String,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Finds the specified search string on the worksheet.
            </summary>
      <param name="searchString">Search string.</param>
      <param name="caseSensitive">Use case sensitive search.</param>
      <param name="useRegularExpressions">The search string contains a regular expression.</param>
      <param name="searchBackwards">Perform backward search.</param>
      <returns>A cell containing the search string.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.Find">
      <summary>
            Finds the specified search string on the worksheet. Specify the search
            options using <see cref="P:Bytescout.Spreadsheet.Spreadsheet.SearchOptions" /> property.
            </summary>
      <returns>A cell containing the search string.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.FindNext">
      <summary>
            Finds next occurrence of the search string on the worksheet. You should
            initialize the search with the Find() method.
            </summary>
      <returns>A cell containing the search string or <see langword="null" />
            if the string is not found.</returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.Calculate">
      <summary>
            Calculates the formulas in the Worksheet.
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsPDF(System.String)">
      <summary>
             Saves worksheet to PDF file with specified name.
            </summary>
      <param name="fileName">Output PDF file name.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsPDF(System.String,System.Boolean)">
      <summary>
             Saves worksheet to PDF file with specified name.
            </summary>
      <param name="fileName">Output PDF file name.</param>
      <param name="autoSize">Automatic document sizing. If <c>false</c>, the page size wiil be taken from worksheet page setup.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsPDF(System.IO.Stream)">
      <summary>
             Saves worksheet to PDF file with specified name.
            </summary>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheet.SaveAsPDF(System.IO.Stream,System.Boolean)">
      <summary>
             Saves worksheet to PDF file with specified name.
            </summary>
      <param name="stream">Output stream.</param>
      <param name="autoSize">Automatic document sizing. If <c>false</c>, the page size wiil be taken from worksheet page setup.</param>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.Name">
      <summary>
            Gets or sets Worksheet name
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.Active">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.Worksheet" /> is active.
            </summary>
      <value>
        <c>true</c> if active; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.Protected">
      <summary>
            Gets a value indicating whether this <see cref="T:Bytescout.Spreadsheet.Worksheet" /> is protected against modification.
            </summary>
      <value>
        <c>true</c> if protected; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.ProtectionOptions">
      <summary>
            Gets the option flags for sheet protection.
            </summary>
      <value>The <see cref="T:Bytescout.Spreadsheet.Constants.EnhancedSheetProtection" /> options.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.DefaultColumnWidth">
      <summary>
            Gets or sets the default width of the column in 1/256 of the width of the zero character, using default font.
            </summary>
      <value>The width of the default column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.IsEmpty">
      <summary>
            Gets a value indicating whether worksheet is empty.
            </summary>
      <value>
        <c>true</c> if this worksheet is empty; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.UsedRangeRowMin">
      <summary>
            Gets the first used row.
            </summary>
      <value>The first used row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.UsedRangeRowMax">
      <summary>
            Gets the last used row.
            </summary>
      <value>The last used row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.UsedRangeColumnMin">
      <summary>
            Gets the first used column.
            </summary>
      <value>The first used column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.UsedRangeColumnMax">
      <summary>
            Gets the last used column.
            </summary>
      <value>The last used column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.NotEmptyRowMin">
      <summary>
            Gets the first row contains not empty cell.
            </summary>
      <value>The first not empty row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.NotEmptyRowMax">
      <summary>
            Gets the last row contains not empty cell.
            </summary>
      <value>The last not empty row.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.NotEmptyColumnMin">
      <summary>
            Gets the first column contains not empty cell.
            </summary>
      <value>The first not empty column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.NotEmptyColumnMax">
      <summary>
            Gets the last column contains not empty cell.
            </summary>
      <value>The last not empty column.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.Rows">
      <summary>
            Gets the list of rows.
            </summary>
      <value>The list of rows.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.Columns">
      <summary>
            Gets the list of columns.
            </summary>
      <value>The list of columns.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.Item(System.Int32,System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Cell" /> with the specified row and col.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.Item(System.String)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Cell" /> with the specified by A1-style reference.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.ViewOptions">
      <summary>
            Gets the view optionsfor the worksheet.
            </summary>
      <value>The view options.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.Pictures">
      <summary>
            Gets the pictures.
            </summary>
      <value>The pictures.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.Charts">
      <summary>
            Gets the charts.
            </summary>
      <value>The charts.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.Hyperlinks">
      <summary>
            Returns a <see cref="T:Bytescout.Spreadsheet.HyperLinks" /> collection that represents the hyperlinks for the worksheet.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.BackgroundPicture">
      <summary>
            Gets or sets the sheet background picture.
            </summary>
      <value>The background picture.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.Visible">
      <summary>
            Gets or sets the visible state of the sheet.
            </summary>
      <value>The visible.</value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheet.PageSetup">
      <summary>
            Gets or sets the page setup.
            </summary>
      <value>The page setup.</value>
    </member>
    <member name="T:Bytescout.Spreadsheet.Worksheets">
      <summary>
            The list of WorkSheet class 
            </summary>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.#ctor(Bytescout.Spreadsheet.Workbook)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Spreadsheet.Worksheets" /> class.
            </summary>
      <param name="Workbook">The workbook.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.ByName(System.String)">
      <summary>
            Get Worksheet by name.
            </summary>
      <param name="Name">The name of Worksheet.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.IndexOf(System.String)">
      <summary>
            Returns the index of worksheet on her name
            </summary>
      <param name="Name">The name of <see cref="T:Bytescout.Spreadsheet.Worksheet" /> object in the list.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.CheckName(System.String)">
      <summary>
            Check that the worksheet name doesn't already exist.
            </summary>
      <param name="Name">The name of the worksheet.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.Add">
      <summary>
            Adds the worksheet with default name "Untitled N".
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.Add(System.String)">
      <summary>
            Adds the worksheet.
            </summary>
      <param name="Name">The name of worksheet.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.Add(Bytescout.Spreadsheet.Worksheet)">
      <summary>
            Adds the worksheet.
            </summary>
      <param name="worksheet">The worksheet.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.Insert(System.Int32,System.String)">
      <summary>
            Inserts the specified index.
            </summary>
      <param name="Index">The zero-based index at which worksheet should be inserted.</param>
      <param name="Name">The name of worksheet.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.Move(System.Int32,System.Int32)">
      <summary>
            Moves the specified SourceIndex Worksheet.
            </summary>
      <param name="SourceIndex">Index of the source.</param>
      <param name="DestIndex">Index of the destination.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.Copy(System.Int32,System.Int32,System.String)">
      <summary>
            Copies the specified SourceIndex Worksheet.
            </summary>
      <param name="SourceIndex">Index of the source.</param>
      <param name="DestIndex">Index of the dest.</param>
      <param name="NewSheetName">New name of the Worksheet.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.Copy(System.Int32,System.Int32,System.String,System.Boolean)">
      <summary>
            Copies the specified SourceIndex Worksheet.
            </summary>
      <param name="SourceIndex">Index of the source.</param>
      <param name="DestIndex">Index of the dest.</param>
      <param name="NewSheetName">New name of the Worksheet.</param>
      <param name="OfficeArtCopy">if set to <c>true</c> OfficeArt data copy too.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.Delete(System.Int32)">
      <summary>
            Deletes the worksheet.
            </summary>
      <param name="Index">The index of worksheet.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.Delete(System.String)">
      <summary>
            Deletes the worksheet.
            </summary>
      <param name="Name">The name of worksheet.</param>
    </member>
    <member name="M:Bytescout.Spreadsheet.Worksheets.DeleteAll">
      <summary>
            Deletes all worksheets.
            </summary>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheets.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Worksheet" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheets.Item(System.String)">
      <summary>
            Gets the <see cref="T:Bytescout.Spreadsheet.Worksheet" /> with the specified name.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Bytescout.Spreadsheet.Worksheets.Count">
      <summary>
            Gets the worksheet count.
            </summary>
      <value>The worksheet count.</value>
    </member>
    <member name="M:Bytescout.Zip.InputBuffer.CopyTo(System.Byte[],System.Int32,System.Int32)">
            Copies length bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            Returns the number of bytes copied, 0 if no byte is available.
        </member>
    <member name="T:Bytescout.Zip.ZipCRC32">
      <summary>
            Calculates a 32bit Cyclic Redundancy Checksum (CRC) using the
            same polynomial used by Zip. This type ie generally not used 
            directly by applications wishing to create, read, or manipulate 
            zip archive files.
            </summary>
    </member>
    <member name="M:Bytescout.Zip.ZipCRC32.GetCrc32(System.IO.Stream)">
      <summary>
            Returns the CRC32 for the specified stream.
            </summary>
      <param name="input">The stream over which to calculate the CRC32</param>
      <returns>the CRC32 calculation</returns>
    </member>
    <member name="M:Bytescout.Zip.ZipCRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
      <summary>
            Returns the CRC32 for the specified stream, and writes the input into the output stream.
            </summary>
      <param name="input">The stream over which to calculate the CRC32</param>
      <param name="output">The stream into which to deflate the input</param>
      <returns>the CRC32 calculation</returns>
    </member>
    <member name="M:Bytescout.Zip.ZipCRC32.#ctor">
      <summary>
            Construct an instance of the CRC32 class, preinitializing the 
            table for speed of lookup.
            </summary>
    </member>
    <member name="P:Bytescout.Zip.ZipCRC32.TotalBytesRead">
      <summary>
            indicates the total number of bytes read on the CRC stream.
            This is used when writing the ZipDirEntry when compressing files.
            </summary>
    </member>
    <member name="T:Bytescout.Zip.ZipEntry">
      <summary>
            Represents a single entry in a ZipFile. Typically, applications
            get a ZipEntry by enumerating the entries within a ZipFile or
            as a result of AddItem methods.
            </summary>
    </member>
    <member name="M:Bytescout.Zip.ZipEntry.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Zip.ZipEntry" /> class.
            </summary>
      <param name="filename">The filename.</param>
    </member>
    <member name="M:Bytescout.Zip.ZipEntry.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Zip.ZipEntry" /> class.
            </summary>
      <param name="filename">The filename.</param>
      <param name="pathInArchive">The path in archive.</param>
    </member>
    <member name="M:Bytescout.Zip.ZipEntry.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
    </member>
    <member name="M:Bytescout.Zip.ZipEntry.Read(System.IO.Stream)">
      <summary>
            Reads one ZipEntry from the given stream.  
            </summary>
      <param name="s">the stream to read from.</param>
      <returns>the ZipEntry read from the stream.</returns>
    </member>
    <member name="M:Bytescout.Zip.ZipEntry.ReadDirectory(System.IO.Stream)">
      <summary>
            Reads one entry from the zip directory structure in the zip file. 
            </summary>
      <param name="s">the stream from which to read.</param>
      <returns>the entry read from the archive.</returns>
    </member>
    <member name="M:Bytescout.Zip.ZipEntry.isNotValidDirectorySignature(System.Int32)">
      <summary>
            Returns true if the passed-in value is a valid signature for a 
            zip archive directory entry. 
            </summary>
      <param name="signature">the candidate 4-byte signature value.</param>
      <returns>true, if the signature is valid according to the PKWare spec.</returns>
    </member>
    <member name="M:Bytescout.Zip.ZipEntry.Extract">
      <summary>
             Extract the entry to the filesystem, starting at the current 
             working directory. 
             </summary>
      <remarks>
        <para>
             The last modified time of the created file may be adjusted 
             during extraction to compensate for differences in how the .NET 
             Base Class Library deals with daylight saving time (DST) versus 
             how the Windows filesystem deals with daylight saving time. 
             See http://blogs.msdn.com/oldnewthing/archive/2003/10/24/55413.aspx 
             for more context.
            </para>
      </remarks>
    </member>
    <member name="M:Bytescout.Zip.ZipEntry.Extract(System.Boolean)">
      <summary>
            Extract the entry to the filesystem, starting at the current 
            working directory, potentially overwriting any existing file.
            </summary>
      <param name="overwriteExisting">true if the caller wants to 
            overwrite any existing file with the same name in the 
            filesystem.</param>
    </member>
    <member name="M:Bytescout.Zip.ZipEntry.ExtractTo(System.String)">
      <summary>
            Extract the entry to the filesystem, starting at the specified 
            base directory. 
            </summary>
      <param name="baseDirectory">the path name of the base 
            directory.</param>
    </member>
    <member name="M:Bytescout.Zip.ZipEntry.ExtractTo(System.String,System.Boolean)">
      <summary>
            Extract the entry to the filesystem, starting at the specified 
            base directory, and potentially overwriting existing files in 
            the filesystem. 
            </summary>
      <param name="baseDirectory">the path name of the base 
            directory</param>
      <param name="overwriteExisting">if true, overwrite any existing 
            files if necessary upon extraction.</param>
    </member>
    <member name="M:Bytescout.Zip.ZipEntry.ExtractTo(System.IO.Stream)">
      <summary>
            Extracts the entry to the specified stream. 
            </summary>
      <param name="s">the stream to which the entry should be 
            extracted.</param>
    </member>
    <member name="P:Bytescout.Zip.ZipEntry.Stream">
      <summary>
            Gets the stream.
            </summary>
      <value>The stream.</value>
    </member>
    <member name="P:Bytescout.Zip.ZipEntry.LastModified">
      <summary>
            Gets the last modified.
            </summary>
      <value>The last modified.</value>
    </member>
    <member name="P:Bytescout.Zip.ZipEntry.FileName">
      <summary>
            The name of the file contained in the ZipEntry. 
            </summary>
    </member>
    <member name="P:Bytescout.Zip.ZipEntry.Comment">
      <summary>
            The comment attached to the ZipEntry. 
            </summary>
    </member>
    <member name="P:Bytescout.Zip.ZipEntry.BitField">
      <summary>
            Gets a bit field as defined in the zip spec. 
            </summary>
    </member>
    <member name="P:Bytescout.Zip.ZipEntry.CompressedSize">
      <summary>
            The compressed size of the file, in bytes, within the zip archive. 
            </summary>
    </member>
    <member name="P:Bytescout.Zip.ZipEntry.UncompressedSize">
      <summary>
            The size of the file, in bytes, before compression, or after extraction. 
            </summary>
    </member>
    <member name="P:Bytescout.Zip.ZipEntry.CompressionRatio">
      <summary>
            The ratio of compressed size to uncompressed size. 
            </summary>
    </member>
    <member name="P:Bytescout.Zip.ZipEntry.IsDirectory">
      <summary>
            True if the entry is a directory (not a file). 
            This is a readonly property on the entry.
            </summary>
    </member>
    <member name="P:Bytescout.Zip.ZipEntry.SaveUncompressed">
      <summary>
            Gets or sets a value indicating whether [save uncompressed].
            </summary>
      <value>
        <c>true</c> if [save uncompressed]; otherwise, <c>false</c>.</value>
    </member>
    <member name="M:Bytescout.Zip.ZipEntryList.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that 
            can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Bytescout.Zip.ZipEntryList.Add(Bytescout.Zip.ZipEntry)">
      <summary>
            Adds a ZipEntry object to the end of the list.
            </summary>
      <param name="value">The ZipEntry object to be added to the end 
            of the list. The value can be null.</param>
      <returns>The index at which the value has been added.</returns>
    </member>
    <member name="P:Bytescout.Zip.ZipEntryList.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Bytescout.Zip.ZipEntry" /> at the specified index.
            </summary>
      <value>The zero-based index of the element to get</value>
    </member>
    <member name="P:Bytescout.Zip.ZipEntryList.Count">
      <summary>
            Gets the number of elements actually contained in the <see cref="T:Bytescout.Zip.ZipEntryList" />.
            </summary>
      <value>The number of elements actually contained in the SpreadsheetFontList.</value>
    </member>
    <member name="T:Bytescout.Zip.ZipFile">
      <summary>
            The ZipFile type represents a zip archive file.  This is the main type in the
            class library that reads and writes zip files, as defined in the format
            for zip described by PKWare.  This implementation is based on the
            Compression.DeflateStream base class in the .NET Framework
            base class library, for v2.0 and later.
            </summary>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Bytescout.Zip.ZipFile" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.#ctor(System.String)">
      <summary>
            Creates a new ZipFile instance for an existing zip archive, using 
            the specified file name. The file name may be fully qualified.
            </summary>
      <param name="zipFileName">The name of the existing zip archive.</param>
      <remarks>
        <para>Applications can use this constructor to create a new 
            ZipFile for an existing zip archive for read and write purposes.
            </para>
        <para>
            An application reading a zip archive can call this constructor, 
            passing the name of a zip file that does exist.  The file is then 
            read into the <c>ZipFile</c> instance.  The app can then enumerate 
            the entries or can add a new entry.
            </para>
      </remarks>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.#ctor(System.IO.Stream)">
      <summary>
            Creates an instance of ZipFile initialized with zip archive data
            from a specified stream.
            </summary>
      <exception cref="T:System.ArgumentException">
            Thrown if the stream is not readable or empty.
            </exception>
      <param name="s">The stream to read from. It must be readable 
            and contain zip archive. Stream does not gets closed.</param>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.#ctor(System.Byte[])">
      <summary>
            Creates an instance of ZipFile initialized with zip archive data
            from a specified byte buffer.
            </summary>
      <param name="buffer">The byte array containing the zip data.</param>
      <exception cref="T:System.ArgumentException">
            Thrown if the byte buffer is null or empty.
            </exception>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.Finalize">
      <summary>
            This is the class Destructor, which gets called implicitly when 
            the instance is destroyed. Because the ZipFile type implements 
            IDisposable, this method calls Dispose(false).
            </summary>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.Dispose">
      <summary>
            Handles closing of the read and write streams associated
            to the ZipFile, if necessary.  The Dispose() method is generally 
            employed implicitly, via a using() {} statement. 
            </summary>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.Dispose(System.Boolean)">
      <summary>
            The Dispose() method.  It disposes any managed resources, 
            if the flag is set, then marks the instance disposed.
            This method is typically not called from application code.
            </summary>
      <param name="disposeManagedResources">indicates whether the 
            method should dispose streams or not.</param>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.GetEnumerator">
      <summary>
            Generic IEnumerator support, for use of a ZipFile in a foreach construct.  
            </summary>
      <returns>a generic enumerator suitable for use  within a foreach loop.</returns>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.System#Collections#IEnumerable#GetEnumerator">
      <summary>
            IEnumerator support, for use of a ZipFile in a foreach construct.  
            </summary>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.AddItem(System.String)">
      <summary>
            Adds an item, either a file or a folder, to the zip archive.  
            </summary>
      <remarks>
        <para>
            If adding a folder, then add is NOT recursive and only empty 
            folder will be added to zip archive.
            </para>
        <para>
            The name of the item may be a relative path or a fully-qualified 
            path. If name is null, then empty entry will be added. You can
            populate entry using Stream property later.
            </para>
        <para>
            The folder name used for the file within the archive is the 
            same as folder name (potentially a relative path) specified in 
            the fileOrFolderName.
            </para>
      </remarks>
      <param name="fileOrFolderName">the name of the file or folder 
            to add.</param>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.AddItem(System.String,System.String)">
      <summary>
            Adds an item, either a file or a folder, to the zip archive,
            explicitly specifying the folder path to be used in the archive.
            </summary>
      <remarks>
        <para>
            If adding a folder, then add is NOT recursive and only empty 
            folder will be added to zip archive.
            </para>
        <para>
            The name of the item may be a relative path or a fully-qualified 
            path. If name is null, then empty entry will be added. You can
            populate entry using Stream property later.
            </para>
        <para>
            This version of the method allows the caller to explicitly specify 
            the folder path to be used in the archive, which would override 
            the "natural" path of the filesystem file.
            </para>
      </remarks>
      <param name="fileOrFolderName">the name of the file or folder 
            to add.</param>
      <param name="pathInArchive">
            The name of the folder path to use within the zip archive. 
            This path may, or may not, correspond to a real folder in the 
            current filesystem. If the files within the zip are later 
            extracted, this is the path used for the extracted file. 
            Passing null will use the path of the fileOrFolderName. Passing 
            the empty string ("") will insert the item at the root path 
            within the archive.
            </param>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.AddFolder(System.String)">
      <summary>
            Adds a folder to the zip archive. 
            </summary>
      <remarks>
            The name of the folder may be a relative path or a 
            fully-qualified path. The add operation is recursive, so that 
            any files or sub-folders within the folder are also added to 
            the archive.
            </remarks>
      <param name="folderName">the name of the folder to add.</param>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.AddFolder(System.String,System.String)">
      <summary>
            Adds a folder to the zip archive, overriding the path to be 
            used in the archive. 
            </summary>
      <remarks>
            The name of the folder may be a relative path or a 
            fully-qualified path. The add operation is recursive, so that 
            any files or sub-folders within the folder are also added to 
            the archive.
            </remarks>
      <param name="folderName">the name of the folder to add.</param>
      <param name="pathInArchive">
            Specifies a folder path to use to override any path in the 
            folderName. This path may, or may not, correspond to a real 
            folder in the current filesystem. If the zip archive is later 
            extracted, this is the path used for the extracted file or 
            folder. Passing null will use the path of the folderName. 
            Passing the empty string ("") will insert the item at the root 
            path within the archive.
            </param>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.Save(System.String)">
      <summary>
            Save the zip archive to a file with the given name. 
            </summary>
      <param name="zipFileName">
            The name of the file to save zip archive to. If file already exists,
            it will be overwritten.
            </param>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.Save(System.IO.Stream)">
      <summary>
            Save the zip archive to a given stream. 
            </summary>
      <param name="outStream">
            The name of the stream to save zip archive to. Stream must be
            writable. Stream does not gets closed.
            </param>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.Extract(System.String)">
      <summary>
            Extracts all of the items in the zip archive, to the specified 
            path in the filesystem. The path can be relative or fully-qualified. 
            </summary>
      <remarks>
        <para>If an extraction of a file from the zip archive would 
            overwrite an existing file in the filesystem, the file will not 
            be overwritten and an exception will be thrown. To avoid this, use 
            the overload that allows you to specify that you want
            to overwrite existing files.
            </para>
      </remarks>
      <param name="path">The path to which the contents of the zip 
            archive should be extracted.</param>
    </member>
    <member name="M:Bytescout.Zip.ZipFile.Extract(System.String,System.Boolean)">
      <summary>
            Extracts all of the items in the zip archive, to the specified 
            path in the filesystem, optionally overwriting any existing files. 
            The path can be relative or fully-qualified.
            </summary>
      <param name="path">the path to which the contents of the zip 
            archive are extracted.</param>
      <param name="overwriteExisting">If true, then any existing file 
            will be overwritten upon extraction.</param>
    </member>
    <member name="P:Bytescout.Zip.ZipFile.EntryCount">
      <summary>
            Gets the number of zip entries in the zip archive.
            </summary>
      <value>The number of zip entries in the zip archive.</value>
    </member>
    <member name="P:Bytescout.Zip.ZipFile.Item(System.Int32)">
      <summary>
            This is a number-based indexer into the zip archive.
            </summary>
      <value>The index of an entry to retrieve.</value>
    </member>
    <member name="P:Bytescout.Zip.ZipFile.Comment">
      <summary>
            Gets or sets a comment for the zip file.
            </summary>
    </member>
    <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Int64)">
      <summary>
            This method returns the literal value received
            </summary>
      <param name="literal">The literal to return</param>
      <returns>The received value</returns>
    </member>
    <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.UInt64)">
      <summary>
            This method returns the literal value received
            </summary>
      <param name="literal">The literal to return</param>
      <returns>The received value</returns>
    </member>
    <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Single)">
      <summary>
            This method returns the literal value received
            </summary>
      <param name="literal">The literal to return</param>
      <returns>The received value</returns>
    </member>
    <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Double)">
      <summary>
            This method returns the literal value received
            </summary>
      <param name="literal">The literal to return</param>
      <returns>The received value</returns>
    </member>
    <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int32,System.Int32)">
      <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
      <param name="number">Number to operate on</param>
      <param name="bits">Ammount of bits to shift</param>
      <returns>The resulting number from the shift operation</returns>
    </member>
    <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int32,System.Int64)">
      <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
      <param name="number">Number to operate on</param>
      <param name="bits">Ammount of bits to shift</param>
      <returns>The resulting number from the shift operation</returns>
    </member>
    <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int64,System.Int32)">
      <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
      <param name="number">Number to operate on</param>
      <param name="bits">Ammount of bits to shift</param>
      <returns>The resulting number from the shift operation</returns>
    </member>
    <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int64,System.Int64)">
      <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
      <param name="number">Number to operate on</param>
      <param name="bits">Ammount of bits to shift</param>
      <returns>The resulting number from the shift operation</returns>
    </member>
    <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ReadInput(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
      <param name="sourceStream">The source Stream to read from.</param>
      <param name="target">Contains the array of characteres read from the source Stream.</param>
      <param name="start">The starting index of the target array.</param>
      <param name="count">The maximum number of characters to read from the source Stream.</param>
      <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
    </member>
    <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a number of characters from the current source TextReader and writes the data to the target array at the specified index.</summary>
      <param name="sourceTextReader">The source TextReader to read from</param>
      <param name="target">Contains the array of characteres read from the source TextReader.</param>
      <param name="start">The starting index of the target array.</param>
      <param name="count">The maximum number of characters to read from the source TextReader.</param>
      <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source TextReader. Returns -1 if the end of the stream is reached.</returns>
    </member>
    <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ToByteArray(System.String)">
      <summary>
            Converts a string to an array of bytes
            </summary>
      <param name="sourceString">The string to be converted</param>
      <returns>The new array of bytes</returns>
    </member>
    <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ToCharArray(System.Byte[])">
      <summary>
            Converts an array of bytes to an array of chars
            </summary>
      <param name="byteArray">The array of bytes to convert</param>
      <returns>The new array of chars</returns>
    </member>
    <member name="P:ComponentAce.Compression.Libs.zlib.ZInputStream.TotalIn">
      <summary> Returns the total number of bytes input so far.</summary>
    </member>
    <member name="P:ComponentAce.Compression.Libs.zlib.ZInputStream.TotalOut">
      <summary> Returns the total number of bytes output so far.</summary>
    </member>
    <member name="P:ComponentAce.Compression.Libs.zlib.ZOutputStream.TotalIn">
      <summary> Returns the total number of bytes input so far.</summary>
    </member>
    <member name="P:ComponentAce.Compression.Libs.zlib.ZOutputStream.TotalOut">
      <summary> Returns the total number of bytes output so far.</summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.AttachmentExtractor">
      <summary>
             Extracts attachments from PDF file.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.BaseExtractor">
      <summary>
             Defines a base class for PDF extractors.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.IBaseExtractor.Reset">
      <summary>
             Resets the instance and disposes internal resources.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.IBaseExtractor.LoadDocumentFromFile(System.String)">
      <summary>
             Loads PDF document from specified file.
            </summary>
      <param name="fileName">File name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IBaseExtractor.LoadDocumentFromStream(System.IO.Stream)">
      <summary>
             Loads PDF document from provided stream.
            </summary>
      <param name="documentFileStream">Input stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IBaseExtractor.GetPageCount">
      <summary>
             Returns document page count.
            </summary>
      <returns>Page count.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.IBaseExtractor.GetPageRect_Left(System.Int32)">
      <summary>
            Gets the specified page left coordinate.
            </summary>
      <param name="pageIndex">Index of the page.</param>
      <returns>Left coordinate in points.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.IBaseExtractor.GetPageRect_Top(System.Int32)">
      <summary>
            Gets the specified page top coordinate.
            </summary>
      <param name="pageIndex">Index of the page.</param>
      <returns>Top coordinate in points.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.IBaseExtractor.GetPageRect_Width(System.Int32)">
      <summary>
            Gets the specified page width.
            </summary>
      <param name="pageIndex">Index of the page.</param>
      <returns>Page width in points.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.IBaseExtractor.GetPageRect_Height(System.Int32)">
      <summary>
            Gets the specified page height.
            </summary>
      <param name="pageIndex">Index of the page.</param>
      <returns>Page height in points.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.IBaseExtractor.SetExtractionArea(System.Drawing.RectangleF)">
      <summary>
             Sets the extraction area by rectangle.
            </summary>
      <param name="rectangle">
      </param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IBaseExtractor.SetExtractionArea(System.Single,System.Single,System.Single,System.Single)">
      <summary>
             Sets the extraction area by coordinates and dimensions.
            </summary>
      <param name="left">
      </param>
      <param name="top">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IBaseExtractor.ResetExtractionArea">
      <summary>
             Resets the extraction area to full page.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IBaseExtractor.RegistrationName">
      <summary>
             Registration name.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IBaseExtractor.RegistrationKey">
      <summary>
             Registration key.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IBaseExtractor.Password">
      <summary>
             PDF document owner password.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IBaseExtractor.Version">
      <summary>
             Gets the component version number.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IBaseExtractor.IsPortfolio">
      <summary>
            Returns True if we have a "PDF portfolio" file 
            To extract files from PDF portfolio please use AttachmentExtractor object class
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IBaseExtractor.EmbeddedFileCount">
      <summary>
            Returns number of embedded files (or attachments if any)
            Files can be attached as "attachments" or embedded into PDf if the PDF is a "portfolio" file
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.#ctor(System.String,System.String)">
      <summary>
             Initializes a new instance of the extractor class.
            </summary>
      <param name="registrationName">Registration name.</param>
      <param name="registrationKey">Registration key.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.Dispose">
      <summary>
            Releases the unmanaged resources used by the instance and optionally releases the managed resources.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.Reset">
      <summary>
             Resets the instance and disposes internal resources.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.LoadDocumentFromFile(System.String)">
      <summary>
             Loads PDF document from specified file.
            </summary>
      <param name="fileName">File name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.LoadDocumentFromStream(System.IO.Stream)">
      <summary>
             Loads PDF document from provided stream.
            </summary>
      <param name="documentFileStream">Input stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.GetPageCount">
      <summary>
             Returns document page count.
            </summary>
      <returns>Page count.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.GetPageRectangle(System.Int32)">
      <summary>
            Gets the page rectangle.
            </summary>
      <param name="pageIndex">Index of the page.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.GetPageRect_Left(System.Int32)">
      <summary>
            Gets the specified page left coordinate.
            </summary>
      <param name="pageIndex">Index of the page.</param>
      <returns>Left coordinate in points.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.GetPageRect_Top(System.Int32)">
      <summary>
            Gets the specified page top coordinate.
            </summary>
      <param name="pageIndex">Index of the page.</param>
      <returns>Top coordinate in points.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.GetPageRect_Width(System.Int32)">
      <summary>
            Gets the specified page width.
            </summary>
      <param name="pageIndex">Index of the page.</param>
      <returns>Page width in points.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.GetPageRect_Height(System.Int32)">
      <summary>
            Gets the specified page height.
            </summary>
      <param name="pageIndex">Index of the page.</param>
      <returns>Page height in points.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.SetExtractionArea(System.Drawing.RectangleF)">
      <summary>
             Sets the extraction area by rectangle.
            </summary>
      <param name="rectangle">
      </param>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.SetExtractionArea(System.Single,System.Single,System.Single,System.Single)">
      <summary>
             Sets the extraction area by coordinates and dimensions.
            </summary>
      <param name="left">
      </param>
      <param name="top">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.ResetExtractionArea">
      <summary>
             Resets the extraction area to full page.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.BaseExtractor.IsExtractionAreaDefined">
      <summary>
            Checks if we currently have extraction area defined
            </summary>
      <returns>Returns True if extraction area is defined, False otherwise</returns>
    </member>
    <member name="E:Bytescout.PDFExtractor.BaseExtractor.PasswordRequired">
      <summary>
             Occurs when the password required to decrypt the document.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.BaseExtractor.RegistrationName">
      <summary>
             Registration name.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.BaseExtractor.RegistrationKey">
      <summary>
             Registration key.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.BaseExtractor.Password">
      <summary>
             PDF document owner password.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.BaseExtractor.Version">
      <summary>
             Gets the component version number.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.BaseExtractor.IsPortfolio">
      <summary>
            Returns True if we have a "PDF portfolio" file 
            To extract files from PDF portfolio please use AttachmentExtractor object class
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.BaseExtractor.EmbeddedFileCount">
      <summary>
            Returns number of embedded files (or attachments if any)
            Files can be attached as "attachments" or embedded into PDf if the PDF is a "portfolio" file
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.IAttachmentExtractor">
      <summary>
             Defines the PDF attachment extractor interface.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.IAttachmentExtractor.GetFileName(System.Int32)">
      <summary>
             Gets the attachment filename
            </summary>
      <returns>Attachment filename.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IAttachmentExtractor.GetSize(System.Int32)">
      <summary>
             Gets the attachment size (in bytes)
            </summary>
      <returns>Attachment size.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IAttachmentExtractor.Save(System.Int32,System.String)">
      <summary>
             Saves the attachment into given file
            </summary>
      <returns>bool if successfull.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IAttachmentExtractor.SaveToFile(System.Int32,System.String)">
      <summary>
             Saves the attachment into given file
            </summary>
      <returns>bool if successfull.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IAttachmentExtractor.Save(System.Int32,System.IO.Stream)">
      <summary>
             Saves the attachment into given stream
            </summary>
      <returns>bool if successfull.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IAttachmentExtractor.SaveToStream(System.Int32,System.IO.Stream)">
      <summary>
             Saves the attachment into given stream
            </summary>
      <returns>bool if successfull.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IAttachmentExtractor.IsEncrypted">
      <summary>
             Gets the document encrypted state.
            </summary>
      <returns>Encryption state.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="P:Bytescout.PDFExtractor.IAttachmentExtractor.Count">
      <summary>
             Attachments count
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.AttachmentExtractor.LoadDocumentFromFile(System.String)">
      <summary>
             Loads PDF document from specified file.
            </summary>
      <param name="fileName">File name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.AttachmentExtractor.LoadDocumentFromStream(System.IO.Stream)">
      <summary>
             Loads PDF document from provided stream.
            </summary>
      <param name="documentFileStream">Input stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.AttachmentExtractor.GetFileName(System.Int32)">
      <summary>
             Gets the attachment filename
            </summary>
      <returns>Attachment filename.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.AttachmentExtractor.GetSize(System.Int32)">
      <summary>
             Gets the attachment size (in bytes)
            </summary>
      <returns>Attachment size.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.AttachmentExtractor.Save(System.Int32,System.String)">
      <summary>
             Saves the attachment into given file
            </summary>
      <returns>bool if successfull.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.AttachmentExtractor.SaveToFile(System.Int32,System.String)">
      <summary>
             Saves the attachment into given file
            </summary>
      <returns>bool if successfull.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.AttachmentExtractor.Save(System.Int32,System.IO.Stream)">
      <summary>
             Saves the attachment into given stream
            </summary>
      <returns>bool if successfull.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.AttachmentExtractor.SaveToStream(System.Int32,System.IO.Stream)">
      <summary>
             Saves the attachment into given stream
            </summary>
      <returns>bool if successfull.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.AttachmentExtractor.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.AttachmentExtractor" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.AttachmentExtractor.#ctor(System.String,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.AttachmentExtractor" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.AttachmentExtractor.Reset">
      <summary>
             Resets the <see cref="T:Bytescout.PDFExtractor.AttachmentExtractor" /> instance and disposes internal resources.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.AttachmentExtractor.IsEncrypted">
      <summary>
             Gets the document encrypted state.
            </summary>
      <returns>Encryption state.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="P:Bytescout.PDFExtractor.AttachmentExtractor.Count">
      <summary>
             Returns attachment count
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.AttachmentExtractor.Encrypted">
      <summary>
             Document encryption.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITableDetector.FindTable(System.Int32)">
      <summary>
            Searches the document page for tables.
            </summary>
      <param name="pageIndex">Index of page for searching.</param>
      <returns>
        <c>true</c> if table is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITableDetector.FindTable(System.Int32,System.Drawing.RectangleF@)">
      <summary>
            Searches the document page for tables.
            </summary>
      <param name="pageIndex">Index of page for searching.</param>
      <param name="location">Location (rectangle) of the found table.</param>
      <returns>
        <c>true</c> if table is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITableDetector.FindNextTable">
      <summary>
            Continues the table search started by FindTable() method.
            </summary>
      <returns>
        <c>true</c> if search string is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITableDetector.FindNextTable(System.Drawing.RectangleF@)">
      <summary>
            Continues the table search started by FindTable() method.
            </summary>
      <param name="location">Location (rectangle) of the found table.</param>
      <returns>
        <c>true</c> if search string is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITableDetector.GetFoundTableRectangle_Left">
      <summary>
             Returns the left coordinate of rectangle of the table found by FindTable() or FindNextTable() methods.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITableDetector.GetFoundTableRectangle_Top">
      <summary>
             Returns the top coordinate of rectangle of the table found by FindTable() or FindNextTable() methods.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITableDetector.GetFoundTableRectangle_Width">
      <summary>
             Returns the width of rectangle of the table found by FindTable() or FindNextTable() methods.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITableDetector.GetFoundTableRectangle_Height">
      <summary>
             Returns the height of rectangle of the table found by FindTable() or FindNextTable() methods.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.ITableDetector.DetectionMinNumberOfColumns">
      <summary>
            Gets or sets the min number of columns in detected table.
            </summary>
      <value>Min number of columns in detected table.</value>
    </member>
    <member name="P:Bytescout.PDFExtractor.ITableDetector.DetectionMinNumberOfRows">
      <summary>
            Gets or sets the min number of rows in detected table.
            </summary>
      <value>Min number of rows in detected table.</value>
    </member>
    <member name="P:Bytescout.PDFExtractor.ITableDetector.DetectNewColumnBySpacesRatio">
      <summary>
             Space ratio between columns.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.ITableDetector.FoundTableLocation">
      <summary>
             Contains the location (rectangle) of the table found by FindTable() or FindNextTable() methods.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.DocumentMerger">
      <summary>
             Represents PDF document merger.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.IDocumentMerger.Merge(System.String[],System.String)">
      <summary>
             Merges specified PDF document to two documents at specified page.
            </summary>
      <param name="sourceDocuments">Array of PDF document file names to merge.</param>
      <param name="destinationDocument">Output PDF document file name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IDocumentMerger.GetPageCount(System.String)">
      <summary>
             Returns document page count.
            </summary>
      <returns>Page count.</returns>
    </member>
    <member name="E:Bytescout.PDFExtractor.IDocumentMerger.PasswordRequired">
      <summary>
             Occurs when the password required to decrypt the document.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IDocumentMerger.RegistrationName">
      <summary>
             Registration name.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IDocumentMerger.RegistrationKey">
      <summary>
             Registration key.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.DocumentMerger.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.DocumentMerger.#ctor(System.String,System.String)">
      <summary>
             Initializes a new instance of the extractor class.
            </summary>
      <param name="registrationName">Registration name.</param>
      <param name="registrationKey">Registration key.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.DocumentMerger.Merge(System.String[],System.String)">
      <summary>
             Merges specified PDF document to two documents at specified page.
            </summary>
      <param name="sourceDocuments">Array of PDF document file names to merge.</param>
      <param name="destinationDocument">Output PDF document file name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.DocumentMerger.GetPageCount(System.String)">
      <summary>
             Returns document page count.
            </summary>
      <returns>Page count.</returns>
    </member>
    <member name="E:Bytescout.PDFExtractor.DocumentMerger.PasswordRequired">
      <summary>
             Occurs when the password required to decrypt the document.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.DocumentMerger.RegistrationName">
      <summary>
             Registration name.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.DocumentMerger.RegistrationKey">
      <summary>
             Registration key.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.DocumentSplitter">
      <summary>
             Represents PDF document splitter.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.IDocumentSplitter.Split(System.String,System.String,System.String,System.Int32)">
      <summary>
             Splits specified PDF document to two documents at specified page.
            </summary>
      <param name="sourceDocument">Source PDF document file name to split.</param>
      <param name="destinationDocument1">First output document file name.</param>
      <param name="destinationDocument2">Second output document file name.</param>
      <param name="splitAtPageNumber">1-based page number to split at. It will be first page of the second document.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IDocumentSplitter.GetPageCount(System.String)">
      <summary>
             Returns document page count.
            </summary>
      <returns>Page count.</returns>
    </member>
    <member name="E:Bytescout.PDFExtractor.IDocumentSplitter.PasswordRequired">
      <summary>
             Occurs when the password required to decrypt the document.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IDocumentSplitter.RegistrationName">
      <summary>
             Registration name.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IDocumentSplitter.RegistrationKey">
      <summary>
             Registration key.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IDocumentSplitter.OptimizeSplittedDocuments">
      <summary>
             Removes unused resources from splitted document parts. 
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.DocumentSplitter.#ctor">
      <summary>
             Default constructor.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.DocumentSplitter.#ctor(System.String,System.String)">
      <summary>
             Initializes a new instance of the extractor class.
            </summary>
      <param name="registrationName">Registration name.</param>
      <param name="registrationKey">Registration key.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.DocumentSplitter.Split(System.String,System.String,System.String,System.Int32)">
      <summary>
             Splits specified PDF document to two documents at specified page.
            </summary>
      <param name="sourceDocument">Source PDF document file name to split.</param>
      <param name="destinationDocument1">First output document file name.</param>
      <param name="destinationDocument2">Second output document file name.</param>
      <param name="splitAtPageNumber">1-based page number to split at. It will be first page of the second document.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.DocumentSplitter.GetPageCount(System.String)">
      <summary>
             Returns document page count.
            </summary>
      <returns>Page count.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.DocumentSplitter.Split(System.String,System.String)">
      <summary>
            Splits PDF document to multiple documents according to specified ranges.
            </summary>
      <param name="sourceDocument">The source document.</param>
      <param name="ranges">Comma-separated list of page ranges in form "1-4,5,7,8-15,16-". Page numbers are 1-based. Ending "-" means "to the last page".</param>
      <returns>List of files of generated document parts.</returns>
    </member>
    <member name="E:Bytescout.PDFExtractor.DocumentSplitter.PasswordRequired">
      <summary>
             Occurs when the password required to decrypt the document.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.DocumentSplitter.RegistrationName">
      <summary>
             Registration name.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.DocumentSplitter.RegistrationKey">
      <summary>
             Registration key.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.DocumentSplitter.OptimizeSplittedDocuments">
      <summary>
             Removes unused resources from splitted document parts. 
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.TableDetector">
      <summary>
             Represents PDF tables detector.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.TableDetector.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.TableDetector" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.TableDetector.#ctor(System.String,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.TableDetector" /> class.
            </summary>
      <param name="registrationName">Registration name.</param>
      <param name="registrationKey">Registration key.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.TableDetector.Reset">
      <summary>
             Resets the instance and disposes internal resources. Also automatically invoked by <see cref="M:Bytescout.PDFExtractor.BaseExtractor.Dispose" />.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.TableDetector.FindTable(System.Int32)">
      <summary>
            Searches the document page for tables.
            </summary>
      <param name="pageIndex">Index of page for searching.</param>
      <returns>
        <c>true</c> if table is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.TableDetector.FindTable(System.Int32,System.Drawing.RectangleF@)">
      <summary>
            Searches the document page for tables.
            </summary>
      <param name="pageIndex">Index of page for searching.</param>
      <param name="location">Location (rectangle) of the found table.</param>
      <returns>
        <c>true</c> if table is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.TableDetector.FindNextTable">
      <summary>
            Continues the table search started by FindTable() method.
            </summary>
      <returns>
        <c>true</c> if search string is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.TableDetector.FindNextTable(System.Drawing.RectangleF@)">
      <summary>
            Continues the table search started by FindTable() method.
            </summary>
      <param name="location">Location (rectangle) of the found table.</param>
      <returns>
        <c>true</c> if search string is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.TableDetector.GetFoundTableRectangle_Left">
      <summary>
             Returns the left coordinate of rectangle of the table found by FindTable() or FindNextTable() methods.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.TableDetector.GetFoundTableRectangle_Top">
      <summary>
             Returns the top coordinate of rectangle of the table found by FindTable() or FindNextTable() methods.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.TableDetector.GetFoundTableRectangle_Width">
      <summary>
             Returns the width of rectangle of the table found by FindTable() or FindNextTable() methods.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.TableDetector.GetFoundTableRectangle_Height">
      <summary>
             Returns the height of rectangle of the table found by FindTable() or FindNextTable() methods.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.TableDetector.DetectNewColumnBySpacesRatio">
      <summary>
             Table columns detection option: defines space between columns to detect text as a new column.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.TableDetector.ExtractInvisibleText">
      <summary>
            Gets or sets a value indicating whether to extract invisible text from PDF document.
            </summary>
      <value>
        <c>true</c> if extract invisible text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.TableDetector.PreserveFormattingOnTextExtraction">
      <summary>
            Gets or sets a value indicating whether to preserve the text formatting on the extraction.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.TableDetector.DetectLinesInsteadOfParagraphs">
      <summary>
            Tries to detect single lines instead of multiple lines.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.TableDetector.TrimSpaces">
      <summary>
             Gets or sets a value indicating whether to remove trailing and ending spaces from table cell values.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.TableDetector.DetectionMinNumberOfColumns">
      <summary>
            Gets or sets the min number of columns in detected table.
            </summary>
      <value>Min number of columns in detected table.</value>
    </member>
    <member name="P:Bytescout.PDFExtractor.TableDetector.DetectionMinNumberOfRows">
      <summary>
            Gets or sets the min number of rows in detected table.
            </summary>
      <value>Min number of rows in detected table.</value>
    </member>
    <member name="P:Bytescout.PDFExtractor.TableDetector.FoundTableLocation">
      <summary>
             Contains the location (rectangle) of the table found by FindTable() or FindNext() methods.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.XLSExtractor">
      <summary>
             Defines XLS extractor interface.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.IXLSExtractor">
      <summary>
             Defines XLS extractor interface.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXLSExtractor.SaveToXLSFile(System.String)">
      <summary>
             Saves document text to XLS file.
            </summary>
      <param name="fileName">File name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXLSExtractor.SaveToXLSFile(System.Int32,System.Int32,System.String)">
      <summary>
             Saves data from specified page range to XLS file.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <param name="fileName">Output file name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXLSExtractor.SaveToXLSStream(System.IO.Stream)">
      <summary>
             Saves document text to XLS stream.
            </summary>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXLSExtractor.SaveToXLSStream(System.Int32,System.Int32,System.IO.Stream)">
      <summary>
             Saves data from specified page range to XLS stream.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXLSExtractor.SavePageToXLSFile(System.Int32,System.String)">
      <summary>
             Saves document page text to XLS file.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="fileName">Output file name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXLSExtractor.SavePageToXLSStream(System.Int32,System.IO.Stream)">
      <summary>
             Saves document page text to XLS stream.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXLSExtractor.DisposePage(System.Int32)">
      <summary>
            Disposing the page by its page index. 
            Please use this method carefully as it causes the page to free the page object and makes unable to further work with this page
            </summary>
      <param name="pageIndex">page index</param>
    </member>
    <member name="P:Bytescout.PDFExtractor.IXLSExtractor.OutputFormat">
      <summary>
            Gets or sets the output format (XLS or XLSX).
            </summary>
      <value>
        <c>Output format.</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.IXLSExtractor.DetectLinesInsteadOfParagraphs">
      <summary>
            Gets or sets a value indicating whether to detect single lines or multiple lines of text
            </summary>
      <value>
        <c>true</c> if detects single lines of text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.IXLSExtractor.DetectNewColumnBySpacesRatio">
      <summary>
             Table columns detection option.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IXLSExtractor.NumberDecimalSeparator">
      <summary>
            Number decimal separator
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IXLSExtractor.NumberGroupSeparator">
      <summary>
            Number group separator
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IXLSExtractor.AutoDetectNumbers">
      <summary>
            Automatically detect numbers to represent properly (as numbers) in cells in XLS and XLSX output
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IXLSExtractor.PreserveFormattingOnTextExtraction">
      <summary>
            Gets or sets a value indicating whether to preserve the text formatting on the extraction.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.XLSExtractor.InitProperties">
      <summary>
            Initializes properties
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.XLSExtractor.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.XLSExtractor" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.XLSExtractor.#ctor(System.String,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.XLSExtractor" /> class.
            </summary>
      <param name="registrationName">Registration name.</param>
      <param name="registrationKey">Registration key.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.XLSExtractor.Reset">
      <summary>
             Resets the instance and disposes internal resources. Also automatically invoked by <see cref="M:Bytescout.PDFExtractor.BaseExtractor.Dispose" />.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.XLSExtractor.SaveToXLSFile(System.String)">
      <summary>
             Saves document text to XLS file.
            </summary>
      <param name="fileName">File name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.XLSExtractor.SaveToXLSFile(System.Int32,System.Int32,System.String)">
      <summary>
             Saves data from specified page range to XLS file.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <param name="fileName">Output file name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.XLSExtractor.SaveToXLSStream(System.IO.Stream)">
      <summary>
             Saves document text to XLS stream.
            </summary>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.XLSExtractor.SavePageToXLSFile(System.Int32,System.String)">
      <summary>
             Saves document page text to XLS file.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="fileName">Output file name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.XLSExtractor.SavePageToXLSStream(System.Int32,System.IO.Stream)">
      <summary>
             Saves document page text to XLS stream.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.XLSExtractor.DisposePage(System.Int32)">
      <summary>
            Disposes the page object
            Uses this method carefully to destroy the page object that should not be used further
            </summary>
      <param name="pageIndex">Page index</param>
    </member>
    <member name="P:Bytescout.PDFExtractor.XLSExtractor.DetectNewColumnBySpacesRatio">
      <summary>
             Table columns detection option: defines space between columns to detect text as a new column.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.XLSExtractor.ExtractInvisibleText">
      <summary>
            Gets or sets a value indicating whether to extract invisible text from PDF document.
            </summary>
      <value>
        <c>true</c> if extract invisible text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.XLSExtractor.PreserveFormattingOnTextExtraction">
      <summary>
            Gets or sets a value indicating whether to preserve the text formatting on the extraction.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.XLSExtractor.DetectLinesInsteadOfParagraphs">
      <summary>
            Tries to detect single lines instead of multiple lines.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.XLSExtractor.TrimSpaces">
      <summary>
             Gets or sets a value indicating whether to remove trailing and ending spaces from table cell values.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.XLSExtractor.OutputFormat">
      <summary>
            Gets or sets the output format (XLS or XLSX).
            </summary>
      <value>
        <c>Output format.</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.XLSExtractor.NumberDecimalSeparator">
      <summary>
            Number decimal separator
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.XLSExtractor.NumberGroupSeparator">
      <summary>
            Number group separator
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.XLSExtractor.AutoDetectNumbers">
      <summary>
            Automatically detect numbers to represent properly (as numbers) in cells in XLS and XLSX output
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.SpreadseetOutputFormat">
      <summary>
             Defines spreadsheet output formats.
            </summary>
    </member>
    <member name="F:Bytescout.PDFExtractor.SpreadseetOutputFormat.XLS">
      <summary>
             XLS format.
            </summary>
    </member>
    <member name="F:Bytescout.PDFExtractor.SpreadseetOutputFormat.XLSX">
      <summary>
             XLSX format.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.IStructuredExtractor">
      <summary>
             Defines the table structure extractor interface.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.IStructuredExtractor.PrepareStructure(System.Int32)">
      <summary>
             Prepares the table structure for iteration. Use it before calling GetRowCount(), GetColumnCount(), GetCellValue() methods.
            </summary>
      <param name="pageIndex">Document page index.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IStructuredExtractor.GetRowCount(System.Int32)">
      <summary>
             Returns number of rows in the table structure of the document.
            </summary>
      <param name="pageIndex">Document page index.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IStructuredExtractor.GetColumnCount(System.Int32,System.Int32)">
      <summary>
             Returns number of columns in the specified row of the table structure of the document.
            </summary>
      <param name="pageIndex">Document page index.</param>
      <param name="rowIndex">Row index.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IStructuredExtractor.GetCellValue(System.Int32,System.Int32,System.Int32)">
      <summary>
             Returns value of specified cell of the table structure.
            </summary>
      <param name="pageIndex">Document page index.</param>
      <param name="rowIndex">Row index.</param>
      <param name="columnIndex">Column index.</param>
      <param name="numberOfCellsAlreadyScanned">If you are consecutively iterating through cells, put here the number of cells already processed. This will speed up the cell seeking.</param>
      <example>
        <code title="Example" description="" lang="CS">
             // Create Bytescout.PDFExtractor.StructuredExtractor instance
             StructuredExtractor extractor = new StructuredExtractor();
             extractor.RegistrationName = "demo";
             extractor.RegistrationKey = "demo";
             
             // Load sample PDF document
             extractor.LoadDocumentFromFile("sample3.pdf");
             
             extractor.PrepareStructure(0); //prepare page with index = 0
             
             int rowCount = extractor.GetRowCount(0);
             int CellsAlreadyScanned = 0;
             
             for (int row = 0; row &lt; rowCount; row++)
             {
             	int columnCount = extractor.GetColumnCount(0, row);
             
             	for (int col = 0; col &lt; columnCount; col++)
             	{
             		Trace.WriteLine(extractor.GetCellValue(0, row, col));
             	}
             
             }
             </code>
      </example>
    </member>
    <member name="M:Bytescout.PDFExtractor.IStructuredExtractor.DisposePage(System.Int32)">
      <summary>
            Disposing the page by its page index. 
            Please use this method carefully as it causes the page to free the page object and makes unable to further work with this page
            </summary>
      <param name="PageIndex">page index</param>
    </member>
    <member name="P:Bytescout.PDFExtractor.IStructuredExtractor.DetectLinesInsteadOfParagraphs">
      <summary>
            Gets or sets a value indicating whether to detect single lines or multiple lines of text
            </summary>
      <value>
        <c>true</c> if detects single lines of text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.IStructuredExtractor.DetectNewColumnBySpacesRatio">
      <summary>
             Table columns detection option.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.StructuredExtractor">
      <summary>
             Defines the table structure extractor interface.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.StructuredExtractor.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.StructuredExtractor" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.StructuredExtractor.#ctor(System.String,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.StructuredExtractor" /> class.
            </summary>
      <param name="registrationName">Registration name.</param>
      <param name="registrationKey">Registration key.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.StructuredExtractor.Reset">
      <summary>
             Resets the instance and disposes internal resources. Also automatically invoked by <see cref="M:Bytescout.PDFExtractor.BaseExtractor.Dispose" />.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.StructuredExtractor.PrepareStructure(System.Int32)">
      <summary>
             Prepares the table structure for iteration. Use it before calling GetRowCount(), GetColumnCount(), GetCellValue() methods.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.StructuredExtractor.GetRowCount(System.Int32)">
      <summary>
             Returns number of rows in the table structure of the document.
            </summary>
      <param name="pageIndex">Document page index.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.StructuredExtractor.GetColumnCount(System.Int32,System.Int32)">
      <summary>
             Returns number of columns in the specified row of the table structure of the document.
            </summary>
      <param name="pageIndex">Document page index.</param>
      <param name="rowIndex">Row index.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.StructuredExtractor.GetCellValue(System.Int32,System.Int32,System.Int32)">
      <summary>
             Returns value of specified cell of the table structure.
            </summary>
      <param name="pageIndex">Document page index.</param>
      <param name="rowIndex">Row index.</param>
      <param name="columnIndex">Column index.</param>
      <param name="numberOfCellsAlreadyScanned">If you are consecutively iterating through cells, put here the number of cells already processed. This will speed up the cell seeking.</param>
      <example>
        <code title="Example" description="" lang="CS">
             // Create Bytescout.PDFExtractor.StructuredExtractor instance
             StructuredExtractor extractor = new StructuredExtractor();
             extractor.RegistrationName = "demo";
             extractor.RegistrationKey = "demo";
             
             // Load sample PDF document
             extractor.LoadDocumentFromFile("sample3.pdf");
             
             extractor.PrepareStructure();
             
             int rowCount = extractor.GetRowCount(0);
             
             for (int row = 0; row &lt; rowCount; row++)
             {
             	int columnCount = extractor.GetColumnCount(0, row);
             
             	for (int col = 0; col &lt; columnCount; col++)
             	{
             		Trace.WriteLine(extractor.GetCellValue(0, row, col));
             	}
             
             }
             </code>
      </example>
    </member>
    <member name="M:Bytescout.PDFExtractor.StructuredExtractor.DisposePage(System.Int32)">
      <summary>
            Disposes the page object
            Uses this method carefully to destroy the page object that should not be used further
            </summary>
      <param name="PageIndex">Page index</param>
    </member>
    <member name="P:Bytescout.PDFExtractor.StructuredExtractor.DetectNewColumnBySpacesRatio">
      <summary>
             Table columns detection option: defines space between columns to detect text as a new column.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.StructuredExtractor.ExtractInvisibleText">
      <summary>
            Gets or sets a value indicating whether to extract invisible text from PDF document.
            </summary>
      <value>
        <c>true</c> if extract invisible text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.StructuredExtractor.PreserveFormattingOnTextExtraction">
      <summary>
            Gets or sets a value indicating whether to preserve the text formatting on the extraction.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.StructuredExtractor.DetectLinesInsteadOfParagraphs">
      <summary>
            Tries to detect single lines instead of multiple lines.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.StructuredExtractor.TrimSpaces">
      <summary>
             Gets or sets a value indicating whether to remove trailing and ending spaces from table cell values.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.XMLExtractor">
      <summary>
             Represents PDF to XML extractor.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.IXMLExtractor">
      <summary>
             Defines the PDF to XML extractor interface.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXMLExtractor.GetXMLDocument">
      <summary>
             Extracts XML data from whole document as XmlDocument.
            </summary>
      <returns>XmlDocument instance.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXMLExtractor.GetXMLDocument(System.Int32,System.Int32)">
      <summary>
             Extracts XML data from whole document as XmlDocument.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <returns>XmlDocument instance.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXMLExtractor.GetXML">
      <summary>
             Extracts XML data from whole document as string.
            </summary>
      <returns>XML string.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXMLExtractor.GetXML(System.Int32,System.Int32)">
      <summary>
             Extracts XML data from specifed page range.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <returns>XML string.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXMLExtractor.GetXMLDocumentFromPage(System.Int32)">
      <summary>
             Extracts XML data from specified document page as XmlDocument.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <returns>XmlDocument instance.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXMLExtractor.GetXMLFromPage(System.Int32)">
      <summary>
             Extracts XML data from specified document page as string.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <returns>XML text.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXMLExtractor.SaveXMLToFile(System.String)">
      <summary>
             Saves XML data to file.
            </summary>
      <param name="fileName">File name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXMLExtractor.SaveXMLToFile(System.Int32,System.Int32,System.String)">
      <summary>
             Saves XML data from specified page range to file.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <param name="fileName">Output file name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXMLExtractor.SaveXMLToStream(System.IO.Stream)">
      <summary>
             Saves XML data to stream.
            </summary>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXMLExtractor.SaveXMLToStream(System.Int32,System.Int32,System.IO.Stream)">
      <summary>
             Saves XML data from specified page range to stream.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXMLExtractor.SavePageXMLToFile(System.Int32,System.String)">
      <summary>
             Saves page XML data to file.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="fileName">Output file name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXMLExtractor.SavePageXMLToStream(System.Int32,System.IO.Stream)">
      <summary>
             Saves page XML data to stream.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.IXMLExtractor.DisposePage(System.Int32)">
      <summary>
            Disposing the page by its page index. 
            Please use this method carefully as it causes the page to free the page object and makes unable to further work with this page
            </summary>
      <param name="pageIndex">page index</param>
    </member>
    <member name="P:Bytescout.PDFExtractor.IXMLExtractor.ExtractInvisibleText">
      <summary>
            Gets or sets a value indicating whether to extract invisible text from PDF document.
            </summary>
      <value>
        <c>true</c> if extract invisible text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.IXMLExtractor.DetectLinesInsteadOfParagraphs">
      <summary>
             Lines detection option.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IXMLExtractor.PreserveFormattingOnTextExtraction">
      <summary>
            Gets or sets a value indicating whether to preserve the text formatting on the extraction.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IXMLExtractor.DetectNewColumnBySpacesRatio">
      <summary>
             Table columns detection option.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IXMLExtractor.TrimSpaces">
      <summary>
             Gets or sets a value indicating whether to remove trailing and ending spaces from table cell values.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.InitProperties">
      <summary>
            initializes default properties
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.XMLExtractor" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.#ctor(System.String,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.XMLExtractor" /> class.
            </summary>
      <param name="registrationName">Registration name.</param>
      <param name="registrationKey">Registration key.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.Reset">
      <summary>
             Resets the instance and disposes internal resources. Also automatically invoked by <see cref="M:Bytescout.PDFExtractor.BaseExtractor.Dispose" />.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.GetXMLDocument">
      <summary>
             Extracts XML data from whole document as XmlDocument.
            </summary>
      <returns>XmlDocument instance.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.GetXMLDocument(System.Int32,System.Int32)">
      <summary>
             Extracts XML data from whole document as XmlDocument.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <returns>XmlDocument instance.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.GetXML">
      <summary>
             Extracts XML data from whole document as string.
            </summary>
      <returns>XML string.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.GetXML(System.Int32,System.Int32)">
      <summary>
             Extracts XML data from specifed page range.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <returns>XML string.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.GetXMLDocumentFromPage(System.Int32)">
      <summary>
             Extracts XML data from specified document page as XmlDocument.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <returns>XmlDocument instance.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
      <exception cref="T:System.IndexOutOfRangeException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.GetXMLFromPage(System.Int32)">
      <summary>
             Extracts XML data from specified document page as string.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <returns>XML string.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
      <exception cref="T:System.IndexOutOfRangeException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.SaveXMLToFile(System.String)">
      <summary>
             Saves XML data to file.
            </summary>
      <param name="fileName">File name.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.SaveXMLToFile(System.Int32,System.Int32,System.String)">
      <summary>
             Saves XML data from specified page range to file.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <param name="fileName">Output file name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.SaveXMLToStream(System.IO.Stream)">
      <summary>
             Saves XML data to stream.
            </summary>
      <param name="stream">Output stream.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.SavePageXMLToFile(System.Int32,System.String)">
      <summary>
             Saves page XML data to file.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="fileName">Output file name.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.SavePageXMLToStream(System.Int32,System.IO.Stream)">
      <summary>
             Saves page XML data to stream.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="stream">Output stream.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.XMLExtractor.DisposePage(System.Int32)">
      <summary>
            Disposes the page object
            Uses this method carefully to destroy the page object that should not be used further
            </summary>
      <param name="pageIndex">Page index</param>
    </member>
    <member name="P:Bytescout.PDFExtractor.XMLExtractor.DetectNewColumnBySpacesRatio">
      <summary>
             Table columns detection option: defines space between columns to detect text as a new column.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.XMLExtractor.ExtractInvisibleText">
      <summary>
            Gets or sets a value indicating whether to extract invisible text from PDF document.
            </summary>
      <value>
        <c>true</c> if extract invisible text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.XMLExtractor.PreserveFormattingOnTextExtraction">
      <summary>
            Gets or sets a value indicating whether to preserve the text formatting on the extraction.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.XMLExtractor.DetectLinesInsteadOfParagraphs">
      <summary>
            Tries to detect single lines instead of multiple lines.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.XMLExtractor.TrimSpaces">
      <summary>
             Gets or sets a value indicating whether to remove trailing and ending spaces from table cell values.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.ICSVExtractor">
      <summary>
             Defines the PDF to CSV extractor interface.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.ICSVExtractor.GetCSV">
      <summary>
             Extracts comma-separated (CSV) data from whole document.
            </summary>
      <returns>CSV data string.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.ICSVExtractor.GetCSV(System.Int32,System.Int32)">
      <summary>
             Extracts comma-separated (CSV) data from specifed page range.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <returns>CSV data string.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.ICSVExtractor.GetCSVFromPage(System.Int32)">
      <summary>
             Extracts comma-separated (CSV) data from specified document page.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <returns>CSV data string.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.ICSVExtractor.SaveCSVToFile(System.String)">
      <summary>
             Saves comma-separated (CSV) data to file.
            </summary>
      <param name="fileName">File name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.ICSVExtractor.SaveCSVToFile(System.Int32,System.Int32,System.String)">
      <summary>
             Saves comma-separated (CSV) data from specified page range to file.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <param name="fileName">Output file name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.ICSVExtractor.SaveCSVToStream(System.IO.Stream)">
      <summary>
             Saves comma-separated (CSV) data to stream.
            </summary>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.ICSVExtractor.SaveCSVToStream(System.Int32,System.Int32,System.IO.Stream)">
      <summary>
             Saves comma-separated (CSV) data from specified page range to stream.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.ICSVExtractor.SavePageCSVToFile(System.Int32,System.String)">
      <summary>
             Saves page comma-separated (CSV) data to file.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="fileName">Output file name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.ICSVExtractor.SavePageCSVToStream(System.Int32,System.IO.Stream)">
      <summary>
             Saves page comma-separated (CSV) data to stream.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.ICSVExtractor.DisposePage(System.Int32)">
      <summary>
            Disposing the page by its page index. 
            Please use this method carefully as it causes the page to free the page object and makes unable to further work with this page
            </summary>
      <param name="pageIndex">page index</param>
    </member>
    <member name="P:Bytescout.PDFExtractor.ICSVExtractor.ExtractInvisibleText">
      <summary>
            Gets or sets a value indicating whether to extract invisible text from PDF document.
            </summary>
      <value>
        <c>true</c> if extract invisible text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.ICSVExtractor.DetectLinesInsteadOfParagraphs">
      <summary>
            Gets or sets a value indicating whether to detect single lines or multiple lines of text
            </summary>
      <value>
        <c>true</c> if detects single lines of text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.ICSVExtractor.DetectNewColumnBySpacesRatio">
      <summary>
             Table columns detection option.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.ICSVExtractor.CSVSeparatorSymbol">
      <summary>
            Gets or sets a value for CSV separator symbol. Default symbol is taken from current culture settings (CultureInfo.CurrentCulture.TextInfo.ListSeparator).
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.ICSVExtractor.CSVQuotaionSymbol">
      <summary>
            Gets or sets a value for CSV quotation symbol. Default id double quote.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.ICSVExtractor.TrimSpaces">
      <summary>
             Gets or sets a value indicating whether to remove trailing and ending spaces from table cell values.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.ICSVExtractor.PreserveFormattingOnTextExtraction">
      <summary>
            Gets or sets a value indicating whether to preserve the text formatting on the extraction.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.CSVExtractor">
      <summary>
             Represents PDF to CSV extractor.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.CSVExtractor.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.CSVExtractor" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.CSVExtractor.#ctor(System.String,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.CSVExtractor" /> class.
            </summary>
      <param name="registrationName">Registration name.</param>
      <param name="registrationKey">Registration key.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.CSVExtractor.Reset">
      <summary>
             Resets the instance and disposes internal resources. Also automatically invoked by <see cref="M:Bytescout.PDFExtractor.BaseExtractor.Dispose" />.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.CSVExtractor.GetCSV">
      <summary>
             Extracts comma-separated (CSV) data from whole document.
            </summary>
      <returns>CSV data string.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.CSVExtractor.GetCSV(System.Int32,System.Int32)">
      <summary>
             Extracts comma-separated (CSV) data from specified page range.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <returns>CSV data string.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.CSVExtractor.GetCSVFromPage(System.Int32)">
      <summary>
             Extracts comma-separated (CSV) data from specified document page.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <returns>CSV data string.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
      <exception cref="T:System.IndexOutOfRangeException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.CSVExtractor.SaveCSVToFile(System.Int32,System.Int32,System.String)">
      <summary>
             Saves comma-separated (CSV) data from specified page range to file.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <param name="fileName">Output file name.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.CSVExtractor.SaveCSVToFile(System.String)">
      <summary>
             Saves comma-separated (CSV) data to file.
            </summary>
      <param name="fileName">File name.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.CSVExtractor.SaveCSVToStream(System.IO.Stream)">
      <summary>
             Saves comma-separated (CSV) data to stream.
            </summary>
      <param name="stream">Output stream.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.CSVExtractor.SaveCSVToStream(System.Int32,System.Int32,System.IO.Stream)">
      <summary>
             Saves comma-separated (CSV) data from specified page range to stream.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <param name="stream">Output stream.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.CSVExtractor.SavePageCSVToFile(System.Int32,System.String)">
      <summary>
             Saves page comma-separated (CSV) data to file.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="fileName">Output file name.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.CSVExtractor.SavePageCSVToStream(System.Int32,System.IO.Stream)">
      <summary>
             Saves page comma-separated (CSV) data to stream.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="stream">Output stream.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.CSVExtractor.DisposePage(System.Int32)">
      <summary>
            Disposes the page object
            Uses this method carefully to destroy the page object that should not be used further
            </summary>
      <param name="pageIndex">Page index</param>
    </member>
    <member name="P:Bytescout.PDFExtractor.CSVExtractor.DetectNewColumnBySpacesRatio">
      <summary>
             Table columns detection option: defines space between columns to detect text as a new column.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.CSVExtractor.ExtractInvisibleText">
      <summary>
            Gets or sets a value indicating whether to extract invisible text from PDF document.
            </summary>
      <value>
        <c>true</c> if extract invisible text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.CSVExtractor.PreserveFormattingOnTextExtraction">
      <summary>
            Gets or sets a value indicating whether to preserve the text formatting on the extraction.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.CSVExtractor.DetectLinesInsteadOfParagraphs">
      <summary>
            Tries to detect single lines instead of multiple lines.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.CSVExtractor.TrimSpaces">
      <summary>
             Gets or sets a value indicating whether to remove trailing and ending spaces from table cell values.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.CSVExtractor.CSVSeparatorSymbol">
      <summary>
            Gets or sets a value for CSV separator symbol. Default symbol is taken from current culture settings (CultureInfo.CurrentCulture.TextInfo.ListSeparator).
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.CSVExtractor.CSVQuotaionSymbol">
      <summary>
            Gets or sets a value for CSV quotation symbol. Default id double quote.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.IImageExtractor">
      <summary>
             Defines the image extractor interface.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.IImageExtractor.GetDocumentImageCount">
      <summary>
             Returns count of images in the document.
            </summary>
      <returns>Count of images.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IImageExtractor.GetPageImageCount(System.Int32)">
      <summary>
             Returns count of images on specified document page.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <returns>Count of images on the page.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
      <exception cref="T:System.IndexOutOfRangeException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IImageExtractor.GetFirstImage">
      <summary>
             Initializes enumeration of images in the document. If GetFirstImage() returned true, you can get
             the image using SaveCurrentImage*() or GetCurrentImage*() methods.
            </summary>
      <returns>False if no images in the document, otherwise true.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IImageExtractor.GetFirstPageImage(System.Int32)">
      <summary>
             Initializes enumeration of images on the document page. If GetFirstPageImage() returned true, you can get
             the image using SaveCurrentImage*() or GetCurrentImage*() methods.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <returns>False if no images on the page, otherwise true.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
      <exception cref="T:System.IndexOutOfRangeException">Invalid page index specified.</exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IImageExtractor.GetNextImage">
      <summary>
             Advances image enumeration to next image. If GetNextImage() returned true, you can get
             the image using SaveCurrentImage*() or GetCurrentImage*() methods.
            </summary>
      <returns>False if no more images in the enumeration, otherwise true.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IImageExtractor.SaveCurrentImageToFile(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>
             Saves current image to a file with specified name and format.
            </summary>
      <param name="fileName">File name.</param>
      <param name="imageFormat">Image format.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IImageExtractor.SaveCurrentImageToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
             Saves current image to the stream with specified format.
            </summary>
      <param name="stream">Output stream.</param>
      <param name="imageFormat">Image format.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IImageExtractor.GetCurrentImageBytesSize">
      <summary>
             Returns size of current image.
            </summary>
      <returns>Count of bytes.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IImageExtractor.GetCurrentImageAsArrayOfBytes">
      <summary>
             Returns current image as array of bytes.
            </summary>
      <returns>
      </returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="T:Bytescout.PDFExtractor.IInfoExtractor">
      <summary>
             Defines the PDF info extractor interface.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.IInfoExtractor.GetAuthor">
      <summary>
             Gets the document author.
            </summary>
      <returns>Document author.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IInfoExtractor.IsEncrypted">
      <summary>
             Gets the document encrypted state.
            </summary>
      <returns>Encryption state.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IInfoExtractor.GetBookmarks">
      <summary>
             Gets the document bookmarks.
            </summary>
      <returns>Document bookmarks.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IInfoExtractor.GetCreationDate">
      <summary>
             Gets the document creation date.
            </summary>
      <returns>Creation date.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.IInfoExtractor.GetCreator">
      <summary>
             Gets the document creator.
            </summary>
      <returns>Document creator.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.IInfoExtractor.GetKeywords">
      <summary>
             Gets the document keywords.
            </summary>
      <returns>Document keywords.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IInfoExtractor.GetProducer">
      <summary>
             Gets the document producer.
            </summary>
      <returns>Document producer.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IInfoExtractor.GetSubject">
      <summary>
             Gets the document subject.
            </summary>
      <returns>Document subject.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.IInfoExtractor.GetTitle">
      <summary>
             Gets the document title.
            </summary>
      <returns>Document title.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="P:Bytescout.PDFExtractor.IInfoExtractor.Bookmarks">
      <summary>
             Bookmarks.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IInfoExtractor.Title">
      <summary>
             Title of the document.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IInfoExtractor.Author">
      <summary>
             Author of the document.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IInfoExtractor.Producer">
      <summary>
             Producer of the document.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IInfoExtractor.Creator">
      <summary>
             Creator of the document.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IInfoExtractor.Keywords">
      <summary>
             Document keywords.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IInfoExtractor.Subject">
      <summary>
             Document subject.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IInfoExtractor.CreationDate">
      <summary>
             Document creation date.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.IInfoExtractor.Encrypted">
      <summary>
             Document encryption.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.ITextExtractor">
      <summary>
             Defines the PDF to Text extractor interface.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.GetText">
      <summary>
             Extracts text from whole document.
            </summary>
      <returns>Document text.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.GetText(System.Int32,System.Int32)">
      <summary>
             Extracts text from specifed page range.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <returns>Concatenated text from range of pages.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.GetTextFromPage(System.Int32)">
      <summary>
             Extracts text from specified document page.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <returns>Page text.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
      <exception cref="T:System.IndexOutOfRangeException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.SaveTextToFile(System.String)">
      <summary>
             Saves document text to file.
            </summary>
      <param name="fileName">File name.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.SaveTextToFile(System.Int32,System.Int32,System.String)">
      <summary>
             Saves text from specified page range to file.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <param name="fileName">Output file name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.SaveTextToStream(System.IO.Stream)">
      <summary>
             Saves document text to stream.
            </summary>
      <param name="stream">Output stream.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.SaveTextToStream(System.Int32,System.Int32,System.IO.Stream)">
      <summary>
             Saves text from specified page range to stream.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.SavePageTextToFile(System.Int32,System.String)">
      <summary>
             Saves page text to file.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="fileName">Output file name.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.SavePageTextToStream(System.Int32,System.IO.Stream)">
      <summary>
             Saves page text to stream.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="stream">Output stream.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.Find(System.Int32,System.String,System.Boolean)">
      <summary>
            Searches the document page for specified text.
            </summary>
      <param name="pageIndex">Index of page for searching.</param>
      <param name="text">Text to find.</param>
      <param name="caseSensitive">Case sensitivity.</param>
      <returns>
        <c>true</c> if search string is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.Find(System.Int32,System.String,System.Boolean,System.Drawing.RectangleF@)">
      <summary>
            Searches the document page for specified text.
            </summary>
      <param name="pageIndex">Index of page for searching.</param>
      <param name="text">Text to find.</param>
      <param name="caseSensitive">Case sensitivity.</param>
      <param name="location">Location (rectangle) of the found text.</param>
      <returns>
        <c>true</c> if search string is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.FindNext">
      <summary>
            Continues the text search started by Find() method.
            </summary>
      <returns>
        <c>true</c> if search string is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.FindNext(System.Drawing.RectangleF@)">
      <summary>
            Continues the text search started by Find() method.
            </summary>
      <param name="location">Location (rectangle) of the found text.</param>
      <returns>
        <c>true</c> if search string is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.GetFoundTextRectangle_Left">
      <summary>
             Returns the left coordinate of rectangle of the text found by Find() or FindNext() methods.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.GetFoundTextRectangle_Top">
      <summary>
             Returns the top coordinate of rectangle of the text found by Find() or FindNext() methods.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.GetFoundTextRectangle_Width">
      <summary>
             Returns the width of rectangle of the text found by Find() or FindNext() methods.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.GetFoundTextRectangle_Height">
      <summary>
             Returns the height of rectangle of the text found by Find() or FindNext() methods.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.ITextExtractor.DisposePage(System.Int32)">
      <summary>
            Disposing the page by its page index. 
            Please use this method carefully as it causes the page to free the page object and makes unable to further work with this page
            </summary>
      <param name="pageIndex">page index</param>
    </member>
    <member name="P:Bytescout.PDFExtractor.ITextExtractor.ExtractInvisibleText">
      <summary>
            Gets or sets a value indicating whether to extract invisible text from PDF document.
            </summary>
      <value>
        <c>true</c> if extract invisible text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.ITextExtractor.ExtractShadowLikeText">
      <summary>
            Gets or sets a value indicating whether to include characters used to create "shadow" effect (when the same character appears with some offset) from PDF document.
            True by default (includes all encoded characters disregarding their real appearance)
            </summary>
      <value>
        <c>true</c> if extract shadow like characters in text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.ITextExtractor.DetectLinesInsteadOfParagraphs">
      <summary>
             Lines detection option.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.ITextExtractor.SpaceRatioBetweenWords">
      <summary>
             Space ratio between words
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.ITextExtractor.ExtractColumnByColumn">
      <summary>
            Indicates if we should extract text column by column or should we use the original layout
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.ITextExtractor.TrimSpaces">
      <summary>
             Trim spaces from text lines (FALSE by default to preserve original formatting if any)
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.ITextExtractor.PreserveFormattingOnTextExtraction">
      <summary>
            Gets or sets a value indicating whether to preserve the text formatting on the extraction.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.ITextExtractor.FoundTextRectangle">
      <summary>
             Contains the location (rectangle) of the text found by Find() or FindNext() methods.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.ITextExtractor.RegexSearch">
      <summary>
            Gets or sets a value indicating whether to search the text using regular expresions.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.ITextExtractor.PageSeparator">
      <summary>
            Gets or sets the page separator character or string. Default is '\f'.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.InfoExtractor">
      <summary>
             Provides information about PDF document.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.InfoExtractor.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.InfoExtractor" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.InfoExtractor.#ctor(System.String,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.InfoExtractor" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.InfoExtractor.Reset">
      <summary>
             Resets the <see cref="T:Bytescout.PDFExtractor.InfoExtractor" /> instance and disposes internal resources.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.InfoExtractor.GetAuthor">
      <summary>
             Gets the document author.
            </summary>
      <returns>Document author.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.InfoExtractor.IsEncrypted">
      <summary>
             Gets the document encrypted state.
            </summary>
      <returns>Encryption state.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.InfoExtractor.GetBookmarks">
      <summary>
             Gets the document bookmarks.
            </summary>
      <returns>Document bookmarks.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.InfoExtractor.GetCreationDate">
      <summary>
             Gets the document creation date.
            </summary>
      <returns>Creation date.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.InfoExtractor.GetCreator">
      <summary>
             Gets the document creator.
            </summary>
      <returns>Document creator.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.InfoExtractor.GetKeywords">
      <summary>
             Gets the document keywords.
            </summary>
      <returns>Document keywords.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.InfoExtractor.GetProducer">
      <summary>
             Gets the document producer.
            </summary>
      <returns>Document producer.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.InfoExtractor.GetSubject">
      <summary>
             Gets the document subject.
            </summary>
      <returns>Document subject.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.InfoExtractor.GetTitle">
      <summary>
             Gets the document title.
            </summary>
      <returns>Document title.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="P:Bytescout.PDFExtractor.InfoExtractor.Bookmarks">
      <summary>
             Bookmarks.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.InfoExtractor.Title">
      <summary>
             Title of the document.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.InfoExtractor.Author">
      <summary>
             Author of the document.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.InfoExtractor.Producer">
      <summary>
             Producer of the document.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.InfoExtractor.Creator">
      <summary>
             Creator of the document.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.InfoExtractor.Keywords">
      <summary>
             Document keywords.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.InfoExtractor.Subject">
      <summary>
             Document subject.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.InfoExtractor.CreationDate">
      <summary>
             Document creation date.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.InfoExtractor.Encrypted">
      <summary>
             Document encryption.
            </summary>
    </member>
    <member name="T:Bytescout.PDFExtractor.ImageExtractor">
      <summary>
             Extracts images from PDF document.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.ImageExtractor.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.ImageExtractor" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.ImageExtractor.#ctor(System.String,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.ImageExtractor" /> class.
            </summary>
      <param name="registrationName">Registration name.</param>
      <param name="registrationKey">Registration key.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.ImageExtractor.Reset">
      <summary>
             Resets the <see cref="T:Bytescout.PDFExtractor.ImageExtractor" /> instance and disposes internal resources.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.ImageExtractor.GetDocumentImageCount">
      <summary>
             Returns count of images in the document.
            </summary>
      <returns>Count of images.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ImageExtractor.GetPageImageCount(System.Int32)">
      <summary>
             Returns count of images on specified document page.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <returns>Count of images on the page.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
      <exception cref="T:System.IndexOutOfRangeException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ImageExtractor.GetFirstImage">
      <summary>
             Initializes enumeration of images in the document. If GetFirstImage() returned true, you can get
             the image using SaveCurrentImage*() or GetCurrentImage*() methods.
            </summary>
      <returns>False if no images in the document, otherwise true.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ImageExtractor.GetFirstPageImage(System.Int32)">
      <summary>
             Initializes enumeration of images on the document page. If GetFirstPageImage() returned true, you can get
             the image using SaveCurrentImage*() or GetCurrentImage*() methods.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <returns>False if no images on the page, otherwise true.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
      <exception cref="T:System.IndexOutOfRangeException">Invalid page index specified.</exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ImageExtractor.GetNextImage">
      <summary>
             Advances image enumeration to next image. If GetNextImage() returned true, you can get
             the image using SaveCurrentImage*() or GetCurrentImage*() methods.
            </summary>
      <returns>False if no more images in the enumeration, otherwise true.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ImageExtractor.SaveCurrentImageToFile(System.String)">
      <summary>
             Saves current image to PNG file with specified name.
            </summary>
      <param name="fileName">File name.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ImageExtractor.SaveCurrentImageToFile(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>
             Saves current image to a file with specified name and format.
            </summary>
      <param name="fileName">File name.</param>
      <param name="imageFormat">Image format.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ImageExtractor.SaveCurrentImageToStream(System.IO.Stream)">
      <summary>
             Saves current image to provided stream in PNG format.
            </summary>
      <param name="stream">Output stream.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ImageExtractor.SaveCurrentImageToStream(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>
             Saves current image to the stream with specified format.
            </summary>
      <param name="stream">Output stream.</param>
      <param name="imageFormat">Image format.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ImageExtractor.GetCurrentImageBytesSize">
      <summary>
             Returns size of current image.
            </summary>
      <returns>Count of bytes.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.ImageExtractor.GetCurrentImageAsArrayOfBytes">
      <summary>
             Returns current image as array of bytes.
            </summary>
      <returns>
      </returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="T:Bytescout.PDFExtractor.PDFExtractorException">
      <summary>
             Represents errors that occur during PDF extraction process.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.PDFExtractorException.#ctor(System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.PDFExtractorException" /> class.
            </summary>
      <param name="message">The message text.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.PDFExtractorException.#ctor(System.String,System.Exception)">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.PDFExtractorException" /> class.
            </summary>
      <param name="message">The message text.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:Bytescout.PDFExtractor.TextExtractor">
      <summary>
             Represents PDF to Text extractor.
            </summary>
    </member>
    <member name="F:Bytescout.PDFExtractor.TextExtractor.CONST_SpaceRatioBetweenWords">
      <summary>
            This constant defines default number of spaces to separate text blocks inside one single row (line) as different groups
            For most files it is enought to use 1.0f when doing text extraction
            Some files with small fonts may require 1.2f or 1.1f
            Please change this default carefully, probably it is better to tell the customer
            to change .SpaceRatioBetweenWords property instead of changing the default consant for the property
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.DisposePage(System.Int32)">
      <summary>
            Disposes the page object
            Uses this method carefully to destroy the page object that should not be used further
            </summary>
      <param name="pageIndex">Page index</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.#ctor">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.TextExtractor" /> class.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.#ctor(System.String,System.String)">
      <summary>
             Initializes a new instance of the <see cref="T:Bytescout.PDFExtractor.TextExtractor" /> class.
            </summary>
      <param name="registrationName">Registration name.</param>
      <param name="registrationKey">Registration key.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.Reset">
      <summary>
             Resets the instance and disposes internal resources. Also automatically invoked by <see cref="M:Bytescout.PDFExtractor.BaseExtractor.Dispose" />.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.GetText">
      <summary>
             Extracts text from whole document.
            </summary>
      <returns>Document text.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.GetText(System.Int32,System.Int32)">
      <summary>
             Extracts text from specifed page range.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <returns>Concatenated text from range of pages.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.GetTextFromPage(System.Int32)">
      <summary>
             Extracts text from specified document page.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <returns>Page text.</returns>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
      <exception cref="T:System.IndexOutOfRangeException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.SaveTextToFile(System.String)">
      <summary>
             Saves document text to file.
            </summary>
      <param name="fileName">File name.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.SaveTextToFile(System.Int32,System.Int32,System.String)">
      <summary>
             Saves text from specified page range to file.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <param name="fileName">Output file name.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.SaveTextToStream(System.IO.Stream)">
      <summary>
             Saves document text to stream.
            </summary>
      <param name="stream">Output stream.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.SaveTextToStream(System.Int32,System.Int32,System.IO.Stream)">
      <summary>
             Saves text from specified page range to stream.
            </summary>
      <param name="startPage">Start page index.</param>
      <param name="endPage">End page index. -1 means all pages to the document end.</param>
      <param name="stream">Output stream.</param>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.SavePageTextToFile(System.Int32,System.String)">
      <summary>
             Saves page text to file.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="fileName">Output file name.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.SavePageTextToStream(System.Int32,System.IO.Stream)">
      <summary>
             Saves page text to stream.
            </summary>
      <param name="pageIndex">Page index (zero-based).</param>
      <param name="stream">Output stream.</param>
      <exception cref="T:Bytescout.PDFExtractor.PDFExtractorException">
      </exception>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.Find(System.Int32,System.String,System.Boolean)">
      <summary>
            Searches the document page for specified text.
            </summary>
      <param name="pageIndex">Index of page for searching.</param>
      <param name="text">Text to find.</param>
      <param name="caseSensitive">Case sensitivity.</param>
      <returns>
        <c>true</c> if search string is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.Find(System.Int32,System.String,System.Boolean,System.Drawing.RectangleF@)">
      <summary>
            Searches the document page for specified text.
            </summary>
      <param name="pageIndex">Index of page for searching.</param>
      <param name="text">Text to find.</param>
      <param name="caseSensitive">Case sensitivity.</param>
      <param name="location">Location (rectangle) of the found text.</param>
      <returns>
        <c>true</c> if search string is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.FindNext">
      <summary>
            Continues the text search started by Find() method.
            </summary>
      <returns>
        <c>true</c> if search string is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.FindNext(System.Drawing.RectangleF@)">
      <summary>
            Continues the text search started by Find() method.
            </summary>
      <param name="location">Location (rectangle) of the found text.</param>
      <returns>
        <c>true</c> if search string is found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.GetFoundTextRectangle_Left">
      <summary>
             Returns the left coordinate of rectangle of the text found by Find() or FindNext() methods.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.GetFoundTextRectangle_Top">
      <summary>
             Returns the top coordinate of rectangle of the text found by Find() or FindNext() methods.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.GetFoundTextRectangle_Width">
      <summary>
             Returns the width of rectangle of the text found by Find() or FindNext() methods.
            </summary>
    </member>
    <member name="M:Bytescout.PDFExtractor.TextExtractor.GetFoundTextRectangle_Height">
      <summary>
             Returns the height of rectangle of the text found by Find() or FindNext() methods.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.TextExtractor.ExtractInvisibleText">
      <summary>
            Gets or sets a value indicating whether to extract invisible text from PDF document.
            </summary>
      <value>
        <c>true</c> if extract invisible text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.TextExtractor.ExtractShadowLikeText">
      <summary>
            Gets or sets a value indicating whether to include characters used to create "shadow" effect (when the same character appears with some offset) from PDF document.
            True by default (includes all encoded characters disregarding their real appearance)
            </summary>
      <value>
        <c>true</c> if extract shadow like characters in text; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.TextExtractor.PreserveFormattingOnTextExtraction">
      <summary>
            Gets or sets a value indicating whether to preserve the text formatting on the extraction.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.TextExtractor.DetectLinesInsteadOfParagraphs">
      <summary>
            Tries to detect single lines instead of multiple lines.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.TextExtractor.TrimSpaces">
      <summary>
             Gets or sets a value indicating whether to remove trailing and ending spaces from table cell values.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.TextExtractor.ExtractColumnByColumn">
      <summary>
            Gets or sets a value indicating whether to extract text column by column or use the visual layout of the text while extracting.
            False by default.
            if you are processing PDF newspapers with text columns, set this property to True so you get column by column instead of line by line
            </summary>
      <value>
        <c>true</c> if extract column by column; otherwise extracts line by line (default), <c>false</c>.
            </value>
    </member>
    <member name="P:Bytescout.PDFExtractor.TextExtractor.SpaceRatioBetweenWords">
      <summary>
             Space ratio between words.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.TextExtractor.FoundTextRectangle">
      <summary>
             Contains the location (rectangle) of the text found by Find() or FindNext() methods.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.TextExtractor.RegexSearch">
      <summary>
            Gets or sets a value indicating whether to search the text using regular expresions.
            </summary>
    </member>
    <member name="P:Bytescout.PDFExtractor.TextExtractor.PageSeparator">
      <summary>
            Gets or sets the page separator character or string. Default is '\f'.
            </summary>
    </member>
  </members>
</doc>